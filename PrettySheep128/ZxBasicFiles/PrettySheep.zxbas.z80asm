	.zxbasic
	org 32768
__START_PROGRAM:
	di
	push ix
	push iy
	exx
	push hl
	exx
	ld hl, 0
	add hl, sp
	ld (__CALL_BACK__), hl
	ei
	call __MEM_INIT
	call __PRINT_INIT
	jp __MAIN_PROGRAM__
ZXBASIC_USER_DATA:
	; Defines HEAP SIZE
ZXBASIC_HEAP_SIZE EQU 256
ZXBASIC_MEM_HEAP:
	DEFS 256
	; Defines USER DATA Length in bytes
ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_END - ZXBASIC_USER_DATA
	.__LABEL__.ZXBASIC_USER_DATA_LEN EQU ZXBASIC_USER_DATA_LEN
	.__LABEL__.ZXBASIC_USER_DATA EQU ZXBASIC_USER_DATA
	_intHandlerAddress EQU 65279
_counter:
	DEFB 00, 00
_sheepOnGate:
	DEFB 00h
_gateX:
	DEFB 0Eh
_trappedSheep:
	DEFB 00h
_girlX:
	DEFB 1Ch
_girlY:
	DEFB 12h
_girlFrm:
	DEFB 00h
_girlDir:
	DEFB 00h
_girlVx:
	DEFB 00h
_spaceDown:
	DEFB 00h
_loopCount:
	DEFB 00h
_timeCount:
	DEFB 00h
_sunX:
	DEFB 01h
_cSmoke:
	DEFB 00h
_introFrm:
	DEFB 00
_wolvesToSpawn:
	DEFB 00h
_wolfIndex:
	DEFB 00h
_lose:
	DEFB 00h
_score:
	DEFB 00h
	DEFB 00h
_hiScore:
	DEFB 00h
	DEFB 00h
_checkSheeps:
	DEFB 00h
_currentLevel:
	DEFB 00h
_nextLevel:
	DEFB 00h
_updateScore:
	DEFB 00h
_boyOnScreen:
	DEFB 00h
_boyX:
	DEFB 00h
_boyY:
	DEFB 00h
_boyWait:
	DEFB 00h
_sheep:
	DEFW __LABEL391
_sheep.__DATA__.__PTR__:
	DEFW _sheep.__DATA__
_sheep.__DATA__:
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 6Eh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 39h
	DEFB 28h
	DEFB 48h
	DEFB 2Ch
	DEFB 0E0h
	DEFB 0D8h
	DEFB 0ACh
	DEFB 0ECh
	DEFB 1Eh
	DEFB 0F6h
	DEFB 0EBh
	DEFB 0FFh
	DEFB 0BDh
	DEFB 0CEh
	DEFB 0F0h
	DEFB 0FCh
	DEFB 0F0h
	DEFB 50h
	DEFB 90h
	DEFB 58h
	DEFB 00h
	DEFB 01h
	DEFB 07h
	DEFB 6Eh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 39h
	DEFB 24h
	DEFB 24h
	DEFB 32h
	DEFB 0E0h
	DEFB 0D8h
	DEFB 0ACh
	DEFB 0ECh
	DEFB 1Eh
	DEFB 0F6h
	DEFB 0EBh
	DEFB 0FFh
	DEFB 0BDh
	DEFB 0CEh
	DEFB 0F0h
	DEFB 0FCh
	DEFB 0F0h
	DEFB 90h
	DEFB 90h
	DEFB 0C8h
	DEFB 07h
	DEFB 1Bh
	DEFB 35h
	DEFB 37h
	DEFB 78h
	DEFB 6Fh
	DEFB 0D7h
	DEFB 0FFh
	DEFB 0BDh
	DEFB 73h
	DEFB 0Fh
	DEFB 3Fh
	DEFB 0Fh
	DEFB 0Ah
	DEFB 09h
	DEFB 1Ah
	DEFB 00h
	DEFB 80h
	DEFB 0E0h
	DEFB 76h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 9Ch
	DEFB 14h
	DEFB 12h
	DEFB 34h
	DEFB 07h
	DEFB 1Bh
	DEFB 35h
	DEFB 37h
	DEFB 78h
	DEFB 6Fh
	DEFB 0D7h
	DEFB 0FFh
	DEFB 0BDh
	DEFB 73h
	DEFB 0Fh
	DEFB 3Fh
	DEFB 0Fh
	DEFB 09h
	DEFB 09h
	DEFB 13h
	DEFB 00h
	DEFB 80h
	DEFB 0E0h
	DEFB 76h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 9Ch
	DEFB 24h
	DEFB 24h
	DEFB 4Ch
__LABEL391:
	DEFW 0001h
	DEFW 0020h
	DEFB 01h
_wolf:
	DEFW __LABEL392
_wolf.__DATA__.__PTR__:
	DEFW _wolf.__DATA__
_wolf.__DATA__:
	DEFB 04h
	DEFB 0Ch
	DEFB 17h
	DEFB 15h
	DEFB 3Ch
	DEFB 3Eh
	DEFB 7Fh
	DEFB 7Dh
	DEFB 3Dh
	DEFB 1Eh
	DEFB 9Fh
	DEFB 0DDh
	DEFB 7Bh
	DEFB 1Eh
	DEFB 0F8h
	DEFB 0C0h
	DEFB 00h
	DEFB 00h
	DEFB 3Fh
	DEFB 0FDh
	DEFB 0FFh
	DEFB 0D5h
	DEFB 80h
	DEFB 0EAh
	DEFB 0FEh
	DEFB 8Ch
	DEFB 0E0h
	DEFB 00h
	DEFB 10h
	DEFB 0F0h
	DEFB 20h
	DEFB 00h
	DEFB 04h
	DEFB 0Ch
	DEFB 17h
	DEFB 15h
	DEFB 3Dh
	DEFB 3Fh
	DEFB 7Fh
	DEFB 7Dh
	DEFB 3Dh
	DEFB 1Eh
	DEFB 0FFh
	DEFB 1Dh
	DEFB 7Bh
	DEFB 0Fh
	DEFB 1Ah
	DEFB 11h
	DEFB 0Fh
	DEFB 3Dh
	DEFB 7Fh
	DEFB 0F5h
	DEFB 0C0h
	DEFB 80h
	DEFB 80h
	DEFB 0A0h
	DEFB 0EAh
	DEFB 0FEh
	DEFB 8Ch
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 80h
	DEFB 00h
	DEFB 00h
	DEFB 0FCh
	DEFB 0BFh
	DEFB 0FFh
	DEFB 0ABh
	DEFB 01h
	DEFB 57h
	DEFB 7Fh
	DEFB 31h
	DEFB 07h
	DEFB 00h
	DEFB 08h
	DEFB 0Fh
	DEFB 04h
	DEFB 00h
	DEFB 20h
	DEFB 30h
	DEFB 0E8h
	DEFB 0A8h
	DEFB 3Ch
	DEFB 7Ch
	DEFB 0FEh
	DEFB 0BEh
	DEFB 0BCh
	DEFB 78h
	DEFB 0F9h
	DEFB 0BBh
	DEFB 0DEh
	DEFB 78h
	DEFB 1Fh
	DEFB 03h
	DEFB 0F0h
	DEFB 0BCh
	DEFB 0FEh
	DEFB 0AFh
	DEFB 03h
	DEFB 01h
	DEFB 01h
	DEFB 05h
	DEFB 57h
	DEFB 7Fh
	DEFB 31h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 20h
	DEFB 30h
	DEFB 0E8h
	DEFB 0A8h
	DEFB 0BCh
	DEFB 0FCh
	DEFB 0FEh
	DEFB 0BEh
	DEFB 0BCh
	DEFB 78h
	DEFB 0FFh
	DEFB 0B8h
	DEFB 0DEh
	DEFB 0F0h
	DEFB 58h
	DEFB 88h
__LABEL392:
	DEFW 0001h
	DEFW 0020h
	DEFB 01h
_girl:
	DEFW __LABEL393
_girl.__DATA__.__PTR__:
	DEFW _girl.__DATA__
_girl.__DATA__:
	DEFB 07h
	DEFB 0Ch
	DEFB 1Bh
	DEFB 1Bh
	DEFB 16h
	DEFB 3Fh
	DEFB 0AFh
	DEFB 45h
	DEFB 02h
	DEFB 07h
	DEFB 0Bh
	DEFB 0Bh
	DEFB 1Dh
	DEFB 0Fh
	DEFB 38h
	DEFB 20h
	DEFB 0E0h
	DEFB 0B0h
	DEFB 50h
	DEFB 0F0h
	DEFB 0A0h
	DEFB 0E0h
	DEFB 60h
	DEFB 0C6h
	DEFB 49h
	DEFB 0D1h
	DEFB 0E2h
	DEFB 0E0h
	DEFB 0E0h
	DEFB 0F0h
	DEFB 80h
	DEFB 0C0h
	DEFB 07h
	DEFB 0Ch
	DEFB 1Bh
	DEFB 1Bh
	DEFB 16h
	DEFB 0BFh
	DEFB 6Fh
	DEFB 05h
	DEFB 02h
	DEFB 07h
	DEFB 0Dh
	DEFB 0Eh
	DEFB 0Fh
	DEFB 1Fh
	DEFB 0Eh
	DEFB 08h
	DEFB 0E0h
	DEFB 0B0h
	DEFB 50h
	DEFB 0F0h
	DEFB 0A0h
	DEFB 0E0h
	DEFB 60h
	DEFB 0C0h
	DEFB 40h
	DEFB 0C0h
	DEFB 0FEh
	DEFB 0E1h
	DEFB 31h
	DEFB 0E6h
	DEFB 40h
	DEFB 60h
	DEFB 07h
	DEFB 0Dh
	DEFB 0Ah
	DEFB 0Fh
	DEFB 05h
	DEFB 07h
	DEFB 06h
	DEFB 63h
	DEFB 92h
	DEFB 8Bh
	DEFB 47h
	DEFB 07h
	DEFB 07h
	DEFB 0Fh
	DEFB 01h
	DEFB 03h
	DEFB 0E0h
	DEFB 30h
	DEFB 0D8h
	DEFB 0D8h
	DEFB 68h
	DEFB 0FCh
	DEFB 0F5h
	DEFB 0A2h
	DEFB 40h
	DEFB 0E0h
	DEFB 0D0h
	DEFB 0D0h
	DEFB 0B8h
	DEFB 0F0h
	DEFB 1Ch
	DEFB 04h
	DEFB 07h
	DEFB 0Dh
	DEFB 0Ah
	DEFB 0Fh
	DEFB 05h
	DEFB 07h
	DEFB 06h
	DEFB 03h
	DEFB 02h
	DEFB 03h
	DEFB 7Fh
	DEFB 87h
	DEFB 8Ch
	DEFB 67h
	DEFB 02h
	DEFB 06h
	DEFB 0E0h
	DEFB 30h
	DEFB 0D8h
	DEFB 0D8h
	DEFB 68h
	DEFB 0FDh
	DEFB 0F6h
	DEFB 0A0h
	DEFB 40h
	DEFB 0E0h
	DEFB 0B0h
	DEFB 70h
	DEFB 0F0h
	DEFB 0F8h
	DEFB 70h
	DEFB 10h
__LABEL393:
	DEFW 0001h
	DEFW 0020h
	DEFB 01h
_boy:
	DEFW __LABEL394
_boy.__DATA__.__PTR__:
	DEFW _boy.__DATA__
_boy.__DATA__:
	DEFB 07h
	DEFB 0Fh
	DEFB 1Bh
	DEFB 17h
	DEFB 16h
	DEFB 1Fh
	DEFB 0Fh
	DEFB 07h
	DEFB 03h
	DEFB 07h
	DEFB 0Bh
	DEFB 0Bh
	DEFB 0Dh
	DEFB 07h
	DEFB 38h
	DEFB 20h
	DEFB 0E0h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 0A0h
	DEFB 0E0h
	DEFB 60h
	DEFB 0C0h
	DEFB 80h
	DEFB 0A0h
	DEFB 0E0h
	DEFB 0C0h
	DEFB 0C0h
	DEFB 80h
	DEFB 80h
	DEFB 0C0h
	DEFB 07h
	DEFB 0Fh
	DEFB 1Bh
	DEFB 17h
	DEFB 16h
	DEFB 1Fh
	DEFB 0Fh
	DEFB 07h
	DEFB 03h
	DEFB 07h
	DEFB 0Dh
	DEFB 0Eh
	DEFB 0Fh
	DEFB 07h
	DEFB 0Eh
	DEFB 08h
	DEFB 0E0h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 0E0h
	DEFB 0A0h
	DEFB 0E0h
	DEFB 60h
	DEFB 0C0h
	DEFB 80h
	DEFB 0C0h
	DEFB 0E0h
	DEFB 70h
	DEFB 0C0h
	DEFB 0C0h
	DEFB 40h
	DEFB 60h
	DEFB 07h
	DEFB 0Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 05h
	DEFB 07h
	DEFB 06h
	DEFB 03h
	DEFB 01h
	DEFB 05h
	DEFB 07h
	DEFB 03h
	DEFB 03h
	DEFB 01h
	DEFB 01h
	DEFB 03h
	DEFB 0E0h
	DEFB 0F0h
	DEFB 0D8h
	DEFB 0E8h
	DEFB 68h
	DEFB 0F8h
	DEFB 0F0h
	DEFB 0E0h
	DEFB 0C0h
	DEFB 0E0h
	DEFB 0D0h
	DEFB 0D0h
	DEFB 0B0h
	DEFB 0E0h
	DEFB 1Ch
	DEFB 04h
	DEFB 07h
	DEFB 0Fh
	DEFB 0Fh
	DEFB 07h
	DEFB 05h
	DEFB 07h
	DEFB 06h
	DEFB 03h
	DEFB 01h
	DEFB 03h
	DEFB 07h
	DEFB 0Eh
	DEFB 03h
	DEFB 03h
	DEFB 02h
	DEFB 06h
	DEFB 0E0h
	DEFB 0F0h
	DEFB 0D8h
	DEFB 0E8h
	DEFB 68h
	DEFB 0F8h
	DEFB 0F0h
	DEFB 0E0h
	DEFB 0C0h
	DEFB 0E0h
	DEFB 0B0h
	DEFB 70h
	DEFB 0F0h
	DEFB 0E0h
	DEFB 70h
	DEFB 10h
__LABEL394:
	DEFW 0001h
	DEFW 0020h
	DEFB 01h
_endSprites:
	DEFW __LABEL395
_endSprites.__DATA__.__PTR__:
	DEFW _endSprites.__DATA__
_endSprites.__DATA__:
	DEFB 00h
	DEFB 01h
	DEFB 03h
	DEFB 03h
	DEFB 01h
	DEFB 3Fh
	DEFB 0FBh
	DEFB 1Fh
	DEFB 1Fh
	DEFB 0FFh
	DEFB 3Fh
	DEFB 01h
	DEFB 03h
	DEFB 03h
	DEFB 01h
	DEFB 00h
	DEFB 0E0h
	DEFB 0C0h
	DEFB 0E0h
	DEFB 0C0h
	DEFB 0E3h
	DEFB 0EEh
	DEFB 0FCh
	DEFB 0FEh
	DEFB 0FEh
	DEFB 0FCh
	DEFB 0EEh
	DEFB 0E3h
	DEFB 0C0h
	DEFB 0E0h
	DEFB 0C0h
	DEFB 0E0h
	DEFB 00h
	DEFB 00h
	DEFB 01h
	DEFB 03h
	DEFB 03h
	DEFB 1Fh
	DEFB 7Bh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 1Fh
	DEFB 03h
	DEFB 03h
	DEFB 01h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 0F0h
	DEFB 0E0h
	DEFB 0C0h
	DEFB 0E0h
	DEFB 0EFh
	DEFB 0FCh
	DEFB 0FEh
	DEFB 0FEh
	DEFB 0FCh
	DEFB 0EFh
	DEFB 0E0h
	DEFB 0C0h
	DEFB 0E0h
	DEFB 0F0h
	DEFB 00h
	DEFB 1Fh
	DEFB 3Fh
	DEFB 7Fh
	DEFB 7Ch
	DEFB 0F8h
	DEFB 0F8h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0F8h
	DEFB 0F8h
	DEFB 7Ch
	DEFB 7Fh
	DEFB 3Fh
	DEFB 1Fh
	DEFB 0FCh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0Fh
	DEFB 06h
	DEFB 00h
	DEFB 0E0h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 0E0h
	DEFB 00h
	DEFB 06h
	DEFB 0Fh
	DEFB 0FFh
	DEFB 0FEh
	DEFB 0FCh
	DEFB 7Ch
	DEFB 0F8h
	DEFB 0FCh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0F7h
	DEFB 0F3h
	DEFB 0F1h
	DEFB 0F0h
	DEFB 0F8h
	DEFB 0FCh
	DEFB 7Ch
	DEFB 3Eh
	DEFB 3Fh
	DEFB 1Fh
	DEFB 0Fh
	DEFB 0Fh
	DEFB 8Fh
	DEFB 0CFh
	DEFB 0EFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 3Fh
	DEFB 1Eh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0F1h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 0F0h
	DEFB 0F1h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 0FFh
	DEFB 7Fh
	DEFB 00h
	DEFB 0C0h
	DEFB 0E0h
	DEFB 0F0h
	DEFB 0F8h
	DEFB 0FCh
	DEFB 7Eh
	DEFB 3Eh
	DEFB 3Eh
	DEFB 7Eh
	DEFB 0FCh
	DEFB 0F8h
	DEFB 0F0h
	DEFB 0E0h
	DEFB 0C0h
	DEFB 00h
__LABEL395:
	DEFW 0001h
	DEFW 0020h
	DEFB 01h
_tileSet:
	DEFW __LABEL396
_tileSet.__DATA__.__PTR__:
	DEFW _tileSet.__DATA__
_tileSet.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 54h
	DEFB 7Ch
	DEFB 7Ch
	DEFB 38h
	DEFB 10h
	DEFB 58h
	DEFB 30h
	DEFB 10h
	DEFB 10h
	DEFB 54h
	DEFB 0AAh
	DEFB 55h
	DEFB 99h
	DEFB 99h
	DEFB 0FFh
	DEFB 99h
	DEFB 0FFh
	DEFB 99h
	DEFB 99h
	DEFB 99h
	DEFB 99h
	DEFB 0DBh
	DEFB 0BDh
	DEFB 99h
	DEFB 99h
	DEFB 0BDh
	DEFB 0DBh
	DEFB 99h
	DEFB 42h
	DEFB 7Eh
	DEFB 42h
	DEFB 0FFh
	DEFB 0FFh
	DEFB 42h
	DEFB 7Eh
	DEFB 42h
	DEFB 07h
	DEFB 1Eh
	DEFB 3Ch
	DEFB 7Eh
	DEFB 0EFh
	DEFB 0C7h
	DEFB 0EFh
	DEFB 7Bh
	DEFB 0E0h
	DEFB 0F8h
	DEFB 7Ch
	DEFB 0F6h
	DEFB 0E3h
	DEFB 0F7h
	DEFB 0FFh
	DEFB 0BCh
	DEFB 01h
	DEFB 01h
	DEFB 01h
	DEFB 03h
	DEFB 03h
	DEFB 07h
	DEFB 0Fh
	DEFB 1Bh
	DEFB 80h
	DEFB 80h
	DEFB 0C0h
	DEFB 80h
	DEFB 80h
	DEFB 0C0h
	DEFB 0E0h
	DEFB 50h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 1Fh
	DEFB 3Fh
	DEFB 7Fh
	DEFB 0FFh
	DEFB 92h
	DEFB 14h
	DEFB 08h
	DEFB 14h
	DEFB 0FCh
	DEFB 0FCh
	DEFB 0FEh
	DEFB 0FFh
	DEFB 49h
	DEFB 6Dh
	DEFB 7Fh
	DEFB 7Fh
	DEFB 41h
	DEFB 5Dh
	DEFB 41h
	DEFB 7Fh
	DEFB 7Fh
	DEFB 0B6h
	DEFB 0FEh
	DEFB 0FEh
	DEFB 0C2h
	DEFB 0DAh
	DEFB 0DAh
	DEFB 0DAh
	DEFB 0DAh
	DEFB 40h
	DEFB 0E0h
	DEFB 0E0h
	DEFB 78h
	DEFB 30h
	DEFB 06h
	DEFB 06h
	DEFB 00h
	DEFB 0Ch
	DEFB 0Ch
	DEFB 60h
	DEFB 70h
	DEFB 70h
	DEFB 30h
	DEFB 18h
	DEFB 00h
	DEFB 53h
	DEFB 0AFh
	DEFB 5Fh
	DEFB 0BFh
	DEFB 79h
	DEFB 78h
	DEFB 0F9h
	DEFB 0F9h
	DEFB 0CAh
	DEFB 0F5h
	DEFB 0FAh
	DEFB 0FDh
	DEFB 9Eh
	DEFB 8Eh
	DEFB 9Fh
	DEFB 9Fh
	DEFB 0F8h
	DEFB 0FFh
	DEFB 78h
	DEFB 7Ch
	DEFB 0BEh
	DEFB 5Fh
	DEFB 0AFh
	DEFB 53h
	DEFB 8Fh
	DEFB 0FFh
	DEFB 1Eh
	DEFB 3Eh
	DEFB 7Dh
	DEFB 0FAh
	DEFB 0F5h
	DEFB 0CAh
	DEFB 31h
	DEFB 7Fh
	DEFB 0CCh
	DEFB 0B7h
	DEFB 0F7h
	DEFB 0FFh
	DEFB 7Fh
	DEFB 1Ah
	DEFB 0B8h
	DEFB 0CCh
	DEFB 0B6h
	DEFB 7Eh
	DEFB 0FEh
	DEFB 0FCh
	DEFB 30h
	DEFB 00h
	DEFB 0A5h
	DEFB 10h
	DEFB 42h
	DEFB 14h
	DEFB 42h
	DEFB 08h
	DEFB 42h
	DEFB 0A5h
	DEFB 18h
	DEFB 0A5h
	DEFB 42h
	DEFB 00h
	DEFB 66h
	DEFB 18h
	DEFB 00h
	DEFB 99h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 04h
	DEFB 4Eh
	DEFB 0FFh
	DEFB 00h
	DEFB 03h
	DEFB 01h
	DEFB 03h
	DEFB 13h
	DEFB 56h
	DEFB 7Fh
	DEFB 0FFh
	DEFB 00h
	DEFB 0C0h
	DEFB 80h
	DEFB 0C0h
	DEFB 0C8h
	DEFB 6Ah
	DEFB 0FEh
	DEFB 0FFh
	DEFB 10h
	DEFB 25h
	DEFB 42h
	DEFB 80h
	DEFB 01h
	DEFB 52h
	DEFB 24h
	DEFB 08h
	DEFB 7Ch
	DEFB 0FEh
	DEFB 0E0h
	DEFB 0FCh
	DEFB 7Eh
	DEFB 0Eh
	DEFB 0FEh
	DEFB 7Ch
	DEFB 7Ch
	DEFB 0FEh
	DEFB 0EEh
	DEFB 0E0h
	DEFB 0E0h
	DEFB 0EEh
	DEFB 0FEh
	DEFB 7Ch
	DEFB 7Ch
	DEFB 0FEh
	DEFB 0EEh
	DEFB 0C6h
	DEFB 0C6h
	DEFB 0EEh
	DEFB 0FEh
	DEFB 7Ch
	DEFB 0FCh
	DEFB 0FEh
	DEFB 0C6h
	DEFB 0FEh
	DEFB 0FCh
	DEFB 0EEh
	DEFB 0EEh
	DEFB 0EEh
	DEFB 7Eh
	DEFB 0FEh
	DEFB 0C0h
	DEFB 0F8h
	DEFB 0F8h
	DEFB 0C0h
	DEFB 0FEh
	DEFB 7Eh
	DEFB 00h
	DEFB 00h
	DEFB 7Ch
	DEFB 0FEh
	DEFB 0FEh
	DEFB 7Ch
	DEFB 00h
	DEFB 00h
	DEFB 44h
	DEFB 0EEh
	DEFB 0EEh
	DEFB 0FEh
	DEFB 0FEh
	DEFB 0EEh
	DEFB 0EEh
	DEFB 44h
	DEFB 10h
	DEFB 38h
	DEFB 38h
	DEFB 38h
	DEFB 38h
	DEFB 38h
	DEFB 38h
	DEFB 10h
	DEFB 60h
	DEFB 0F0h
	DEFB 60h
	DEFB 00h
	DEFB 00h
	DEFB 60h
	DEFB 0F0h
	DEFB 60h
	DEFB 7Ch
	DEFB 0FEh
	DEFB 0CEh
	DEFB 0D6h
	DEFB 0D6h
	DEFB 0E6h
	DEFB 0FEh
	DEFB 7Ch
	DEFB 1Ch
	DEFB 3Ch
	DEFB 7Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 7Ch
	DEFB 0FEh
	DEFB 0Eh
	DEFB 1Ch
	DEFB 38h
	DEFB 70h
	DEFB 0FEh
	DEFB 0FEh
	DEFB 0FCh
	DEFB 0FEh
	DEFB 0Eh
	DEFB 7Ch
	DEFB 7Ch
	DEFB 0Eh
	DEFB 0FEh
	DEFB 0FCh
	DEFB 0CCh
	DEFB 0CCh
	DEFB 0CCh
	DEFB 0FEh
	DEFB 0FEh
	DEFB 1Ch
	DEFB 1Ch
	DEFB 1Ch
	DEFB 0FEh
	DEFB 0FEh
	DEFB 0E0h
	DEFB 0FCh
	DEFB 0FEh
	DEFB 0Eh
	DEFB 0FEh
	DEFB 7Ch
	DEFB 7Ch
	DEFB 0FEh
	DEFB 0E0h
	DEFB 0FCh
	DEFB 0FEh
	DEFB 0C6h
	DEFB 0FEh
	DEFB 7Ch
	DEFB 0FEh
	DEFB 0FEh
	DEFB 0Eh
	DEFB 1Ch
	DEFB 38h
	DEFB 70h
	DEFB 70h
	DEFB 70h
	DEFB 7Ch
	DEFB 0FEh
	DEFB 0C6h
	DEFB 7Ch
	DEFB 7Ch
	DEFB 0C6h
	DEFB 0FEh
	DEFB 7Ch
	DEFB 7Ch
	DEFB 0FEh
	DEFB 0C6h
	DEFB 0FEh
	DEFB 7Eh
	DEFB 06h
	DEFB 0FEh
	DEFB 7Ch
	DEFB 00h
	DEFB 6Ch
	DEFB 0FEh
	DEFB 0FEh
	DEFB 0FEh
	DEFB 7Ch
	DEFB 38h
	DEFB 10h
	DEFB 00h
	DEFB 38h
	DEFB 7Ch
	DEFB 0C6h
	DEFB 0DEh
	DEFB 0C6h
	DEFB 7Ch
	DEFB 38h
__LABEL396:
	DEFW 0001h
	DEFW 0008h
	DEFB 01h
_introScreen:
	DEFW __LABEL397
_introScreen.__DATA__.__PTR__:
	DEFW _introScreen.__DATA__
_introScreen.__DATA__:
	DEFB 9Eh
	DEFB 73h
	DEFB 0A2h
	DEFB 73h
	DEFB 50h
	DEFB 4Ah
	DEFB 14h
	DEFB 21h
	DEFB 50h
	DEFB 4Ah
	DEFB 08h
	DEFB 21h
	DEFB 9Ch
	DEFB 73h
	DEFB 08h
	DEFB 21h
	DEFB 90h
	DEFB 42h
	DEFB 08h
	DEFB 21h
	DEFB 50h
	DEFB 42h
	DEFB 08h
	DEFB 21h
	DEFB 5Eh
	DEFB 42h
	DEFB 08h
	DEFB 21h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 27h
	DEFB 31h
	DEFB 70h
	DEFB 9Eh
	DEFB 24h
	DEFB 49h
	DEFB 48h
	DEFB 10h
	DEFB 24h
	DEFB 41h
	DEFB 48h
	DEFB 10h
	DEFB 0E7h
	DEFB 31h
	DEFB 70h
	DEFB 1Ch
	DEFB 24h
	DEFB 09h
	DEFB 40h
	DEFB 10h
	DEFB 24h
	DEFB 49h
	DEFB 40h
	DEFB 10h
	DEFB 27h
	DEFB 31h
	DEFB 40h
	DEFB 9Eh
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL397:
	DEFW 0000h
	DEFB 02h
_sheeps:
	DEFW __LABEL398
_sheeps.__DATA__.__PTR__:
	DEFW _sheeps.__DATA__
_sheeps.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL398:
	DEFW 0001h
	DEFW 0008h
	DEFB 01h
_wolves:
	DEFW __LABEL399
_wolves.__DATA__.__PTR__:
	DEFW _wolves.__DATA__
_wolves.__DATA__:
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
	DEFB 00h
__LABEL399:
	DEFW 0001h
	DEFW 0005h
	DEFB 01h
ZXBASIC_USER_DATA_END:
__MAIN_PROGRAM__:
	call _InstallHandler
	ld a, 7
	call INK
	call COPY_ATTR
	ld a, 4
	call PAPER
	call COPY_ATTR
	call CLS
	ld a, 4
	call _FastBorder
#line 29 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
#line 40 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
#line 47 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
#line 52 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
#line 61 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
#line 65 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
#line 75 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
#line 90 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
#line 131 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
#line 136 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
#line 142 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
#line 149 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
#line 157 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
#line 167 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		SPRITE_1x1_BUFFER_SIZE equ (6 * 8)
		SPRITE_1x2_BUFFER_SIZE equ (9 * 8)
		SPRITE_2x2_BUFFER_SIZE equ (15 * 8)
		SPRITE_1x1_SHIFTED_SIZE equ 4
		SPRITE_1x2_SHIFTED_SIZE equ 6
		SPRITE_2x2_SHIFTED_SIZE equ 9
		TOTAL_1x1_OPS equ (0 * SPRITE_1x1_SHIFTED_SIZE)
		TOTAL_1x2_OPS equ (0 * SPRITE_1x2_SHIFTED_SIZE)
		TOTAL_2x2_OPS equ (13 * SPRITE_2x2_SHIFTED_SIZE)
		TOTAL_DRAW_OPS equ ((TOTAL_1x1_OPS + TOTAL_1x2_OPS + TOTAL_2x2_OPS) * 2)
		DRAW_OP_SIZE equ 5
#line 188 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		DRAW_OPS_SIZE equ (TOTAL_DRAW_OPS * DRAW_OP_SIZE)
		DRAW_OPS_DATA_SIZE equ (TOTAL_DRAW_OPS * 8)
		SPRITE_BUFFER_SIZE equ ((1 * SPRITE_1x1_BUFFER_SIZE)+(1 * SPRITE_1x2_BUFFER_SIZE)+(21 * SPRITE_2x2_BUFFER_SIZE))
		SPRITE_INDEX_SIZE equ ((1 + 1 + 21) * 2)
		jp GSPRITES_LIB_END
DRAW_OPS_A:
		defs DRAW_OPS_SIZE
DRAW_OPS_B:
		defs DRAW_OPS_SIZE
DRAW_OPS_DATA:
		defs DRAW_OPS_DATA_SIZE
CURRENT_DRAW_OPS:
		defw 0
CURRENT_CLEAR_OPS:
		defw 0
CURRENT_DRAW_COUNT:
		defb 0
CURRENT_CLEAR_COUNT:
		defb 0
DRAW_OPS_DATA_INDEX:
		defw 0
CELL_MAP_A:
		defs (32 * 24)
CELL_MAP_B:
		defs (32 * 24)
CURRENT_DRAW_MAP:
		defw 0
CURRENT_CLEAR_MAP:
		defw 0
SPRITE_BUFFER:
		defs SPRITE_BUFFER_SIZE
SPRITE_INDEX:
		defs SPRITE_INDEX_SIZE
SPRITE_COUNT:
		defb 0
#line 257 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
TILE_SET:
		defw 0
TILE_MAP:
		defs 768
#line 266 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		PROC
INIT_GFX_LIB:
#line 276 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 278
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 279
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 281
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 283
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 284
		ld hl, SPRITE_BUFFER
		ld (SPRITE_INDEX), hl
#line 286
		ret
		ENDP
		PROC
RESET_GFX_LIB:
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 294
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 295
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 297
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 298
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 300
		ld hl, SPRITE_BUFFER
		ld (SPRITE_INDEX), hl
#line 302
		xor a
		ld (CURRENT_DRAW_COUNT), a
		ld (CURRENT_CLEAR_COUNT), a
		xor a
		ld de, SPRITE_BUFFER
		ld (de), a
		inc de
		ld hl, SPRITE_BUFFER
		ld bc, SPRITE_BUFFER_SIZE - 1
		ldir
#line 308
		xor a
		ld de, CELL_MAP_A
		ld (de), a
		inc de
		ld hl, CELL_MAP_A
		ld bc, 768 - 1
		ldir
#line 309
		xor a
		ld de, CELL_MAP_B
		ld (de), a
		inc de
		ld hl, CELL_MAP_B
		ld bc, 768 - 1
		ldir
#line 310
		xor a
		ld de, TILE_MAP
		ld (de), a
		inc de
		ld hl, TILE_MAP
		ld bc, 768 - 1
		ldir
#line 313
#line 314 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ret
		ENDP
		PROC
CLEAR_SCREEN:
		ld hl, DRAW_OPS_A
		ld (CURRENT_DRAW_OPS), hl
#line 322
		ld hl, DRAW_OPS_B
		ld (CURRENT_CLEAR_OPS), hl
#line 323
		ld hl, CELL_MAP_A
		ld (CURRENT_DRAW_MAP), hl
#line 325
		ld hl, CELL_MAP_B
		ld (CURRENT_CLEAR_MAP), hl
#line 326
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 328
		xor a
		ld (CURRENT_DRAW_COUNT), a
		ld (CURRENT_CLEAR_COUNT), a
		xor a
		ld de, CELL_MAP_A
		ld (de), a
		inc de
		ld hl, CELL_MAP_A
		ld bc, 768 - 1
		ldir
#line 334
		xor a
		ld de, CELL_MAP_B
		ld (de), a
		inc de
		ld hl, CELL_MAP_B
		ld bc, 768 - 1
		ldir
#line 335
		xor a
		ld de, TILE_MAP
		ld (de), a
		inc de
		ld hl, TILE_MAP
		ld bc, 768 - 1
		ldir
#line 338
#line 339 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ret
		ENDP
		PROC
		LOCAL RENDER_LOOP, END_RENDER, RESTORE_STACK
RENDER_FRAME:
#line 350 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		halt
#line 354 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ld a, (CURRENT_DRAW_COUNT)
		cp 0
		jp z, END_RENDER
		ld hl, (CURRENT_DRAW_OPS)
		push hl
RENDER_LOOP:
		pop hl
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 368
		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl
#line 369
		inc hl
#line 373 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		push hl
		ld h, b
		ld l, c
#line 377
		ld (RESTORE_STACK + 1), sp
		ld sp, hl
		ex de, hl
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		inc h
		pop de
		ld (hl), e
		inc h
		ld (hl), d
RESTORE_STACK:
		ld sp, 0
		ld hl, CURRENT_DRAW_COUNT
		dec (hl)
		jp nz, RENDER_LOOP
		pop bc
END_RENDER:
		ld bc, (CURRENT_DRAW_OPS)
		ld de, (CURRENT_CLEAR_OPS)
		ld (CURRENT_DRAW_OPS), de
		ld (CURRENT_CLEAR_OPS), bc
		ld de, (CURRENT_DRAW_MAP)
		ld bc, (CURRENT_CLEAR_MAP)
		ld (CURRENT_DRAW_MAP), bc
		ld (CURRENT_CLEAR_MAP), de
		xor a
		push de
		ld (de), a
		inc de
		pop hl
		ld bc, 767
		ldir
		ld a, (CURRENT_CLEAR_COUNT)
		ld (CURRENT_DRAW_COUNT), a
		xor a
		ld (CURRENT_CLEAR_COUNT), a
		ld hl, DRAW_OPS_DATA
		ld (DRAW_OPS_DATA_INDEX), hl
#line 441
		ret
		ENDP
		PROC
CREATE_SPRITE_BUFFER:
		ld a, (SPRITE_COUNT)
		add a, a
		ld e, a
		ld d, 0
		ld hl, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 457
		push de
		ex de, hl
		add hl, bc
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 465
		ld hl, SPRITE_COUNT
		inc (hl)
		pop hl
		ret
		ENDP
		PROC
		LOCAL LOOP
CREATE_1x1_SPRITE:
		push hl
		ld bc, SPRITE_1x1_BUFFER_SIZE
		call CREATE_SPRITE_BUFFER
		ld de, 4
		add hl, de
		pop de
		push de
		ex de, hl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 492
		ld hl, 8
		add hl, de
		ex de, hl
		pop hl
		ld ixh, d
		ld ixl, e
		ld b, 8
LOOP:
		ld e, (hl)
		ld d, 0
		inc hl
		ex de, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 513
		ex de, hl
		ld (ix+0), d
		ld (ix+16), e
		inc ix
		djnz LOOP
		ld a, (SPRITE_COUNT)
		ret
		ENDP
		PROC
		LOCAL LOOP
CREATE_1x2_SPRITE:
		push hl
		ld bc, SPRITE_1x2_BUFFER_SIZE
		call CREATE_SPRITE_BUFFER
		ld de, 4
		add hl, de
		pop de
		push de
		ex de, hl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 544
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 545
		ld hl, 8
		add hl, de
		ex de, hl
		pop hl
		ld ixh, d
		ld ixl, e
		ld b, 16
LOOP:
		ld e, (hl)
		ld d, 0
		inc hl
		ex de, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 567
		ex de, hl
		ld (ix+0), d
		ld (ix+24), e
		inc ix
		djnz LOOP
		ld a, (SPRITE_COUNT)
		ret
		ENDP
		PROC
		LOCAL LOOP
CREATE_2x2_SPRITE:
		push hl
		ld bc, SPRITE_2x2_BUFFER_SIZE
		call CREATE_SPRITE_BUFFER
		ld de, 4
		add hl, de
		pop de
		push de
		ex de, hl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 598
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 599
		ex de, hl
		ld bc, 8
		add hl, bc
		ex de, hl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 609
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 610
		ld hl, 8
		add hl, de
		ex de, hl
		pop iy
		ld ixh, d
		ld ixl, e
		ld b, 16
LOOP:
		ld c, (iy+0)
		ld d, (iy+16)
		ld e, 0
		srl c
		rr d
		rr e
		srl c
		rr d
		rr e
		srl c
		rr d
		rr e
		srl c
		rr d
		rr e
#line 631
		ld (ix+0), c
		ld (ix+24), d
		ld (ix+48), e
		inc iy
		inc ix
		djnz LOOP
		ld a, (SPRITE_COUNT)
		ret
		ENDP
		PROC
		LOCAL EXISTING_OP, REAL_EXISTING_OP
CREATE_DRAW_OP:
		push hl
		push bc
		ld l, c
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 659
		ld c, b
		ld b, 0
		add hl, bc
		ld de, (CURRENT_DRAW_MAP)
		push hl
		add hl, de
		ld a, (hl)
		and a
		jp nz, EXISTING_OP
		ld a, (CURRENT_DRAW_COUNT)
		inc a
		ld (CURRENT_DRAW_COUNT), a
		ld (hl), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 687
		add hl, hl
		add hl, hl
#line 688
		add hl, de
#line 693 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		pop de
		pop bc
		push de
		ld a, c
		and %00011000
		or  %01000000
		ld d, a
		ld a, c
		and %00000111
		rla
		rla
		rla
		rla
		rla
		or b
		ld e, a
		ld ixh, d
		ld ixl, e
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 719
		ld de, (DRAW_OPS_DATA_INDEX)
		ld iyh, d
		ld iyl, e
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 726
		ld (hl), 1
#line 732 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ld l, 8
		ld h, 0
		add hl, de
		ld (DRAW_OPS_DATA_INDEX), hl
		pop bc
		ld hl, (CURRENT_CLEAR_MAP)
		add hl, bc
		ld a, (CURRENT_CLEAR_COUNT)
		inc a
		ld (CURRENT_CLEAR_COUNT), a
		ld (hl), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 758
		add hl, hl
		add hl, hl
#line 759
		add hl, de
#line 766 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_OPS)
		add hl, de
		ld d, ixh
		ld e, ixl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 774
		ex de, hl
		ld hl, TILE_MAP
		add hl, bc
		ld a, (hl)
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 786
		ld bc, (TILE_SET)
		add hl, bc
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 792
		ld (hl), 2
#line 803 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		pop hl
#line 865 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ld d, iyh
		ld e, iyl
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 869
#line 872 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ret
EXISTING_OP:
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 885
		add hl, hl
		add hl, hl
#line 886
		add hl, de
#line 891 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		ld c, (hl)
		inc hl
		ld b, (hl)
		inc hl
#line 897
		push hl
		push bc
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 902
		push de
		ld a, (hl)
		and 2
		jp z, REAL_EXISTING_OP
		ld (hl), 1
#line 919 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		pop af
#line 933 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		pop bc
		pop de
		pop hl
		push de
		push af
#line 942 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_MAP)
		add hl, de
		ld a, (CURRENT_CLEAR_COUNT)
		inc a
		ld (hl), a
		ld (CURRENT_CLEAR_COUNT), a
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 964
		add hl, hl
		add hl, hl
#line 965
		add hl, de
#line 970 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ld de, (CURRENT_CLEAR_OPS)
		add hl, de
		ld (hl), c
		inc hl
		ld (hl), b
		inc hl
#line 975
		pop de
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 980
		ld (hl), 2
#line 991 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		pop hl
#line 997 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ld de, (DRAW_OPS_DATA_INDEX)
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1003
		ld hl, 8
		add hl, de
		ld (DRAW_OPS_DATA_INDEX), hl
#line 1012 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		pop hl
#line 1068 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
		ldi
#line 1069
#line 1072 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		ret
REAL_EXISTING_OP:
		pop hl
		pop hl
		pop hl
		pop hl
		pop hl
#line 1085 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		pop hl
		ex de, hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
		inc de
		inc hl
		ld a, (de)
		or (hl)
		ld (hl),  a
#line 1091
		ret
		ENDP
		PROC
		LOCAL LOOP
DRAW_SPRITE_COLUMN:
		LOOP
		push hl
		push bc
		ex af, af'
		call CREATE_DRAW_OP
		pop bc
		pop hl
		inc c
		ld de, 8
		add hl, de
		ex af, af'
		dec a
		jr nz, LOOP
		ret
		ENDP
		PROC
		LOCAL TEST_SHIFTS, HORIZONTAL_SHIFT, VERTICAL_SHIFT
DRAW_1x1_SPRITE:
		dec a
		add a, a
		ld l, a
		ld h, 0
		ld de, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 1138
		ld a, b
		or c
		and 1
		jp nz, TEST_SHIFTS
		srl b
		srl c
		ld hl, 4
		add hl, de
		call CREATE_DRAW_OP
		ret
TEST_SHIFTS:
		ld a, c
		and 1
		jp z, HORIZONTAL_SHIFT
		ld a, b
		and 1
		jp z, VERTICAL_SHIFT
		srl b
		srl c
		ld hl, 16
		add hl, de
		push bc
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ld a,2
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
HORIZONTAL_SHIFT:
		srl b
		srl c
		ld hl, 20
		add hl, de
		push bc
		push hl
		call CREATE_DRAW_OP
		pop hl
		pop bc
		inc b
		ld de, 16
		add hl, de
		call CREATE_DRAW_OP
		ret
VERTICAL_SHIFT:
		srl b
		srl c
		ex de, hl
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
		ENDP
		PROC
		LOCAL TEST_SHIFTS, HORIZONTAL_SHIFT, VERTICAL_SHIFT
DRAW_1x2_SPRITE:
		dec a
		add a, a
		ld l, a
		ld h, 0
		ld de, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 1234
		ld a, b
		or c
		and 1
		jp nz, TEST_SHIFTS
		srl b
		srl c
		ld hl, 4
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
TEST_SHIFTS:
		ld a, c
		and 1
		jp z, HORIZONTAL_SHIFT
		ld a, b
		and 1
		jp z, VERTICAL_SHIFT
		srl b
		srl c
		ld hl, 24
		add hl, de
		push bc
		ld a, 3
		call DRAW_SPRITE_COLUMN
		ld a,3
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
HORIZONTAL_SHIFT:
		srl b
		srl c
		ld hl, 28
		add hl, de
		push bc
		ld a,2
		call DRAW_SPRITE_COLUMN
		pop bc
		inc b
		ld de, 8
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
VERTICAL_SHIFT:
		srl b
		srl c
		ex de, hl
		ld a, 3
		call DRAW_SPRITE_COLUMN
		ret
		ENDP
		PROC
DRAW_2x2_SPRITE:
		dec a
		add a, a
		ld l, a
		ld h, 0
		ld de, SPRITE_INDEX
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		inc hl
#line 1324
		ld a, b
		or c
		and 1
		jp nz, TEST_SHIFTS
		srl b
		srl c
		ld hl, 4
		add hl, de
		push bc
		ld a, 2
		call DRAW_SPRITE_COLUMN
		pop bc
		inc b
		ld de, 8
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
TEST_SHIFTS:
		ld a, c
		and 1
		jp z, HORIZONTAL_SHIFT
		ld a, b
		and 1
		jp z, VERTICAL_SHIFT
		srl b
		srl c
		ld hl, 48
		add hl, de
		push bc
		ld a, 3
		call DRAW_SPRITE_COLUMN
		ld a,3
		pop bc
		inc b
		push bc
		call DRAW_SPRITE_COLUMN
		ld a,3
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
HORIZONTAL_SHIFT:
		srl b
		srl c
		ld hl, 52
		add hl, de
		push bc
		ld a,2
		call DRAW_SPRITE_COLUMN
		pop bc
		inc b
		push bc
		ld de, 8
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		pop bc
		inc b
		ld de, 8
		add hl, de
		ld a, 2
		call DRAW_SPRITE_COLUMN
		ret
VERTICAL_SHIFT:
		srl b
		srl c
		ex de, hl
		ld a, 3
		push bc
		call DRAW_SPRITE_COLUMN
		ld a, 3
		pop bc
		inc b
		call DRAW_SPRITE_COLUMN
		ret
		ENDP
		PROC
SET_TILEMAP:
		ld de, TILE_SET
		ex de, hl
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1439
		ret
		ENDP
		PROC
SET_TILE:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1448
		add hl, de
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld (hl), a
		ld hl, $5800
		add hl, de
		ld (hl), c
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 1467
		ld bc, (TILE_SET)
		add hl, bc
		ld a, d
		rla
		rla
		rla
		or %01000000
		ld d, a
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		ret
		ENDP
		PROC
		LOCAL REAL_OP, NO_OP, END_SET
SET_TILE_CHECKED:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1520
		add hl, de
		push hl
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld (hl), a
		ld hl, $5800
		add hl, de
		ld (hl), c
		ld l, a
		ld h, 0
		add hl, hl
		add hl, hl
		add hl, hl
#line 1541
		ld bc, (TILE_SET)
		add hl, bc
		push hl
		ld a, d
		rla
		rla
		rla
		or %01000000
		ld d, a
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		inc hl
		inc d
		ld a, (hl)
		ld (de), a
		pop bc
		pop hl
		ld de, (CURRENT_DRAW_MAP)
		push bc
		add hl, de
		ld a, (hl)
		and a
		jp z, NO_OP
REAL_OP:
		dec a
		ld l, a
		ld h, 0
		ld d, h
		ld e, l
#line 1607
		add hl, hl
		add hl, hl
#line 1608
		add hl, de
		ld bc, (CURRENT_DRAW_OPS)
		add hl, bc
		inc hl
		inc hl
		pop de
		ld (hl), e
		inc hl
		ld (hl), d
		inc hl
#line 1620
		ld a, 2
		ld (hl), a
		jp END_SET
NO_OP:
		pop hl
END_SET:
		ret
		ENDP
		PROC
GET_TILE:
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
		add hl, hl
#line 1639
		add hl, de
		ex de, hl
		ld hl, TILE_MAP
		add hl, de
		ld a, (hl)
		ret
		ENDP
#line 1653 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
GSPRITES_LIB_END:
#line 1881 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
	call _InitGFXLib
	ld hl, _tileSet.__DATA__
	call _SetTileset
	ld hl, _sheep.__DATA__
	call _Create2x2Sprite
	ld hl, (_sheep.__DATA__) + (32)
	call _Create2x2Sprite
	ld hl, (_sheep.__DATA__) + (64)
	call _Create2x2Sprite
	ld hl, (_sheep.__DATA__) + (96)
	call _Create2x2Sprite
	ld hl, _wolf.__DATA__
	call _Create2x2Sprite
	ld hl, (_wolf.__DATA__) + (32)
	call _Create2x2Sprite
	ld hl, (_wolf.__DATA__) + (64)
	call _Create2x2Sprite
	ld hl, (_wolf.__DATA__) + (96)
	call _Create2x2Sprite
	ld hl, _girl.__DATA__
	call _Create2x2Sprite
	ld hl, (_girl.__DATA__) + (32)
	call _Create2x2Sprite
	ld hl, (_girl.__DATA__) + (64)
	call _Create2x2Sprite
	ld hl, (_girl.__DATA__) + (96)
	call _Create2x2Sprite
	ld hl, _boy.__DATA__
	call _Create2x2Sprite
	ld hl, (_boy.__DATA__) + (32)
	call _Create2x2Sprite
	ld hl, (_boy.__DATA__) + (64)
	call _Create2x2Sprite
	ld hl, (_boy.__DATA__) + (96)
	call _Create2x2Sprite
	ld hl, _endSprites.__DATA__
	call _Create2x2Sprite
	ld hl, (_endSprites.__DATA__) + (32)
	call _Create2x2Sprite
	ld hl, (_endSprites.__DATA__) + (64)
	call _Create2x2Sprite
	ld hl, (_endSprites.__DATA__) + (96)
	call _Create2x2Sprite
	ld hl, (_endSprites.__DATA__) + (128)
	call _Create2x2Sprite
__LABEL__gameLoop:
	call _InitMaryMusic
	ld a, 3
	push af
	call _ShowIntro
	call _PlayMusic
__LABEL2:
	ld hl, 32513
	call _MultiKeys
	or a
	jp nz, __LABEL3
	ld hl, 0
	ld (_counter), hl
	ld a, (_introFrm)
	or a
	jp nz, __LABEL4
	ld a, 1
	ld (_introFrm), a
	jp __LABEL5
__LABEL4:
	xor a
	ld (_introFrm), a
__LABEL5:
	ld a, 41
	push af
	ld a, 4
	push af
	ld a, (_introFrm)
	inc a
	call _Draw2x2Sprite
	ld a, 41
	push af
	ld a, 16
	push af
	ld a, (_introFrm)
	add a, 5
	call _Draw2x2Sprite
	ld a, 41
	push af
	ld a, 28
	push af
	ld a, (_introFrm)
	add a, 9
	call _Draw2x2Sprite
	ld a, 41
	push af
	ld a, 40
	push af
	ld a, (_introFrm)
	add a, 13
	call _Draw2x2Sprite
	call _RenderFrame
__LABEL6:
	ld de, 5
	ld hl, (_counter)
	or a
	sbc hl, de
	jp c, __LABEL6
	jp __LABEL2
__LABEL3:
	call _InitFastRnd
	xor a
	ld (_currentLevel), a
	ld (_nextLevel), a
	ld (_lose), a
	ld hl, 0
	ld (_score), hl
	ld a, 25
	push af
	push hl
	call _PrintScore
__LABEL8:
	ld a, (_lose)
	or a
	jp nz, __LABEL9
	ld hl, _currentLevel
	inc (hl)
	ld a, 14
	ld hl, (_currentLevel - 1)
	cp h
	jp nc, __LABEL11
	ld a, 1
	ld (_currentLevel), a
__LABEL11:
	ld a, (_currentLevel)
	push af
	call _InitLevel
__LABEL12:
	ld hl, 0
	ld (_counter), hl
	ld hl, 32513
	call _MultiKeys
	ld (_spaceDown), a
	call _CheckGate
	call _UpdateBoy
	call _UpdateGirl
	call _UpdateSheeps
	call _UpdateWolves
	call _RenderFrame
	call _CheckGameStatus
__LABEL15:
	ld de, 4
	ld hl, (_counter)
	or a
	sbc hl, de
	jp c, __LABEL15
	ld a, (_lose)
	sub 1
	sbc a, a
	push af
	ld a, (_nextLevel)
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL371
	ld a, h
__LABEL371:
	or a
	jp nz, __LABEL12
	ld a, (_lose)
	or a
	jp nz, __LABEL18
	call _StopMusic
	ld a, (_currentLevel)
	push af
	call _DoNextLevel
	call _InitMaryMusic
	call _PlayMusic
__LABEL18:
	xor a
	ld (_nextLevel), a
	jp __LABEL8
__LABEL9:
	call _StopMusic
	call _GameOver
	jp __LABEL__gameLoop
__END_PROGRAM:
	di
	ld hl, (__CALL_BACK__)
	ld sp, hl
	exx
	pop hl
	pop iy
	pop ix
	exx
	ei
	ret
__CALL_BACK__:
	DEFW 0
_PlayerHolder:
	push ix
	ld ix, 0
	add ix, sp
#line 6 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/MusicPlayer.zxbas"
		jp SKIP_MUSIC
		_enableMusic db 0
#line 1 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/mainmusic.z80asm"
		MARYLAMB_START
		PLY_AKG_OPCODE_ADD_HL_BC_MSB db 65
		PLY_AKG_FULL_INIT_CODE
		PLY_AKG_OFFSET1B
		PLY_AKG_USE_HOOKS
		PLY_AKG_STOP_SOUNDS db 84
		PLY_AKG_BITFORSOUND
		PLY_AKG_OFFSET2B db 50
		db 48
		PLY_AKG_BITFORNOISE equ $+1
		dw MARYLAMB_ARPEGGIOTABLE
		dw MARYLAMB_ARPEGGIOTABLE
		PLY_AKG_OPCODE_ADD_HL_BC_LSB equ $+1
		dw MARYLAMB_ARPEGGIOTABLE
		dw MARYLAMB_EFFECTBLOCKTABLE
		dw MARYLAMB_SUBSONG0_START
		MARYLAMB_ARPEGGIOTABLE
		MARYLAMB_PITCHTABLE
		MARYLAMB_INSTRUMENTTABLE dw MARYLAMB_EMPTYINSTRUMENT
		dw MARYLAMB_INSTRUMENT1
		dw MARYLAMB_INSTRUMENT2
		dw MARYLAMB_INSTRUMENT3
		dw MARYLAMB_INSTRUMENT4
		dw MARYLAMB_INSTRUMENT5
		dw MARYLAMB_INSTRUMENT6
		MARYLAMB_EMPTYINSTRUMENT db 0
		MARYLAMB_EMPTYINSTRUMENT_LOOP db 0
		db 6
		MARYLAMB_INSTRUMENT1 db 1
		db 248
		db 1
		db 232
		PLY_AKG_OPCODE_INC_HL db 1
		db 216
		db 1
		db 192
		db 1
		db 168
		db 1
		db 6
		MARYLAMB_INSTRUMENT2
		PLY_AKG_OPCODE_DEC_HL db 1
		db 248
		db 1
		db 113
		db 34
		db 246
		db 255
		db 97
		db 35
		db 226
		db 255
		db 216
		PLY_AKG_OPCODE_SCF db 1
		db 80
		db 208
		db 1
		db 200
		db 1
		db 192
		db 1
		db 184
		db 1
		db 176
		PLY_AKG_OPCODE_SBC_HL_BC_LSB db 1
		db 168
		db 1
		db 160
		db 1
		db 144
		db 1
		db 136
		db 1
		db 6
		MARYLAMB_INSTRUMENT3 db 1
		db 248
		db 1
		db 113
		db 32
		db 150
		db 0
		db 105
		db 32
		db 44
		db 1
		db 97
		db 32
		db 144
		db 1
		db 89
		db 32
		db 244
		db 1
		db 81
		db 32
		db 88
		db 2
		db 6
		MARYLAMB_INSTRUMENT4 db 1
		db 121
		db 32
		db 244
		db 1
		db 113
		db 32
		db 38
		db 2
		db 105
		db 32
		db 88
		db 2
		db 97
		db 32
		db 138
		db 2
		db 89
		db 32
		db 188
		db 2
		db 81
		db 32
		db 238
		db 2
		db 73
		db 32
		db 32
		db 3
		db 65
		db 32
		db 82
		db 3
		db 57
		db 32
		db 132
		db 3
		db 6
		MARYLAMB_INSTRUMENT5 db 1
		db 249
		db 113
		db 32
		db 50
		db 0
		db 105
		db 32
		db 100
		db 0
		db 97
		db 32
		db 150
		db 0
		db 89
		db 32
		db 200
		db 0
		db 81
		db 32
		db 250
		db 0
		db 73
		db 32
		db 44
		db 1
		db 65
		db 32
		db 94
		db 1
		db 57
		db 32
		db 144
		db 1
		db 6
		MARYLAMB_INSTRUMENT6 db 5
		db 249
		db 241
		db 233
		db 225
		db 217
		db 217
		db 217
		db 217
		db 217
		PLY_AKG_OPCODE_OR_A db 217
		db 217
		db 217
		db 201
		db 193
		db 185
		db 177
		db 169
		db 161
		db 153
		db 145
		db 137
		db 6
		MARYLAMB_EFFECTBLOCKTABLE dw MARYLAMB_EFFECTBLOCK_P4P1
		PLY_AKG_OPCODE_ADD_A_IMMEDIATE dw MARYLAMB_EFFECTBLOCK_P4P2
		dw MARYLAMB_EFFECTBLOCK_P4P0
		dw MARYLAMB_EFFECTBLOCK_P4P4
		dw MARYLAMB_EFFECTBLOCK_P4P3
		dw MARYLAMB_EFFECTBLOCK_P4P7
		dw MARYLAMB_EFFECTBLOCK_P4P8
		MARYLAMB_EFFECTBLOCK_P4P0 db 4
		db 0
		MARYLAMB_EFFECTBLOCK_P4P1 db 4
		db 1
		MARYLAMB_EFFECTBLOCK_P4P2
		PLY_AKG_OPCODE_SUB_IMMEDIATE db 4
		db 2
		MARYLAMB_EFFECTBLOCK_P4P3 db 4
		db 3
		MARYLAMB_EFFECTBLOCK_P4P4 db 4
		db 4
		MARYLAMB_EFFECTBLOCK_P4P7 db 4
		db 7
		MARYLAMB_EFFECTBLOCK_P4P8 db 4
		db 8
		MARYLAMB_SUBSONG0_START db 2
		db 0
		db 1
		db 0
		db 21
		db 6
		db 33
		MARYLAMB_SUBSONG0_LINKER
		MARYLAMB_SUBSONG0_LINKER_LOOP dw MARYLAMB_SUBSONG0_TRACK0
		dw MARYLAMB_SUBSONG0_TRACK1
		dw MARYLAMB_SUBSONG0_TRACK2
		PLY_AKG_OPCODE_SBC_HL_BC_MSB dw MARYLAMB_SUBSONG0_LINKERBLOCK0
		dw MARYLAMB_SUBSONG0_TRACK3
		dw MARYLAMB_SUBSONG0_TRACK4
		dw MARYLAMB_SUBSONG0_TRACK5
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK3
		dw MARYLAMB_SUBSONG0_TRACK6
		dw MARYLAMB_SUBSONG0_TRACK7
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK8
		dw MARYLAMB_SUBSONG0_TRACK9
		dw MARYLAMB_SUBSONG0_TRACK10
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK11
		dw MARYLAMB_SUBSONG0_TRACK12
		dw MARYLAMB_SUBSONG0_TRACK13
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK11
		dw MARYLAMB_SUBSONG0_TRACK14
		dw MARYLAMB_SUBSONG0_TRACK15
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK16
		dw MARYLAMB_SUBSONG0_TRACK17
		dw MARYLAMB_SUBSONG0_TRACK18
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK19
		dw MARYLAMB_SUBSONG0_TRACK20
		dw MARYLAMB_SUBSONG0_TRACK21
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK22
		dw MARYLAMB_SUBSONG0_TRACK23
		dw MARYLAMB_SUBSONG0_TRACK24
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK11
		dw MARYLAMB_SUBSONG0_TRACK25
		dw MARYLAMB_SUBSONG0_TRACK21
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK26
		dw MARYLAMB_SUBSONG0_TRACK27
		dw MARYLAMB_SUBSONG0_TRACK28
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK11
		dw MARYLAMB_SUBSONG0_TRACK29
		dw MARYLAMB_SUBSONG0_TRACK30
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK11
		dw MARYLAMB_SUBSONG0_TRACK31
		dw MARYLAMB_SUBSONG0_TRACK32
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK11
		dw MARYLAMB_SUBSONG0_TRACK33
		dw MARYLAMB_SUBSONG0_TRACK34
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK11
		dw MARYLAMB_SUBSONG0_TRACK35
		dw MARYLAMB_SUBSONG0_TRACK36
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK11
		dw MARYLAMB_SUBSONG0_TRACK37
		dw MARYLAMB_SUBSONG0_TRACK38
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK39
		dw MARYLAMB_SUBSONG0_TRACK40
		dw MARYLAMB_SUBSONG0_TRACK41
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK11
		dw MARYLAMB_SUBSONG0_TRACK42
		dw MARYLAMB_SUBSONG0_TRACK43
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK44
		dw MARYLAMB_SUBSONG0_TRACK45
		dw MARYLAMB_SUBSONG0_TRACK46
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK11
		dw MARYLAMB_SUBSONG0_TRACK4
		dw MARYLAMB_SUBSONG0_TRACK5
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK11
		dw MARYLAMB_SUBSONG0_TRACK6
		dw MARYLAMB_SUBSONG0_TRACK7
		dw MARYLAMB_SUBSONG0_LINKERBLOCK1
		dw MARYLAMB_SUBSONG0_TRACK47
		dw MARYLAMB_SUBSONG0_TRACK9
		dw MARYLAMB_SUBSONG0_TRACK48
		dw MARYLAMB_SUBSONG0_LINKERBLOCK2
		db 0
		db 0
		dw MARYLAMB_SUBSONG0_LINKER
		MARYLAMB_SUBSONG0_LINKERBLOCK0 db 64
		db 0
		db 0
		db 0
		dw MARYLAMB_SUBSONG0_SPEEDTRACK0
		dw MARYLAMB_SUBSONG0_EVENTTRACK0
		MARYLAMB_SUBSONG0_LINKERBLOCK1 db 64
		db 0
		db 0
		db 0
		dw MARYLAMB_SUBSONG0_SPEEDTRACK1
		dw MARYLAMB_SUBSONG0_EVENTTRACK0
		MARYLAMB_SUBSONG0_LINKERBLOCK2 db 32
		db 0
		db 0
		db 0
		dw MARYLAMB_SUBSONG0_SPEEDTRACK1
		dw MARYLAMB_SUBSONG0_EVENTTRACK0
		MARYLAMB_SUBSONG0_TRACK0 db 61
		db 15
		db 207
		db 1
		db 2
		db 61
		db 14
		db 79
		db 0
		db 62
		db 79
		db 4
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 143
		db 1
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK1 db 61
		db 31
		db 199
		db 6
		db 2
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK2 db 61
		db 17
		db 216
		db 6
		db 0
		db 60
		db 26
		db 60
		db 29
		db 60
		db 24
		db 60
		db 26
		db 60
		db 24
		db 60
		db 22
		db 60
		db 31
		db 126
		db 31
		db 62
		db 31
		db 62
		db 31
		db 126
		db 31
		db 60
		db 19
		db 60
		db 19
		db 60
		db 31
		db 126
		db 24
		db 26
		db 26
		db 26
		db 24
		db 60
		db 22
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK3 db 143
		db 1
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK4 db 135
		db 6
		db 254
		db 1
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 126
		db 63
		db 32
		db 62
		db 63
		db 28
		db 2
		db 60
		db 2
		db 60
		db 7
		db 60
		db 2
		db 60
		db 0
		db 126
		db 0
		db 62
		db 0
		db 63
		db 28
		db 60
		db 63
		db 28
		db 60
		db 63
		db 31
		db 60
		db 63
		db 28
		db 60
		db 0
		db 60
		db 0
		db 60
		db 5
		db 62
		db 5
		db 62
		db 4
		db 60
		db 5
		db 60
		db 6
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK5 db 159
		db 6
		db 126
		db 31
		db 62
		db 31
		db 62
		db 31
		db 126
		db 31
		db 60
		db 31
		db 31
		db 26
		db 27
		db 31
		db 60
		db 31
		db 31
		db 34
		db 60
		db 34
		db 60
		db 36
		db 37
		db 36
		db 34
		db 24
		db 126
		db 31
		db 62
		db 36
		db 62
		db 31
		db 126
		db 36
		db 126
		db 24
		db 60
		db 26
		db 60
		db 29
		db 60
		db 24
		db 60
		db 26
		db 60
		db 24
		db 60
		db 22
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK6 db 135
		db 6
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 7
		db 60
		db 2
		db 126
		db 2
		db 60
		db 2
		db 60
		db 9
		db 60
		db 9
		db 60
		db 12
		db 60
		db 12
		db 60
		db 0
		db 126
		db 0
		db 62
		db 0
		db 7
		db 60
		db 7
		db 60
		db 12
		db 60
		db 10
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK7 db 159
		db 6
		db 126
		db 31
		db 62
		db 31
		db 62
		db 31
		db 126
		db 31
		db 60
		db 19
		db 60
		db 19
		db 60
		db 41
		db 41
		db 41
		db 41
		db 24
		db 26
		db 26
		db 26
		db 24
		db 60
		db 25
		db 60
		db 26
		db 126
		db 36
		db 62
		db 30
		db 36
		db 60
		db 21
		db 60
		db 21
		db 60
		db 24
		db 126
		db 46
		db 60
		db 43
		db 41
		db 38
		db 36
		db 38
		db 41
		db 38
		db 60
		db 36
		db 34
		db 31
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK8 db 143
		db 1
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 207
		db 3
		db 1
		db 60
		db 207
		db 1
		db 2
		db 79
		db 1
		db 61
		db 9
		db 79
		db 0
		db 126
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK9 db 135
		db 6
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 61
		db 14
		db 7
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK10 db 147
		db 6
		db 126
		db 31
		db 62
		db 31
		db 62
		db 34
		db 60
		db 19
		db 60
		db 19
		db 60
		db 29
		db 60
		db 24
		db 60
		db 26
		db 60
		db 29
		db 60
		db 24
		db 60
		db 26
		db 60
		db 24
		db 60
		db 22
		db 60
		db 31
		db 126
		db 31
		db 62
		db 31
		db 62
		db 31
		db 126
		db 31
		db 60
		db 19
		db 60
		db 19
		db 60
		db 31
		db 126
		db 24
		db 26
		db 26
		db 26
		db 24
		db 60
		db 22
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK11 db 143
		db 1
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 143
		db 1
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 143
		db 1
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK12 db 135
		db 6
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 60
		db 7
		db 60
		db 11
		db 60
		db 11
		db 11
		db 12
		db 12
		db 12
		db 60
		db 13
		db 60
		db 14
		db 60
		db 12
		db 60
		db 12
		db 62
		db 12
		db 62
		db 7
		db 60
		db 7
		db 60
		db 10
		db 60
		db 11
		db 60
		db 12
		db 60
		db 0
		db 60
		db 4
		db 60
		db 0
		db 60
		db 5
		db 60
		db 0
		db 60
		db 6
		db 60
		db 0
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK13 db 159
		db 6
		db 126
		db 31
		db 62
		db 31
		db 62
		db 31
		db 126
		db 31
		db 60
		db 19
		db 60
		db 19
		db 60
		db 31
		db 60
		db 41
		db 41
		db 24
		db 26
		db 26
		db 26
		db 24
		db 60
		db 22
		db 60
		db 24
		db 126
		db 31
		db 62
		db 36
		db 62
		db 31
		db 126
		db 36
		db 126
		db 24
		db 60
		db 26
		db 60
		db 29
		db 60
		db 24
		db 60
		db 26
		db 60
		db 24
		db 60
		db 22
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK14 db 135
		db 6
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 7
		db 60
		db 2
		db 126
		db 2
		db 62
		db 0
		db 9
		db 60
		db 9
		db 60
		db 12
		db 13
		db 14
		db 60
		db 0
		db 126
		db 0
		db 62
		db 0
		db 7
		db 60
		db 7
		db 60
		db 12
		db 60
		db 10
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK15 db 159
		db 6
		db 126
		db 31
		db 62
		db 31
		db 62
		db 31
		db 126
		db 31
		db 60
		db 19
		db 60
		db 43
		db 126
		db 41
		db 126
		db 43
		db 60
		db 22
		db 60
		db 25
		db 60
		db 26
		db 126
		db 36
		db 62
		db 30
		db 36
		db 60
		db 21
		db 60
		db 21
		db 60
		db 24
		db 126
		db 46
		db 60
		db 43
		db 41
		db 38
		db 36
		db 38
		db 60
		db 43
		db 60
		db 36
		db 34
		db 31
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK16 db 143
		db 1
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 207
		db 3
		db 1
		db 60
		db 207
		db 1
		db 0
		db 79
		db 5
		db 61
		db 9
		db 79
		db 0
		db 126
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 143
		db 1
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK17 db 135
		db 6
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 61
		db 14
		db 0
		db 126
		db 0
		db 62
		db 0
		db 63
		db 28
		db 60
		db 63
		db 28
		db 60
		db 63
		db 31
		db 60
		db 63
		db 28
		db 60
		db 0
		db 60
		db 0
		db 60
		db 4
		db 60
		db 4
		db 4
		db 5
		db 60
		db 4
		db 60
		db 5
		db 60
		db 6
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK18 db 147
		db 6
		db 126
		db 31
		db 62
		db 31
		db 62
		db 34
		db 60
		db 19
		db 60
		db 19
		db 60
		db 95
		db 1
		db 61
		db 14
		db 24
		db 60
		db 31
		db 60
		db 31
		db 62
		db 31
		db 62
		db 31
		db 126
		db 31
		db 126
		db 31
		db 60
		db 31
		db 62
		db 31
		db 62
		db 36
		db 126
		db 19
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK19 db 143
		db 1
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 1
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 143
		db 1
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 143
		db 1
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK20 db 135
		db 6
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 60
		db 63
		db 28
		db 60
		db 63
		db 32
		db 60
		db 63
		db 28
		db 60
		db 0
		db 60
		db 63
		db 28
		db 60
		db 1
		db 60
		db 63
		db 28
		db 60
		db 2
		db 60
		db 2
		db 60
		db 6
		db 62
		db 6
		db 7
		db 60
		db 8
		db 60
		db 9
		db 60
		db 63
		db 28
		db 60
		db 0
		db 60
		db 0
		db 60
		db 4
		db 4
		db 60
		db 4
		db 5
		db 5
		db 4
		db 60
		db 5
		db 60
		db 6
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK21 db 159
		db 6
		db 126
		db 31
		db 62
		db 31
		db 62
		db 31
		db 126
		db 41
		db 60
		db 19
		db 60
		db 19
		db 60
		db 31
		db 62
		db 31
		db 62
		db 31
		db 126
		db 31
		db 126
		db 26
		db 60
		db 30
		db 62
		db 30
		db 30
		db 60
		db 30
		db 60
		db 30
		db 60
		db 21
		db 60
		db 24
		db 126
		db 31
		db 62
		db 36
		db 62
		db 36
		db 60
		db 22
		db 60
		db 31
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK22 db 143
		db 1
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 1
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 207
		db 3
		db 1
		db 60
		db 207
		db 1
		db 0
		db 79
		db 1
		db 61
		db 9
		db 79
		db 0
		db 126
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 143
		db 1
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK23 db 135
		db 6
		db 126
		db 7
		db 62
		db 7
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 61
		db 14
		db 0
		db 62
		db 63
		db 28
		db 0
		db 62
		db 0
		db 63
		db 28
		db 63
		db 28
		db 63
		db 28
		db 60
		db 63
		db 31
		db 60
		db 63
		db 28
		db 60
		db 0
		db 60
		db 0
		db 60
		db 4
		db 62
		db 4
		db 62
		db 4
		db 60
		db 5
		db 60
		db 6
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK24 db 147
		db 6
		db 126
		db 31
		db 62
		db 31
		db 62
		db 31
		db 254
		db 31
		db 61
		db 14
		db 24
		db 60
		db 31
		db 60
		db 31
		db 62
		db 31
		db 62
		db 31
		db 126
		db 31
		db 126
		db 31
		db 60
		db 31
		db 62
		db 31
		db 62
		db 36
		db 126
		db 19
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK25 db 135
		db 6
		db 60
		db 7
		db 60
		db 7
		db 62
		db 7
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 60
		db 7
		db 60
		db 11
		db 62
		db 5
		db 12
		db 12
		db 11
		db 60
		db 12
		db 60
		db 13
		db 60
		db 14
		db 62
		db 14
		db 9
		db 62
		db 2
		db 2
		db 60
		db 2
		db 60
		db 9
		db 60
		db 10
		db 60
		db 12
		db 62
		db 12
		db 7
		db 62
		db 7
		db 0
		db 60
		db 4
		db 60
		db 5
		db 60
		db 4
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK26 db 143
		db 1
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 207
		db 3
		db 1
		db 60
		db 207
		db 1
		db 0
		db 79
		db 1
		db 61
		db 9
		db 207
		db 2
		db 2
		db 60
		db 143
		db 4
		db 60
		db 143
		db 5
		db 60
		db 207
		db 1
		db 1
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 143
		db 1
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK27 db 135
		db 6
		db 126
		db 7
		db 62
		db 7
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 61
		db 14
		db 12
		db 62
		db 5
		db 12
		db 60
		db 5
		db 6
		db 7
		db 60
		db 7
		db 60
		db 10
		db 60
		db 7
		db 60
		db 12
		db 60
		db 0
		db 60
		db 4
		db 62
		db 0
		db 5
		db 0
		db 4
		db 60
		db 5
		db 60
		db 6
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK28 db 147
		db 6
		db 126
		db 31
		db 62
		db 31
		db 62
		db 31
		db 254
		db 95
		db 0
		db 62
		db 53
		db 55
		db 61
		db 9
		db 48
		db 50
		db 60
		db 48
		db 46
		db 43
		db 39
		db 61
		db 11
		db 55
		db 60
		db 55
		db 60
		db 55
		db 60
		db 55
		db 60
		db 46
		db 60
		db 55
		db 60
		db 55
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK29 db 135
		db 6
		db 62
		db 0
		db 7
		db 62
		db 0
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 60
		db 63
		db 28
		db 60
		db 63
		db 32
		db 60
		db 63
		db 28
		db 63
		db 28
		db 0
		db 60
		db 63
		db 28
		db 60
		db 1
		db 60
		db 63
		db 28
		db 60
		db 2
		db 60
		db 2
		db 60
		db 6
		db 62
		db 6
		db 7
		db 7
		db 7
		db 60
		db 8
		db 60
		db 9
		db 60
		db 0
		db 60
		db 0
		db 60
		db 4
		db 62
		db 4
		db 5
		db 0
		db 4
		db 60
		db 5
		db 60
		db 6
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK30 db 178
		db 6
		db 126
		db 43
		db 60
		db 41
		db 60
		db 43
		db 60
		db 41
		db 60
		db 43
		db 60
		db 50
		db 60
		db 43
		db 60
		db 41
		db 126
		db 41
		db 60
		db 43
		db 60
		db 43
		db 60
		db 46
		db 60
		db 48
		db 50
		db 50
		db 60
		db 50
		db 126
		db 50
		db 60
		db 53
		db 60
		db 54
		db 60
		db 55
		db 60
		db 50
		db 126
		db 50
		db 60
		db 53
		db 55
		db 60
		db 63
		db 91
		db 55
		db 62
		db 55
		db 48
		db 60
		db 48
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK31 db 135
		db 6
		db 60
		db 63
		db 28
		db 60
		db 63
		db 32
		db 60
		db 63
		db 28
		db 60
		db 0
		db 60
		db 63
		db 28
		db 60
		db 2
		db 60
		db 2
		db 60
		db 7
		db 7
		db 7
		db 60
		db 5
		db 62
		db 0
		db 4
		db 0
		db 4
		db 60
		db 4
		db 60
		db 4
		db 63
		db 28
		db 0
		db 60
		db 0
		db 60
		db 0
		db 62
		db 63
		db 28
		db 63
		db 28
		db 63
		db 28
		db 63
		db 28
		db 60
		db 63
		db 31
		db 60
		db 63
		db 28
		db 60
		db 0
		db 60
		db 0
		db 60
		db 4
		db 62
		db 4
		db 5
		db 60
		db 4
		db 60
		db 5
		db 60
		db 6
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK32 db 174
		db 6
		db 62
		db 50
		db 43
		db 41
		db 60
		db 38
		db 41
		db 60
		db 43
		db 60
		db 46
		db 60
		db 48
		db 50
		db 50
		db 60
		db 50
		db 60
		db 53
		db 60
		db 54
		db 60
		db 55
		db 60
		db 50
		db 60
		db 53
		db 60
		db 55
		db 60
		db 63
		db 91
		db 60
		db 63
		db 93
		db 63
		db 94
		db 63
		db 95
		db 60
		db 63
		db 91
		db 63
		db 92
		db 63
		db 93
		db 63
		db 92
		db 55
		db 126
		db 55
		db 60
		db 63
		db 91
		db 63
		db 93
		db 63
		db 93
		db 63
		db 95
		db 63
		db 93
		db 63
		db 91
		db 60
		db 55
		db 53
		db 50
		db 60
		db 49
		db 48
		db 49
		db 48
		db 46
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK33 db 135
		db 6
		db 62
		db 7
		db 7
		db 60
		db 7
		db 63
		db 28
		db 7
		db 60
		db 7
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 60
		db 7
		db 60
		db 11
		db 62
		db 11
		db 12
		db 5
		db 11
		db 60
		db 12
		db 60
		db 13
		db 60
		db 14
		db 62
		db 5
		db 14
		db 62
		db 12
		db 9
		db 60
		db 9
		db 60
		db 12
		db 13
		db 14
		db 60
		db 12
		db 126
		db 12
		db 62
		db 12
		db 7
		db 60
		db 7
		db 60
		db 10
		db 11
		db 12
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK34 db 174
		db 6
		db 126
		db 43
		db 41
		db 60
		db 38
		db 41
		db 60
		db 43
		db 60
		db 46
		db 60
		db 48
		db 50
		db 50
		db 55
		db 60
		db 50
		db 53
		db 50
		db 60
		db 63
		db 90
		db 55
		db 63
		db 90
		db 55
		db 53
		db 55
		db 50
		db 60
		db 55
		db 63
		db 91
		db 55
		db 60
		db 50
		db 50
		db 50
		db 60
		db 55
		db 53
		db 49
		db 60
		db 53
		db 48
		db 46
		db 60
		db 43
		db 50
		db 48
		db 60
		db 49
		db 48
		db 46
		db 60
		db 43
		db 49
		db 43
		db 60
		db 48
		db 46
		db 43
		db 41
		db 38
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK35 db 135
		db 6
		db 126
		db 7
		db 60
		db 7
		db 63
		db 28
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 60
		db 63
		db 28
		db 60
		db 63
		db 32
		db 60
		db 63
		db 28
		db 60
		db 2
		db 60
		db 2
		db 60
		db 7
		db 5
		db 2
		db 60
		db 0
		db 126
		db 0
		db 62
		db 63
		db 28
		db 63
		db 28
		db 60
		db 63
		db 28
		db 60
		db 63
		db 31
		db 60
		db 63
		db 28
		db 60
		db 0
		db 60
		db 0
		db 60
		db 4
		db 62
		db 4
		db 5
		db 60
		db 4
		db 60
		db 5
		db 60
		db 6
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK36 db 169
		db 6
		db 43
		db 62
		db 50
		db 43
		db 60
		db 48
		db 50
		db 43
		db 60
		db 48
		db 50
		db 43
		db 60
		db 50
		db 52
		db 50
		db 60
		db 52
		db 50
		db 43
		db 60
		db 50
		db 50
		db 60
		db 50
		db 60
		db 55
		db 60
		db 50
		db 53
		db 55
		db 254
		db 53
		db 54
		db 55
		db 53
		db 50
		db 126
		db 50
		db 60
		db 53
		db 60
		db 63
		db 89
		db 53
		db 55
		db 60
		db 53
		db 53
		db 55
		db 60
		db 53
		db 60
		db 55
		db 53
		db 55
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK37 db 135
		db 6
		db 62
		db 7
		db 7
		db 62
		db 2
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 63
		db 28
		db 62
		db 63
		db 32
		db 62
		db 63
		db 28
		db 0
		db 60
		db 63
		db 28
		db 60
		db 1
		db 60
		db 63
		db 28
		db 60
		db 2
		db 60
		db 2
		db 60
		db 9
		db 60
		db 9
		db 60
		db 12
		db 60
		db 13
		db 60
		db 14
		db 60
		db 63
		db 28
		db 60
		db 0
		db 60
		db 0
		db 60
		db 4
		db 60
		db 4
		db 60
		db 10
		db 60
		db 11
		db 60
		db 12
		db 60
		db 11
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK38 db 61
		db 7
		db 181
		db 6
		db 50
		db 48
		db 50
		db 48
		db 46
		db 60
		db 43
		db 46
		db 48
		db 60
		db 50
		db 46
		db 126
		db 46
		db 48
		db 50
		db 60
		db 50
		db 55
		db 60
		db 50
		db 63
		db 91
		db 55
		db 53
		db 55
		db 55
		db 55
		db 60
		db 50
		db 53
		db 50
		db 50
		db 60
		db 48
		db 46
		db 43
		db 41
		db 50
		db 60
		db 46
		db 60
		db 43
		db 41
		db 38
		db 41
		db 60
		db 41
		db 38
		db 36
		db 34
		db 60
		db 41
		db 43
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK39 db 143
		db 1
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 2
		db 60
		db 207
		db 3
		db 1
		db 60
		db 207
		db 1
		db 2
		db 79
		db 0
		db 61
		db 9
		db 79
		db 1
		db 126
		db 79
		db 2
		db 62
		db 79
		db 6
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 143
		db 1
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK40 db 135
		db 6
		db 62
		db 0
		db 7
		db 62
		db 0
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 61
		db 14
		db 0
		db 126
		db 0
		db 62
		db 63
		db 28
		db 63
		db 28
		db 60
		db 63
		db 28
		db 60
		db 63
		db 31
		db 60
		db 63
		db 28
		db 60
		db 0
		db 63
		db 28
		db 0
		db 60
		db 4
		db 62
		db 4
		db 5
		db 0
		db 4
		db 60
		db 5
		db 60
		db 5
		db 6
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK41 db 159
		db 6
		db 126
		db 41
		db 62
		db 41
		db 51
		db 60
		db 50
		db 60
		db 43
		db 60
		db 41
		db 61
		db 16
		db 24
		db 60
		db 31
		db 60
		db 31
		db 62
		db 31
		db 62
		db 31
		db 126
		db 46
		db 126
		db 31
		db 60
		db 31
		db 62
		db 31
		db 62
		db 36
		db 126
		db 19
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK42 db 135
		db 6
		db 60
		db 7
		db 60
		db 11
		db 62
		db 11
		db 12
		db 12
		db 12
		db 60
		db 13
		db 60
		db 14
		db 60
		db 7
		db 60
		db 7
		db 60
		db 11
		db 62
		db 11
		db 12
		db 5
		db 11
		db 60
		db 12
		db 60
		db 13
		db 60
		db 14
		db 60
		db 14
		db 5
		db 14
		db 62
		db 14
		db 9
		db 60
		db 9
		db 60
		db 12
		db 13
		db 14
		db 60
		db 12
		db 62
		db 5
		db 12
		db 62
		db 12
		db 7
		db 60
		db 7
		db 60
		db 10
		db 11
		db 12
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK43 db 159
		db 6
		db 126
		db 35
		db 62
		db 31
		db 62
		db 31
		db 126
		db 35
		db 60
		db 19
		db 60
		db 19
		db 60
		db 31
		db 62
		db 41
		db 62
		db 31
		db 126
		db 31
		db 126
		db 26
		db 60
		db 36
		db 62
		db 30
		db 36
		db 60
		db 45
		db 60
		db 36
		db 60
		db 21
		db 60
		db 24
		db 60
		db 36
		db 60
		db 31
		db 62
		db 36
		db 62
		db 36
		db 60
		db 22
		db 60
		db 31
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK44 db 143
		db 1
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 207
		db 3
		db 1
		db 60
		db 207
		db 1
		db 0
		db 79
		db 1
		db 61
		db 9
		db 79
		db 0
		db 126
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 2
		db 0
		db 60
		db 143
		db 1
		db 60
		db 15
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 60
		db 143
		db 3
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 0
		db 60
		db 15
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK45 db 135
		db 6
		db 62
		db 0
		db 7
		db 62
		db 0
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 61
		db 14
		db 7
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 60
		db 7
		db 126
		db 7
		db 60
		db 7
		db 60
		db 2
		db 60
		db 2
		db 60
		db 5
		db 60
		db 6
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK46 db 147
		db 6
		db 126
		db 31
		db 62
		db 31
		db 62
		db 31
		db 254
		db 29
		db 60
		db 24
		db 60
		db 26
		db 60
		db 29
		db 60
		db 24
		db 60
		db 26
		db 60
		db 24
		db 60
		db 22
		db 60
		db 31
		db 126
		db 31
		db 62
		db 31
		db 62
		db 31
		db 126
		db 31
		db 60
		db 19
		db 60
		db 19
		db 60
		db 31
		db 126
		db 24
		db 26
		db 26
		db 26
		db 24
		db 60
		db 22
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK47 db 143
		db 1
		db 60
		db 15
		db 60
		db 207
		db 2
		db 2
		db 60
		db 207
		db 1
		db 0
		db 207
		db 3
		db 3
		db 79
		db 0
		db 60
		db 79
		db 1
		db 60
		db 207
		db 1
		db 2
		db 79
		db 0
		db 207
		db 3
		db 1
		db 60
		db 207
		db 1
		db 2
		db 79
		db 1
		db 61
		db 127
		MARYLAMB_SUBSONG0_TRACK48 db 147
		db 6
		db 126
		db 31
		db 62
		db 31
		db 62
		db 34
		db 60
		db 19
		db 60
		db 19
		db 60
		db 31
		db 61
		db 127
		MARYLAMB_SUBSONG0_SPEEDTRACK0 db 12
		db 253
		MARYLAMB_SUBSONG0_SPEEDTRACK1 db 255
		MARYLAMB_SUBSONG0_EVENTTRACK0 db 255
		NEXTLEVEL_START db 65
		db 84
		db 50
		db 48
		dw NEXTLEVEL_ARPEGGIOTABLE
		dw NEXTLEVEL_ARPEGGIOTABLE
		dw NEXTLEVEL_ARPEGGIOTABLE
		dw NEXTLEVEL_EFFECTBLOCKTABLE
		dw NEXTLEVEL_SUBSONG0_START
		NEXTLEVEL_ARPEGGIOTABLE
		NEXTLEVEL_PITCHTABLE
		NEXTLEVEL_INSTRUMENTTABLE dw NEXTLEVEL_EMPTYINSTRUMENT
		dw NEXTLEVEL_INSTRUMENT1
		dw NEXTLEVEL_INSTRUMENT2
		NEXTLEVEL_EMPTYINSTRUMENT db 0
		NEXTLEVEL_EMPTYINSTRUMENT_LOOP db 0
		db 6
		NEXTLEVEL_INSTRUMENT1 db 1
		db 249
		db 241
		db 233
		db 225
		db 217
		db 209
		db 201
		db 193
		db 185
		db 177
		db 169
		db 161
		db 153
		db 145
		db 137
		db 6
		NEXTLEVEL_INSTRUMENT2 db 5
		db 249
		db 241
		db 233
		db 225
		db 217
		db 217
		db 217
		db 217
		db 217
		db 217
		db 217
		db 217
		db 201
		db 193
		db 185
		db 177
		db 169
		db 161
		db 153
		db 145
		db 137
		db 6
		NEXTLEVEL_EFFECTBLOCKTABLE dw NEXTLEVEL_EFFECTBLOCK_P4P0
		NEXTLEVEL_EFFECTBLOCK_P4P0 db 4
		db 0
		NEXTLEVEL_SUBSONG0_START db 2
		db 0
		db 1
		db 0
		db 0
		db 6
		db 41
		NEXTLEVEL_SUBSONG0_LINKER
		NEXTLEVEL_SUBSONG0_LINKER_LOOP dw NEXTLEVEL_SUBSONG0_TRACK0
		dw NEXTLEVEL_SUBSONG0_TRACK1
		dw NEXTLEVEL_SUBSONG0_TRACK2
		dw NEXTLEVEL_SUBSONG0_LINKERBLOCK0
		db 0
		db 0
		dw NEXTLEVEL_SUBSONG0_LINKER
		NEXTLEVEL_SUBSONG0_LINKERBLOCK0 db 46
		db 0
		db 0
		db 0
		dw NEXTLEVEL_SUBSONG0_SPEEDTRACK0
		dw NEXTLEVEL_SUBSONG0_EVENTTRACK0
		NEXTLEVEL_SUBSONG0_TRACK0 db 227
		db 1
		db 0
		db 60
		db 35
		db 35
		db 35
		db 60
		db 36
		db 60
		db 38
		db 60
		db 40
		db 60
		db 42
		db 60
		db 43
		db 60
		db 45
		db 60
		db 47
		db 60
		db 48
		db 60
		db 50
		db 60
		db 43
		db 47
		db 50
		db 60
		db 55
		db 61
		db 127
		NEXTLEVEL_SUBSONG0_TRACK1 db 211
		db 2
		db 0
		db 60
		db 31
		db 60
		db 19
		db 60
		db 31
		db 60
		db 21
		db 60
		db 33
		db 60
		db 23
		db 60
		db 35
		db 60
		db 24
		db 126
		db 26
		db 126
		db 19
		db 61
		db 127
		NEXTLEVEL_SUBSONG0_TRACK2 db 61
		db 127
		NEXTLEVEL_SUBSONG0_SPEEDTRACK0 db 10
		db 37
		db 12
		db 5
		db 10
		db 5
		db 12
		db 197
		NEXTLEVEL_SUBSONG0_EVENTTRACK0 db 255
		GAMEOVER_START db 65
		db 84
		db 50
		db 48
		dw GAMEOVER_ARPEGGIOTABLE
		dw GAMEOVER_ARPEGGIOTABLE
		dw GAMEOVER_ARPEGGIOTABLE
		dw GAMEOVER_EFFECTBLOCKTABLE
		dw GAMEOVER_SUBSONG0_START
		GAMEOVER_ARPEGGIOTABLE
		GAMEOVER_PITCHTABLE
		GAMEOVER_INSTRUMENTTABLE dw GAMEOVER_EMPTYINSTRUMENT
		dw GAMEOVER_INSTRUMENT1
		GAMEOVER_EMPTYINSTRUMENT db 0
		GAMEOVER_EMPTYINSTRUMENT_LOOP db 0
		db 6
		GAMEOVER_INSTRUMENT1 db 5
		db 249
		db 241
		db 233
		db 225
		db 217
		db 217
		db 217
		db 217
		db 217
		db 217
		db 217
		db 217
		db 201
		db 193
		db 185
		db 177
		db 169
		db 161
		db 153
		db 145
		db 137
		db 6
		GAMEOVER_EFFECTBLOCKTABLE dw GAMEOVER_EFFECTBLOCK_P4P1
		GAMEOVER_EFFECTBLOCK_P4P1 db 4
		db 1
		GAMEOVER_SUBSONG0_START db 2
		db 0
		db 1
		db 0
		db 0
		db 6
		db 24
		GAMEOVER_SUBSONG0_LINKER
		GAMEOVER_SUBSONG0_LINKER_LOOP dw GAMEOVER_SUBSONG0_TRACK0
		dw GAMEOVER_SUBSONG0_TRACK1
		dw GAMEOVER_SUBSONG0_TRACK2
		dw GAMEOVER_SUBSONG0_LINKERBLOCK0
		db 0
		db 0
		dw GAMEOVER_SUBSONG0_LINKER
		GAMEOVER_SUBSONG0_LINKERBLOCK0 db 45
		db 0
		db 0
		db 0
		dw GAMEOVER_SUBSONG0_SPEEDTRACK0
		dw GAMEOVER_SUBSONG0_EVENTTRACK0
		GAMEOVER_SUBSONG0_TRACK0 db 244
		db 1
		db 0
		db 60
		db 48
		db 60
		db 45
		db 60
		db 52
		db 60
		db 50
		db 126
		db 43
		db 126
		db 45
		db 60
		db 47
		db 60
		db 48
		db 60
		db 53
		db 47
		db 55
		db 61
		db 127
		GAMEOVER_SUBSONG0_TRACK1 db 240
		db 1
		db 0
		db 60
		db 45
		db 60
		db 41
		db 60
		db 48
		db 60
		db 47
		db 126
		db 40
		db 126
		db 41
		db 60
		db 43
		db 60
		db 45
		db 60
		db 48
		db 60
		db 40
		db 61
		db 127
		GAMEOVER_SUBSONG0_TRACK2 db 209
		db 1
		db 0
		db 60
		db 21
		db 60
		db 24
		db 60
		db 21
		db 60
		db 16
		db 60
		db 19
		db 60
		db 23
		db 60
		db 19
		db 60
		db 14
		db 60
		db 17
		db 60
		db 21
		db 60
		db 17
		db 60
		db 12
		db 60
		db 19
		db 60
		db 24
		db 61
		db 127
		GAMEOVER_SUBSONG0_SPEEDTRACK0 db 18
		db 253
		GAMEOVER_SUBSONG0_EVENTTRACK0 db 255
		PLY_AKG_START jp PLY_AKG_INIT
		jp PLY_AKG_PLAY
		jp PLY_AKG_INITTABLEORA_END
		PLY_AKG_INIT ld de,4
		add hl,de
		ld de,PLY_AKG_ARPEGGIOSTABLE+1
		ldi
		ldi
		ld de,PLY_AKG_PITCHESTABLE+1
		ldi
		ldi
		ld de,PLY_AKG_INSTRUMENTSTABLE+1
		ldi
		ldi
		ld c,(hl)
		inc hl
		ld b,(hl)
		inc hl
		ld (PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1+1),bc
		ld (PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2+1),bc
		add a,a
		ld e,a
		ld d,0
		add hl,de
		ld a,(hl)
		inc hl
		ld h,(hl)
		ld l,a
		ld de,5
		add hl,de
		ld de,PLY_AKG_CHANNEL3_READCELLEND+1
		ldi
		ld de,PLY_AKG_CHANNEL1_NOTE+1
		ldi
		ld (PLY_AKG_READLINKER+1),hl
		ld hl,PLY_AKG_INITTABLE0
		ld bc,3584
		call PLY_AKG_INIT_READWORDSANDFILL
		inc c
		ld hl,PLY_AKG_INITTABLE0_END
		ld b,3
		call PLY_AKG_INIT_READWORDSANDFILL
		ld hl,PLY_AKG_INITTABLE1_END
		ld bc,3511
		call PLY_AKG_INIT_READWORDSANDFILL
		ld a,255
		ld (PLY_AKG_PSGREG13_OLDVALUE+1),a
		ld hl,(PLY_AKG_INSTRUMENTSTABLE+1)
		ld e,(hl)
		inc hl
		ld d,(hl)
		ex de,hl
		inc hl
		ld (PLY_AKG_ENDWITHOUTLOOP+1),hl
		ld (PLY_AKG_CHANNEL1_PTINSTRUMENT+1),hl
		ld (PLY_AKG_CHANNEL2_PTINSTRUMENT+1),hl
		ld (PLY_AKG_CHANNEL3_PTINSTRUMENT+1),hl
		ret
		PLY_AKG_INIT_READWORDSANDFILL_LOOP ld e,(hl)
		inc hl
		ld d,(hl)
		inc hl
		ld a,c
		ld (de),a
		PLY_AKG_INIT_READWORDSANDFILL djnz PLY_AKG_INIT_READWORDSANDFILL_LOOP
		ret
		PLY_AKG_INITTABLE0 dw PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL+1
		dw PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGER
		dw PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL+1
		dw PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGER
		dw PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL+1
		dw PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGER
		dw PLY_AKG_CHANNEL1_PITCHTABLE_END+1
		dw PLY_AKG_CHANNEL1_PITCHTABLE_END+2
		dw PLY_AKG_CHANNEL2_PITCHTABLE_END+1
		dw PLY_AKG_CHANNEL2_PITCHTABLE_END+2
		dw PLY_AKG_CHANNEL3_PITCHTABLE_END+1
		dw PLY_AKG_CHANNEL3_PITCHTABLE_END+2
		dw PLY_AKG_RETRIG+1
		PLY_AKG_INITTABLE0_END
		PLY_AKG_INITTABLE1 dw PLY_AKG_PATTERNDECREASINGHEIGHT+1
		dw PLY_AKG_TICKDECREASINGCOUNTER+1
		PLY_AKG_INITTABLE1_END
		PLY_AKG_INITTABLEORA dw PLY_AKG_CHANNEL1_ISVOLUMESLIDE
		dw PLY_AKG_CHANNEL2_ISVOLUMESLIDE
		dw PLY_AKG_CHANNEL3_ISVOLUMESLIDE
		dw PLY_AKG_CHANNEL1_ISARPEGGIOTABLE
		dw PLY_AKG_CHANNEL2_ISARPEGGIOTABLE
		dw PLY_AKG_CHANNEL3_ISARPEGGIOTABLE
		dw PLY_AKG_CHANNEL1_ISPITCHTABLE
		dw PLY_AKG_CHANNEL2_ISPITCHTABLE
		dw PLY_AKG_CHANNEL3_ISPITCHTABLE
		dw PLY_AKG_CHANNEL1_ISPITCH
		dw PLY_AKG_CHANNEL2_ISPITCH
		dw PLY_AKG_CHANNEL3_ISPITCH
		PLY_AKG_INITTABLEORA_END
		PLY_AKG_STOP ld (PLY_AKG_PSGREG13_END+1),sp
		xor a
		ld l,a
		ld h,a
		ld (PLY_AKG_PSGREG8),a
		ld (PLY_AKG_PSGREG9),hl
		ld a,63
		jp PLY_AKG_SENDPSGREGISTERS
		PLY_AKG_PLAY ld (PLY_AKG_PSGREG13_END+1),sp
		xor a
		ld (PLY_AKG_EVENT),a
		PLY_AKG_TICKDECREASINGCOUNTER ld a,1
		dec a
		jp nz,PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS
		PLY_AKG_PATTERNDECREASINGHEIGHT ld a,1
		dec a
		jr nz,PLY_AKG_SETCURRENTLINEBEFOREREADLINE
		PLY_AKG_READLINKER
		PLY_AKG_READLINKER_PTLINKER ld sp,0
		pop hl
		ld a,l
		or h
		jr nz,PLY_AKG_READLINKER_NOLOOP
		pop hl
		ld sp,hl
		pop hl
		PLY_AKG_READLINKER_NOLOOP ld (PLY_AKG_CHANNEL1_READTRACK+1),hl
		pop hl
		ld (PLY_AKG_CHANNEL2_READTRACK+1),hl
		pop hl
		ld (PLY_AKG_CHANNEL3_READTRACK+1),hl
		pop hl
		ld (PLY_AKG_READLINKER+1),sp
		ld sp,hl
		pop hl
		ld c,l
		ld a,h
		ld (PLY_AKG_CHANNEL1_AFTERNOTEKNOWN+1),a
		pop hl
		ld a,l
		ld (PLY_AKG_CHANNEL2_AFTERNOTEKNOWN+1),a
		ld a,h
		ld (PLY_AKG_CHANNEL3_AFTERNOTEKNOWN+1),a
		pop hl
		ld (PLY_AKG_SPEEDTRACK_PTTRACK+1),hl
		pop hl
		ld (PLY_AKG_EVENTTRACK_PTTRACK+1),hl
		xor a
		ld (PLY_AKG_READLINE+1),a
		ld (PLY_AKG_SPEEDTRACK_END+1),a
		ld (PLY_AKG_EVENTTRACK_END+1),a
		ld (PLY_AKG_CHANNEL1_READCELLEND+1),a
		ld (PLY_AKG_CHANNEL2_READCELLEND+1),a
		ld a,c
		PLY_AKG_SETCURRENTLINEBEFOREREADLINE ld (PLY_AKG_PATTERNDECREASINGHEIGHT+1),a
		PLY_AKG_READLINE
		PLY_AKG_SPEEDTRACK_WAITCOUNTER ld a,0
		sub 1
		jr nc,PLY_AKG_SPEEDTRACK_MUSTWAIT
		PLY_AKG_SPEEDTRACK_PTTRACK ld hl,0
		ld a,(hl)
		inc hl
		srl a
		jr c,PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER
		jr nz,PLY_AKG_SPEEDTRACK_NORMALVALUE
		ld a,(hl)
		inc hl
		PLY_AKG_SPEEDTRACK_NORMALVALUE ld (PLY_AKG_CHANNEL3_READCELLEND+1),a
		xor a
		PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER ld (PLY_AKG_SPEEDTRACK_PTTRACK+1),hl
		PLY_AKG_SPEEDTRACK_MUSTWAIT ld (PLY_AKG_READLINE+1),a
		PLY_AKG_SPEEDTRACK_END
		PLY_AKG_EVENTTRACK_WAITCOUNTER ld a,0
		sub 1
		jr nc,PLY_AKG_EVENTTRACK_MUSTWAIT
		PLY_AKG_EVENTTRACK_PTTRACK ld hl,0
		ld a,(hl)
		inc hl
		srl a
		jr c,PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER
		jr nz,PLY_AKG_EVENTTRACK_NORMALVALUE
		ld a,(hl)
		inc hl
		PLY_AKG_EVENTTRACK_NORMALVALUE ld (PLY_AKG_EVENT),a
		xor a
		PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER ld (PLY_AKG_EVENTTRACK_PTTRACK+1),hl
		PLY_AKG_EVENTTRACK_MUSTWAIT ld (PLY_AKG_SPEEDTRACK_END+1),a
		PLY_AKG_EVENTTRACK_END
		PLY_AKG_CHANNEL1_WAITCOUNTER ld a,0
		sub 1
		jr c,PLY_AKG_CHANNEL1_READTRACK
		ld (PLY_AKG_EVENTTRACK_END+1),a
		jp PLY_AKG_CHANNEL1_READCELLEND
		PLY_AKG_CHANNEL1_READTRACK
		PLY_AKG_CHANNEL1_PTTRACK ld hl,0
		ld c,(hl)
		inc hl
		ld a,c
		and 63
		cp 60
		jr c,PLY_AKG_CHANNEL1_NOTE
		sub 60
		jp z,PLY_AKG_CHANNEL1_MAYBEEFFECTS
		dec a
		jr z,PLY_AKG_CHANNEL1_WAIT
		dec a
		jr z,PLY_AKG_CHANNEL1_SMALLWAIT
		ld a,(hl)
		inc hl
		jr PLY_AKG_CHANNEL1_AFTERNOTEKNOWN
		PLY_AKG_CHANNEL1_SMALLWAIT ld a,c
		rlca
		rlca
		and 3
		inc a
		ld (PLY_AKG_EVENTTRACK_END+1),a
		jr PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER
		PLY_AKG_CHANNEL1_WAIT ld a,(hl)
		ld (PLY_AKG_EVENTTRACK_END+1),a
		inc hl
		jr PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER
		PLY_AKG_CHANNEL1_SAMEINSTRUMENT
		PLY_AKG_CHANNEL1_PTBASEINSTRUMENT ld de,0
		ld (PLY_AKG_CHANNEL1_PTINSTRUMENT+1),de
		jr PLY_AKG_CHANNEL1_AFTERINSTRUMENT
		PLY_AKG_CHANNEL1_NOTE
		PLY_AKG_BASENOTEINDEX add a,0
		PLY_AKG_CHANNEL1_AFTERNOTEKNOWN
		PLY_AKG_CHANNEL1_TRANSPOSITION add a,0
		ld (PLY_AKG_CHANNEL1_TRACKNOTE+1),a
		rl c
		jr nc,PLY_AKG_CHANNEL1_SAMEINSTRUMENT
		ld a,(hl)
		inc hl
		exx
		ld l,a
		ld h,0
		add hl,hl
		PLY_AKG_INSTRUMENTSTABLE ld de,0
		add hl,de
		ld sp,hl
		pop hl
		ld a,(hl)
		inc hl
		ld (PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED+1),a
		ld (PLY_AKG_CHANNEL1_PTINSTRUMENT+1),hl
		ld (PLY_AKG_CHANNEL1_SAMEINSTRUMENT+1),hl
		exx
		PLY_AKG_CHANNEL1_AFTERINSTRUMENT ex de,hl
		xor a
		ld l,a
		ld h,a
		ld (PLY_AKG_CHANNEL1_PITCHTABLE_END+1),hl
		ld (PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP+1),a
		ld (PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP+1),a
		ld (PLY_AKG_CHANNEL1_INSTRUMENTSTEP+2),a
		PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED ld a,0
		ld (PLY_AKG_CHANNEL1_INSTRUMENTSPEED+1),a
		ld a,183
		ld (PLY_AKG_CHANNEL1_ISPITCH),a
		ld a,(PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED)
		ld (PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED),a
		ld a,(PLY_AKG_CHANNEL1_PITCHBASESPEED)
		ld (PLY_AKG_CHANNEL1_PITCHTABLESPEED),a
		ld hl,(PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE)
		ld (PLY_AKG_CHANNEL1_ARPEGGIOTABLE+1),hl
		ld hl,(PLY_AKG_CHANNEL1_PITCHTABLEBASE)
		ld (PLY_AKG_CHANNEL1_PITCHTABLE+1),hl
		ex de,hl
		rl c
		jp c,PLY_AKG_CHANNEL1_READEFFECTS
		PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER ld (PLY_AKG_CHANNEL1_READTRACK+1),hl
		PLY_AKG_CHANNEL1_READCELLEND
		PLY_AKG_CHANNEL2_WAITCOUNTER ld a,0
		sub 1
		jr c,PLY_AKG_CHANNEL2_READTRACK
		ld (PLY_AKG_CHANNEL1_READCELLEND+1),a
		jp PLY_AKG_CHANNEL2_READCELLEND
		PLY_AKG_CHANNEL2_READTRACK
		PLY_AKG_CHANNEL2_PTTRACK ld hl,0
		ld c,(hl)
		inc hl
		ld a,c
		and 63
		cp 60
		jr c,PLY_AKG_CHANNEL2_NOTE
		sub 60
		jp z,PLY_AKG_CHANNEL1_READEFFECTSEND
		dec a
		jr z,PLY_AKG_CHANNEL2_WAIT
		dec a
		jr z,PLY_AKG_CHANNEL2_SMALLWAIT
		ld a,(hl)
		inc hl
		jr PLY_AKG_CHANNEL2_AFTERNOTEKNOWN
		PLY_AKG_CHANNEL2_SMALLWAIT ld a,c
		rlca
		rlca
		and 3
		inc a
		ld (PLY_AKG_CHANNEL1_READCELLEND+1),a
		jr PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER
		PLY_AKG_CHANNEL2_WAIT ld a,(hl)
		ld (PLY_AKG_CHANNEL1_READCELLEND+1),a
		inc hl
		jr PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER
		PLY_AKG_CHANNEL2_SAMEINSTRUMENT
		PLY_AKG_CHANNEL2_PTBASEINSTRUMENT ld de,0
		ld (PLY_AKG_CHANNEL2_PTINSTRUMENT+1),de
		jr PLY_AKG_CHANNEL2_AFTERINSTRUMENT
		PLY_AKG_CHANNEL2_NOTE ld b,a
		ld a,(PLY_AKG_CHANNEL1_NOTE+1)
		add a,b
		PLY_AKG_CHANNEL2_AFTERNOTEKNOWN
		PLY_AKG_CHANNEL2_TRANSPOSITION add a,0
		ld (PLY_AKG_CHANNEL2_TRACKNOTE+1),a
		rl c
		jr nc,PLY_AKG_CHANNEL2_SAMEINSTRUMENT
		ld a,(hl)
		inc hl
		exx
		ld e,a
		ld d,0
		ld hl,(PLY_AKG_INSTRUMENTSTABLE+1)
		add hl,de
		add hl,de
		ld sp,hl
		pop hl
		ld a,(hl)
		inc hl
		ld (PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED+1),a
		ld (PLY_AKG_CHANNEL2_PTINSTRUMENT+1),hl
		ld (PLY_AKG_CHANNEL2_SAMEINSTRUMENT+1),hl
		exx
		PLY_AKG_CHANNEL2_AFTERINSTRUMENT ex de,hl
		xor a
		ld l,a
		ld h,a
		ld (PLY_AKG_CHANNEL2_PITCHTABLE_END+1),hl
		ld (PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP+1),a
		ld (PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP+1),a
		ld (PLY_AKG_CHANNEL2_INSTRUMENTSTEP+2),a
		PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED ld a,0
		ld (PLY_AKG_CHANNEL2_INSTRUMENTSPEED+1),a
		ld a,183
		ld (PLY_AKG_CHANNEL2_ISPITCH),a
		ld a,(PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED)
		ld (PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED),a
		ld a,(PLY_AKG_CHANNEL2_PITCHBASESPEED)
		ld (PLY_AKG_CHANNEL2_PITCHTABLESPEED),a
		ld hl,(PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE)
		ld (PLY_AKG_CHANNEL2_ARPEGGIOTABLE+1),hl
		ld hl,(PLY_AKG_CHANNEL2_PITCHTABLEBASE)
		ld (PLY_AKG_CHANNEL2_PITCHTABLE+1),hl
		ex de,hl
		rl c
		jp c,PLY_AKG_CHANNEL2_READEFFECTS
		PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER ld (PLY_AKG_CHANNEL2_READTRACK+1),hl
		PLY_AKG_CHANNEL2_READCELLEND
		PLY_AKG_CHANNEL3_WAITCOUNTER ld a,0
		sub 1
		jr c,PLY_AKG_CHANNEL3_READTRACK
		ld (PLY_AKG_CHANNEL2_READCELLEND+1),a
		jp PLY_AKG_CHANNEL3_READCELLEND
		PLY_AKG_CHANNEL3_READTRACK
		PLY_AKG_CHANNEL3_PTTRACK ld hl,0
		ld c,(hl)
		inc hl
		ld a,c
		and 63
		cp 60
		jr c,PLY_AKG_CHANNEL3_NOTE
		sub 60
		jp z,PLY_AKG_CHANNEL2_READEFFECTSEND
		dec a
		jr z,PLY_AKG_CHANNEL3_WAIT
		dec a
		jr z,PLY_AKG_CHANNEL3_SMALLWAIT
		ld a,(hl)
		inc hl
		jr PLY_AKG_CHANNEL3_AFTERNOTEKNOWN
		PLY_AKG_CHANNEL3_SMALLWAIT ld a,c
		rlca
		rlca
		and 3
		inc a
		ld (PLY_AKG_CHANNEL2_READCELLEND+1),a
		jr PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER
		PLY_AKG_CHANNEL3_WAIT ld a,(hl)
		ld (PLY_AKG_CHANNEL2_READCELLEND+1),a
		inc hl
		jr PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER
		PLY_AKG_CHANNEL3_SAMEINSTRUMENT
		PLY_AKG_CHANNEL3_PTBASEINSTRUMENT ld de,0
		ld (PLY_AKG_CHANNEL3_PTINSTRUMENT+1),de
		jr PLY_AKG_CHANNEL3_AFTERINSTRUMENT
		PLY_AKG_CHANNEL3_NOTE ld b,a
		ld a,(PLY_AKG_CHANNEL1_NOTE+1)
		add a,b
		PLY_AKG_CHANNEL3_AFTERNOTEKNOWN
		PLY_AKG_CHANNEL3_TRANSPOSITION add a,0
		ld (PLY_AKG_CHANNEL3_TRACKNOTE+1),a
		rl c
		jr nc,PLY_AKG_CHANNEL3_SAMEINSTRUMENT
		ld a,(hl)
		inc hl
		exx
		ld e,a
		ld d,0
		ld hl,(PLY_AKG_INSTRUMENTSTABLE+1)
		add hl,de
		add hl,de
		ld sp,hl
		pop hl
		ld a,(hl)
		inc hl
		ld (PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED+1),a
		ld (PLY_AKG_CHANNEL3_PTINSTRUMENT+1),hl
		ld (PLY_AKG_CHANNEL3_SAMEINSTRUMENT+1),hl
		exx
		PLY_AKG_CHANNEL3_AFTERINSTRUMENT ex de,hl
		xor a
		ld l,a
		ld h,a
		ld (PLY_AKG_CHANNEL3_PITCHTABLE_END+1),hl
		ld (PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP+1),a
		ld (PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP+1),a
		ld (PLY_AKG_CHANNEL3_INSTRUMENTSTEP+2),a
		PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED ld a,0
		ld (PLY_AKG_CHANNEL3_INSTRUMENTSPEED+1),a
		ld a,183
		ld (PLY_AKG_CHANNEL3_ISPITCH),a
		ld a,(PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED)
		ld (PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED),a
		ld a,(PLY_AKG_CHANNEL3_PITCHBASESPEED)
		ld (PLY_AKG_CHANNEL3_PITCHTABLESPEED),a
		ld hl,(PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE)
		ld (PLY_AKG_CHANNEL3_ARPEGGIOTABLE+1),hl
		ld hl,(PLY_AKG_CHANNEL3_PITCHTABLEBASE)
		ld (PLY_AKG_CHANNEL3_PITCHTABLE+1),hl
		ex de,hl
		rl c
		jp c,PLY_AKG_CHANNEL3_READEFFECTS
		PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER ld (PLY_AKG_CHANNEL3_READTRACK+1),hl
		PLY_AKG_CHANNEL3_READCELLEND
		PLY_AKG_CURRENTSPEED ld a,0
		PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS ld (PLY_AKG_TICKDECREASINGCOUNTER+1),a
		PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGER equ $+2
		PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL ld hl,0
		PLY_AKG_CHANNEL1_ISVOLUMESLIDE or a
		jr nc,PLY_AKG_CHANNEL1_VOLUMESLIDE_END
		PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE ld de,0
		add hl,de
		bit 7,h
		jr z,PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW
		ld h,0
		jr PLY_AKG_CHANNEL1_VOLUMESETAGAIN
		PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW ld a,h
		cp 16
		jr c,PLY_AKG_CHANNEL1_VOLUMESETAGAIN
		ld h,15
		PLY_AKG_CHANNEL1_VOLUMESETAGAIN ld (PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL+1),hl
		PLY_AKG_CHANNEL1_VOLUMESLIDE_END ld a,h
		ld (PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME+1),a
		ld c,0
		PLY_AKG_CHANNEL1_ISARPEGGIOTABLE or a
		jr nc,PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END
		PLY_AKG_CHANNEL1_ARPEGGIOTABLE ld hl,0
		ld a,(hl)
		cp 128
		jr nz,PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST
		inc hl
		ld a,(hl)
		inc hl
		ld h,(hl)
		ld l,a
		ld a,(hl)
		PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST ld c,a
		ld a,(PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED)
		ld d,a
		PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP ld a,0
		inc a
		cp d
		jr c,PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP
		inc hl
		ld (PLY_AKG_CHANNEL1_ARPEGGIOTABLE+1),hl
		xor a
		PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP ld (PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP+1),a
		PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END ld de,0
		PLY_AKG_CHANNEL1_ISPITCHTABLE or a
		jr nc,PLY_AKG_CHANNEL1_PITCHTABLE_END
		PLY_AKG_CHANNEL1_PITCHTABLE ld sp,0
		pop de
		pop hl
		ld a,(PLY_AKG_CHANNEL1_PITCHTABLESPEED)
		ld b,a
		PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP ld a,0
		inc a
		cp b
		jr c,PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP
		ld (PLY_AKG_CHANNEL1_PITCHTABLE+1),hl
		xor a
		PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP ld (PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP+1),a
		PLY_AKG_CHANNEL1_PITCHTABLE_END
		PLY_AKG_CHANNEL1_PITCH ld hl,0
		PLY_AKG_CHANNEL1_ISPITCH or a
		jr nc,PLY_AKG_CHANNEL1_PITCH_END
		ld ixl,c
		PLY_AKG_CHANNEL1_PITCHTRACK ld bc,0
		or a
		PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS nop
		add hl,bc
		PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER ld a,0
		PLY_AKG_CHANNEL1_PITCHTRACKDECIMALVALUE equ $+1
		PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR add a,0
		ld (PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER+1),a
		jr nc,PLY_AKG_CHANNEL1_PITCHNOCARRY
		PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB inc hl
		PLY_AKG_CHANNEL1_PITCHNOCARRY ld (PLY_AKG_CHANNEL1_PITCHTABLE_END+1),hl
		PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS
		PLY_AKG_CHANNEL1_GLIDEDIRECTION ld a,0
		or a
		jr z,PLY_AKG_CHANNEL1_GLIDE_END
		ld (PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES+1),hl
		ld c,l
		ld b,h
		ex af,af'
		ld a,(PLY_AKG_CHANNEL1_TRACKNOTE+1)
		add a,a
		ld l,a
		ex af,af'
		ld h,0
		ld sp,PLY_AKG_PERIODTABLE
		add hl,sp
		ld sp,hl
		pop hl
		dec sp
		dec sp
		add hl,bc
		PLY_AKG_CHANNEL1_GLIDETOREACH ld bc,0
		rra
		jr nc,PLY_AKG_CHANNEL1_GLIDEDOWNCHECK
		or a
		sbc hl,bc
		jr nc,PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES
		jr PLY_AKG_CHANNEL1_GLIDEOVER
		PLY_AKG_CHANNEL1_GLIDEDOWNCHECK sbc hl,bc
		jr c,PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES
		PLY_AKG_CHANNEL1_GLIDEOVER ld l,c
		ld h,b
		pop bc
		or a
		sbc hl,bc
		ld (PLY_AKG_CHANNEL1_PITCHTABLE_END+1),hl
		ld a,183
		ld (PLY_AKG_CHANNEL1_ISPITCH),a
		jr PLY_AKG_CHANNEL1_GLIDE_END
		PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED db 0
		PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED db 0
		PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE db 0
		db 0
		PLY_AKG_CHANNEL1_PITCHTABLESPEED db 0
		PLY_AKG_CHANNEL1_PITCHBASESPEED db 0
		PLY_AKG_CHANNEL1_PITCHTABLEBASE db 0
		db 0
		PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES
		PLY_AKG_CHANNEL1_GLIDE_BEFOREEND
		PLY_AKG_CHANNEL1_GLIDE_SAVEHL ld hl,0
		PLY_AKG_CHANNEL1_GLIDE_END ld c,ixl
		PLY_AKG_CHANNEL1_PITCH_END add hl,de
		ld (PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS+1),hl
		ld a,c
		ld (PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE+1),a
		PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGER equ $+2
		PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL ld hl,0
		PLY_AKG_CHANNEL2_ISVOLUMESLIDE or a
		jr nc,PLY_AKG_CHANNEL2_VOLUMESLIDE_END
		PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE ld de,0
		add hl,de
		bit 7,h
		jr z,PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW
		ld h,0
		jr PLY_AKG_CHANNEL2_VOLUMESETAGAIN
		PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW ld a,h
		cp 16
		jr c,PLY_AKG_CHANNEL2_VOLUMESETAGAIN
		ld h,15
		PLY_AKG_CHANNEL2_VOLUMESETAGAIN ld (PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL+1),hl
		PLY_AKG_CHANNEL2_VOLUMESLIDE_END ld a,h
		ld (PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME+1),a
		ld c,0
		PLY_AKG_CHANNEL2_ISARPEGGIOTABLE or a
		jr nc,PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END
		PLY_AKG_CHANNEL2_ARPEGGIOTABLE ld hl,0
		ld a,(hl)
		cp 128
		jr nz,PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST
		inc hl
		ld a,(hl)
		inc hl
		ld h,(hl)
		ld l,a
		ld a,(hl)
		PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST ld c,a
		ld a,(PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED)
		ld d,a
		PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP ld a,0
		inc a
		cp d
		jr c,PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP
		inc hl
		ld (PLY_AKG_CHANNEL2_ARPEGGIOTABLE+1),hl
		xor a
		PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP ld (PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP+1),a
		PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END ld de,0
		PLY_AKG_CHANNEL2_ISPITCHTABLE or a
		jr nc,PLY_AKG_CHANNEL2_PITCHTABLE_END
		PLY_AKG_CHANNEL2_PITCHTABLE ld sp,0
		pop de
		pop hl
		ld a,(PLY_AKG_CHANNEL2_PITCHTABLESPEED)
		ld b,a
		PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP ld a,0
		inc a
		cp b
		jr c,PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP
		ld (PLY_AKG_CHANNEL2_PITCHTABLE+1),hl
		xor a
		PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP ld (PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP+1),a
		PLY_AKG_CHANNEL2_PITCHTABLE_END
		PLY_AKG_CHANNEL2_PITCH ld hl,0
		PLY_AKG_CHANNEL2_ISPITCH or a
		jr nc,PLY_AKG_CHANNEL2_PITCH_END
		ld ixl,c
		PLY_AKG_CHANNEL2_PITCHTRACK ld bc,0
		or a
		PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS nop
		add hl,bc
		PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER ld a,0
		PLY_AKG_CHANNEL2_PITCHTRACKDECIMALVALUE equ $+1
		PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR add a,0
		ld (PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER+1),a
		jr nc,PLY_AKG_CHANNEL2_PITCHNOCARRY
		PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB inc hl
		PLY_AKG_CHANNEL2_PITCHNOCARRY ld (PLY_AKG_CHANNEL2_PITCHTABLE_END+1),hl
		PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS
		PLY_AKG_CHANNEL2_GLIDEDIRECTION ld a,0
		or a
		jr z,PLY_AKG_CHANNEL2_GLIDE_END
		ld (PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES+1),hl
		ld c,l
		ld b,h
		ex af,af'
		ld a,(PLY_AKG_CHANNEL2_TRACKNOTE+1)
		add a,a
		ld l,a
		ex af,af'
		ld h,0
		ld sp,PLY_AKG_PERIODTABLE
		add hl,sp
		ld sp,hl
		pop hl
		dec sp
		dec sp
		add hl,bc
		PLY_AKG_CHANNEL2_GLIDETOREACH ld bc,0
		rra
		jr nc,PLY_AKG_CHANNEL2_GLIDEDOWNCHECK
		or a
		sbc hl,bc
		jr nc,PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES
		jr PLY_AKG_CHANNEL2_GLIDEOVER
		PLY_AKG_CHANNEL2_GLIDEDOWNCHECK sbc hl,bc
		jr c,PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES
		PLY_AKG_CHANNEL2_GLIDEOVER ld l,c
		ld h,b
		pop bc
		or a
		sbc hl,bc
		ld (PLY_AKG_CHANNEL2_PITCHTABLE_END+1),hl
		ld a,183
		ld (PLY_AKG_CHANNEL2_ISPITCH),a
		jr PLY_AKG_CHANNEL2_GLIDE_END
		PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED db 0
		PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED db 0
		PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE db 0
		db 0
		PLY_AKG_CHANNEL2_PITCHTABLESPEED db 0
		PLY_AKG_CHANNEL2_PITCHBASESPEED db 0
		PLY_AKG_CHANNEL2_PITCHTABLEBASE db 0
		db 0
		PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES
		PLY_AKG_CHANNEL2_GLIDE_BEFOREEND
		PLY_AKG_CHANNEL2_GLIDE_SAVEHL ld hl,0
		PLY_AKG_CHANNEL2_GLIDE_END ld c,ixl
		PLY_AKG_CHANNEL2_PITCH_END add hl,de
		ld (PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS+1),hl
		ld a,c
		ld (PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE+1),a
		PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGER equ $+2
		PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL ld hl,0
		PLY_AKG_CHANNEL3_ISVOLUMESLIDE or a
		jr nc,PLY_AKG_CHANNEL3_VOLUMESLIDE_END
		PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE ld de,0
		add hl,de
		bit 7,h
		jr z,PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW
		ld h,0
		jr PLY_AKG_CHANNEL3_VOLUMESETAGAIN
		PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW ld a,h
		cp 16
		jr c,PLY_AKG_CHANNEL3_VOLUMESETAGAIN
		ld h,15
		PLY_AKG_CHANNEL3_VOLUMESETAGAIN ld (PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL+1),hl
		PLY_AKG_CHANNEL3_VOLUMESLIDE_END ld a,h
		ld (PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME+1),a
		ld c,0
		PLY_AKG_CHANNEL3_ISARPEGGIOTABLE or a
		jr nc,PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END
		PLY_AKG_CHANNEL3_ARPEGGIOTABLE ld hl,0
		ld a,(hl)
		cp 128
		jr nz,PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST
		inc hl
		ld a,(hl)
		inc hl
		ld h,(hl)
		ld l,a
		ld a,(hl)
		PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST ld c,a
		ld a,(PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED)
		ld d,a
		PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP ld a,0
		inc a
		cp d
		jr c,PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP
		inc hl
		ld (PLY_AKG_CHANNEL3_ARPEGGIOTABLE+1),hl
		xor a
		PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP ld (PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP+1),a
		PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END ld de,0
		PLY_AKG_CHANNEL3_ISPITCHTABLE or a
		jr nc,PLY_AKG_CHANNEL3_PITCHTABLE_END
		PLY_AKG_CHANNEL3_PITCHTABLE ld sp,0
		pop de
		pop hl
		ld a,(PLY_AKG_CHANNEL3_PITCHTABLESPEED)
		ld b,a
		PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP ld a,0
		inc a
		cp b
		jr c,PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP
		ld (PLY_AKG_CHANNEL3_PITCHTABLE+1),hl
		xor a
		PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP ld (PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP+1),a
		PLY_AKG_CHANNEL3_PITCHTABLE_END
		PLY_AKG_CHANNEL3_PITCH ld hl,0
		PLY_AKG_CHANNEL3_ISPITCH or a
		jr nc,PLY_AKG_CHANNEL3_PITCH_END
		ld ixl,c
		PLY_AKG_CHANNEL3_PITCHTRACK ld bc,0
		or a
		PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS nop
		add hl,bc
		PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER ld a,0
		PLY_AKG_CHANNEL3_PITCHTRACKDECIMALVALUE equ $+1
		PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR add a,0
		ld (PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER+1),a
		jr nc,PLY_AKG_CHANNEL3_PITCHNOCARRY
		PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB inc hl
		PLY_AKG_CHANNEL3_PITCHNOCARRY ld (PLY_AKG_CHANNEL3_PITCHTABLE_END+1),hl
		PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS
		PLY_AKG_CHANNEL3_GLIDEDIRECTION ld a,0
		or a
		jr z,PLY_AKG_CHANNEL3_GLIDE_END
		ld (PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES+1),hl
		ld c,l
		ld b,h
		ex af,af'
		ld a,(PLY_AKG_CHANNEL3_TRACKNOTE+1)
		add a,a
		ld l,a
		ex af,af'
		ld h,0
		ld sp,PLY_AKG_PERIODTABLE
		add hl,sp
		ld sp,hl
		pop hl
		dec sp
		dec sp
		add hl,bc
		PLY_AKG_CHANNEL3_GLIDETOREACH ld bc,0
		rra
		jr nc,PLY_AKG_CHANNEL3_GLIDEDOWNCHECK
		or a
		sbc hl,bc
		jr nc,PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES
		jr PLY_AKG_CHANNEL3_GLIDEOVER
		PLY_AKG_CHANNEL3_GLIDEDOWNCHECK sbc hl,bc
		jr c,PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES
		PLY_AKG_CHANNEL3_GLIDEOVER ld l,c
		ld h,b
		pop bc
		or a
		sbc hl,bc
		ld (PLY_AKG_CHANNEL3_PITCHTABLE_END+1),hl
		ld a,183
		ld (PLY_AKG_CHANNEL3_ISPITCH),a
		jr PLY_AKG_CHANNEL3_GLIDE_END
		PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED db 0
		PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED db 0
		PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE db 0
		db 0
		PLY_AKG_CHANNEL3_PITCHTABLESPEED db 0
		PLY_AKG_CHANNEL3_PITCHBASESPEED db 0
		PLY_AKG_CHANNEL3_PITCHTABLEBASE db 0
		db 0
		PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES
		PLY_AKG_CHANNEL3_GLIDE_BEFOREEND
		PLY_AKG_CHANNEL3_GLIDE_SAVEHL ld hl,0
		PLY_AKG_CHANNEL3_GLIDE_END ld c,ixl
		PLY_AKG_CHANNEL3_PITCH_END add hl,de
		ld (PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS+1),hl
		ld a,c
		ld (PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE+1),a
		ld sp,(PLY_AKG_PSGREG13_END+1)
		PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS
		PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH ld hl,0
		PLY_AKG_CHANNEL1_TRACKNOTE ld a,0
		PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE add a,0
		ld e,a
		ld d,0
		exx
		PLY_AKG_CHANNEL1_INSTRUMENTSTEP ld iyl,0
		PLY_AKG_CHANNEL1_PTINSTRUMENT ld hl,0
		PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME ld de,57359
		call PLY_AKG_READINSTRUMENTCELL
		ld a,iyl
		inc a
		PLY_AKG_CHANNEL1_INSTRUMENTSPEED cp 0
		jr c,PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP
		ld (PLY_AKG_CHANNEL1_PTINSTRUMENT+1),hl
		xor a
		PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP ld (PLY_AKG_CHANNEL1_INSTRUMENTSTEP+2),a
		ld a,e
		ld (PLY_AKG_PSGREG8),a
		rr d
		exx
		ld (PLY_AKG_PSGREG01_INSTR+1),hl
		PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS
		PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH ld hl,0
		PLY_AKG_CHANNEL2_TRACKNOTE ld a,0
		PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE add a,0
		ld e,a
		ld d,0
		exx
		PLY_AKG_CHANNEL2_INSTRUMENTSTEP ld iyl,0
		PLY_AKG_CHANNEL2_PTINSTRUMENT ld hl,0
		PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME ld e,15
		nop
		call PLY_AKG_READINSTRUMENTCELL
		ld a,iyl
		inc a
		PLY_AKG_CHANNEL2_INSTRUMENTSPEED cp 0
		jr c,PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP
		ld (PLY_AKG_CHANNEL2_PTINSTRUMENT+1),hl
		xor a
		PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP ld (PLY_AKG_CHANNEL2_INSTRUMENTSTEP+2),a
		ld a,e
		ld (PLY_AKG_PSGREG9),a
		rr d
		exx
		ld (PLY_AKG_PSGREG23_INSTR+1),hl
		PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS
		PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH ld hl,0
		PLY_AKG_CHANNEL3_TRACKNOTE ld a,0
		PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE add a,0
		ld e,a
		ld d,0
		exx
		PLY_AKG_CHANNEL3_INSTRUMENTSTEP ld iyl,0
		PLY_AKG_CHANNEL3_PTINSTRUMENT ld hl,0
		PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME ld e,15
		nop
		call PLY_AKG_READINSTRUMENTCELL
		ld a,iyl
		inc a
		PLY_AKG_CHANNEL3_INSTRUMENTSPEED cp 0
		jr c,PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP
		ld (PLY_AKG_CHANNEL3_PTINSTRUMENT+1),hl
		xor a
		PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP ld (PLY_AKG_CHANNEL3_INSTRUMENTSTEP+2),a
		ld a,e
		ld (PLY_AKG_PSGREG10),a
		ld a,d
		exx
		ld (PLY_AKG_PSGREG45_INSTR+1),hl
		PLY_AKG_SENDPSGREGISTERS ex af,af'
		ld de,49151
		ld bc,65533
		ld a,1
		PLY_AKG_PSGREG01_INSTR ld hl,0
		out (c),0
		ld b,d
		out (c),l
		ld b,e
		out (c),a
		ld b,d
		out (c),h
		ld b,e
		PLY_AKG_PSGREG23_INSTR ld hl,0
		inc a
		out (c),a
		ld b,d
		out (c),l
		ld b,e
		inc a
		out (c),a
		ld b,d
		out (c),h
		ld b,e
		PLY_AKG_PSGREG45_INSTR ld hl,0
		inc a
		out (c),a
		ld b,d
		out (c),l
		ld b,e
		inc a
		out (c),a
		ld b,d
		out (c),h
		ld b,e
		PLY_AKG_PSGREG6 equ $+1
		PLY_AKG_PSGREG8 equ $+2
		PLY_AKG_PSGREG6_8_INSTR ld hl,0
		inc a
		out (c),a
		ld b,d
		out (c),l
		ld b,e
		inc a
		out (c),a
		ld b,d
		ex af,af'
		out (c),a
		ex af,af'
		ld b,e
		inc a
		out (c),a
		ld b,d
		out (c),h
		ld b,e
		PLY_AKG_PSGREG9 equ $+1
		PLY_AKG_PSGREG10 equ $+2
		PLY_AKG_PSGREG9_10_INSTR ld hl,0
		inc a
		out (c),a
		ld b,d
		out (c),l
		ld b,e
		inc a
		out (c),a
		ld b,d
		out (c),h
		ld b,e
		PLY_AKG_PSGHARDWAREPERIOD_INSTR ld hl,0
		inc a
		out (c),a
		ld b,d
		out (c),l
		ld b,e
		inc a
		out (c),a
		ld b,d
		out (c),h
		ld b,e
		inc a
		out (c),a
		PLY_AKG_PSGREG13_OLDVALUE ld a,255
		PLY_AKG_RETRIG or 0
		PLY_AKG_PSGREG13_INSTR ld l,0
		cp l
		jr z,PLY_AKG_PSGREG13_END
		ld a,l
		ld (PLY_AKG_PSGREG13_OLDVALUE+1),a
		ld b,d
		out (c),a
		xor a
		ld (PLY_AKG_RETRIG+1),a
		PLY_AKG_PSGREG13_END
		PLY_AKG_SAVESP ld sp,0
		ret
		PLY_AKG_CHANNEL1_MAYBEEFFECTS ld (PLY_AKG_EVENTTRACK_END+1),a
		bit 6,c
		jp z,PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER
		PLY_AKG_CHANNEL1_READEFFECTS ld iy,PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS
		ld ix,PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS
		ld de,PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER
		jr PLY_AKG_CHANNEL3_READEFFECTSEND
		PLY_AKG_CHANNEL1_READEFFECTSEND
		PLY_AKG_CHANNEL2_MAYBEEFFECTS ld (PLY_AKG_CHANNEL1_READCELLEND+1),a
		bit 6,c
		jp z,PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER
		PLY_AKG_CHANNEL2_READEFFECTS ld iy,PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS
		ld ix,PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS
		ld de,PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER
		jr PLY_AKG_CHANNEL3_READEFFECTSEND
		PLY_AKG_CHANNEL2_READEFFECTSEND
		PLY_AKG_CHANNEL3_MAYBEEFFECTS ld (PLY_AKG_CHANNEL2_READCELLEND+1),a
		bit 6,c
		jp z,PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER
		PLY_AKG_CHANNEL3_READEFFECTS ld iy,PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS
		ld ix,PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS
		ld de,PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER
		PLY_AKG_CHANNEL3_READEFFECTSEND
		PLY_AKG_CHANNEL_READEFFECTS ld (PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP+1),de
		ex de,hl
		ld a,(de)
		inc de
		sla a
		jr c,PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS
		exx
		ld l,a
		ld h,0
		PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 ld de,0
		add hl,de
		ld e,(hl)
		inc hl
		ld d,(hl)
		PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN ld a,(de)
		inc de
		ld (PLY_AKG_CHANNEL_RE_EFFECTRETURN+1),a
		and 254
		ld l,a
		ld h,0
		ld sp,PLY_AKG_EFFECTTABLE
		add hl,sp
		ld sp,hl
		ret
		PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK ld a,0
		rra
		jr c,PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN
		exx
		ex de,hl
		PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP jp 0
		PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS srl a
		exx
		ld h,a
		exx
		ld a,(de)
		inc de
		exx
		ld l,a
		PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 ld de,0
		add hl,de
		jr PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN
		PLY_AKG_READINSTRUMENTCELL ld a,(hl)
		inc hl
		ld b,a
		rra
		jp c,PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP
		rra
		jr c,PLY_AKG_STH_OR_ENDWITHOUTLOOP
		rra
		jr c,PLY_AKG_HARDTOSOFT
		PLY_AKG_NOSOFTNOHARD and 15
		sub e
		jr nc,PLY_AKG_NOSOFTNOHARD+6
		xor a
		ld e,a
		rl b
		jr nc,PLY_AKG_NSNH_NONOISE
		ld a,(hl)
		inc hl
		ld (PLY_AKG_PSGREG6),a
		set 2,d
		res 5,d
		ret
		PLY_AKG_NSNH_NONOISE set 2,d
		ret
		PLY_AKG_SOFT and 15
		sub e
		jr nc,PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON-1
		xor a
		ld e,a
		PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON rl b
		jr nc,PLY_AKG_S_NOTSIMPLE
		ld c,0
		jr PLY_AKG_S_AFTERSIMPLETEST
		PLY_AKG_S_NOTSIMPLE ld b,(hl)
		ld c,b
		inc hl
		PLY_AKG_S_AFTERSIMPLETEST call PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD
		ld a,c
		and 31
		ret z
		ld (PLY_AKG_PSGREG6),a
		res 5,d
		ret
		PLY_AKG_HARDTOSOFT call PLY_AKG_STOH_HTOS_SANDH_COMMON
		ld (PLY_AKG_HS_JUMPRATIO+1),a
		ld a,b
		exx
		ld (PLY_AKG_PSGHARDWAREPERIOD_INSTR+1),hl
		PLY_AKG_HS_JUMPRATIO jr PLY_AKG_HS_JUMPRATIO+2
		sla l
		rl h
		sla l
		rl h
		sla l
		rl h
		sla l
		rl h
		sla l
		rl h
		sla l
		rl h
		sla l
		rl h
		rla
		jr nc,PLY_AKG_SH_NOSOFTWAREPITCHSHIFT
		exx
		ld a,(hl)
		inc hl
		exx
		add a,l
		ld l,a
		exx
		ld a,(hl)
		inc hl
		exx
		adc a,h
		ld h,a
		PLY_AKG_SH_NOSOFTWAREPITCHSHIFT exx
		ret
		PLY_AKG_ENDWITHOUTLOOP
		PLY_AKG_EMPTYINSTRUMENTDATAPT ld hl,0
		inc hl
		xor a
		ld b,a
		jr PLY_AKG_NOSOFTNOHARD
		PLY_AKG_STH_OR_ENDWITHOUTLOOP rra
		jr c,PLY_AKG_ENDWITHOUTLOOP
		call PLY_AKG_STOH_HTOS_SANDH_COMMON
		ld (PLY_AKG_SH_JUMPRATIO+1),a
		ld a,b
		exx
		ld e,l
		ld d,h
		PLY_AKG_SH_JUMPRATIO jr PLY_AKG_SH_JUMPRATIO+2
		srl h
		rr l
		srl h
		rr l
		srl h
		rr l
		srl h
		rr l
		srl h
		rr l
		srl h
		rr l
		srl h
		rr l
		jr nc,PLY_AKG_SH_JUMPRATIOEND
		inc hl
		PLY_AKG_SH_JUMPRATIOEND rla
		jr nc,PLY_AKG_SH_NOHARDWAREPITCHSHIFT
		exx
		ld a,(hl)
		inc hl
		exx
		add a,l
		ld l,a
		exx
		ld a,(hl)
		inc hl
		exx
		adc a,h
		ld h,a
		PLY_AKG_SH_NOHARDWAREPITCHSHIFT ld (PLY_AKG_PSGHARDWAREPERIOD_INSTR+1),hl
		ex de,hl
		exx
		ret
		PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP rra
		jr c,PLY_AKG_H_OR_ENDWITHLOOP
		rra
		jp nc,PLY_AKG_SOFT
		exx
		push hl
		push de
		exx
		call PLY_AKG_STOH_HTOS_SANDH_COMMON
		exx
		ld (PLY_AKG_PSGHARDWAREPERIOD_INSTR+1),hl
		pop de
		pop hl
		exx
		rl b
		jp PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD
		PLY_AKG_H_OR_ENDWITHLOOP rra
		jr c,PLY_AKG_ENDWITHLOOP
		ld e,16
		rra
		jr nc,PLY_AKG_H_AFTERRETRIG
		ld c,a
		ld a,iyl
		or a
		jr nz,PLY_AKG_H_RETRIGEND
		ld a,e
		ld (PLY_AKG_RETRIG+1),a
		PLY_AKG_H_RETRIGEND ld a,c
		PLY_AKG_H_AFTERRETRIG and 7
		add a,8
		ld (PLY_AKG_PSGREG13_INSTR+1),a
		call PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON
		exx
		ld (PLY_AKG_PSGHARDWAREPERIOD_INSTR+1),hl
		exx
		set 2,d
		ret
		PLY_AKG_ENDWITHLOOP ld a,(hl)
		inc hl
		ld h,(hl)
		ld l,a
		jp PLY_AKG_READINSTRUMENTCELL
		PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD jr nc,PLY_AKG_S_OR_H_NEXTBYTE
		exx
		ex de,hl
		add hl,hl
		ld bc,PLY_AKG_PERIODTABLE
		add hl,bc
		ld a,(hl)
		inc hl
		ld h,(hl)
		ld l,a
		add hl,de
		exx
		rl b
		rl b
		rl b
		ret
		PLY_AKG_S_OR_H_NEXTBYTE rl b
		jr c,PLY_AKG_S_OR_H_FORCEDPERIOD
		rl b
		jr nc,PLY_AKG_S_OR_H_AFTERARPEGGIO
		ld a,(hl)
		inc hl
		exx
		add a,e
		ld e,a
		exx
		PLY_AKG_S_OR_H_AFTERARPEGGIO rl b
		jr nc,PLY_AKG_S_OR_H_AFTERPITCH
		ld a,(hl)
		inc hl
		exx
		add a,l
		ld l,a
		exx
		ld a,(hl)
		inc hl
		exx
		adc a,h
		ld h,a
		exx
		PLY_AKG_S_OR_H_AFTERPITCH exx
		ex de,hl
		add hl,hl
		ld bc,PLY_AKG_PERIODTABLE
		add hl,bc
		ld a,(hl)
		inc hl
		ld h,(hl)
		ld l,a
		add hl,de
		exx
		ret
		PLY_AKG_S_OR_H_FORCEDPERIOD ld a,(hl)
		inc hl
		exx
		ld l,a
		exx
		ld a,(hl)
		inc hl
		exx
		ld h,a
		exx
		rl b
		rl b
		ret
		PLY_AKG_STOH_HTOS_SANDH_COMMON ld e,16
		rra
		jr nc,PLY_AKG_SHOHS_AFTERRETRIG
		ld c,a
		ld a,iyl
		or a
		jr nz,PLY_AKG_SHOHS_RETRIGEND
		dec a
		ld (PLY_AKG_RETRIG+1),a
		PLY_AKG_SHOHS_RETRIGEND ld a,c
		PLY_AKG_SHOHS_AFTERRETRIG and 7
		add a,8
		ld (PLY_AKG_PSGREG13_INSTR+1),a
		rl b
		jr nc,PLY_AKG_SHOHS_AFTERNOISE
		ld a,(hl)
		inc hl
		ld (PLY_AKG_PSGREG6),a
		res 5,d
		PLY_AKG_SHOHS_AFTERNOISE ld c,(hl)
		ld b,c
		inc hl
		rl b
		call PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD
		ld a,c
		rla
		rla
		and 28
		ret
		PLY_AKG_EFFECTTABLE dw PLY_AKG_EFFECT_RESETFULLVOLUME
		dw PLY_AKG_EFFECT_RESET
		dw PLY_AKG_EFFECT_VOLUME
		dw PLY_AKG_EFFECT_ARPEGGIOTABLE
		dw PLY_AKG_EFFECT_ARPEGGIOTABLESTOP
		dw PLY_AKG_EFFECT_PITCHTABLE
		dw PLY_AKG_EFFECT_PITCHTABLESTOP
		dw PLY_AKG_EFFECT_VOLUMESLIDE
		dw PLY_AKG_EFFECT_VOLUMESLIDESTOP
		dw PLY_AKG_EFFECT_PITCHUP
		dw PLY_AKG_EFFECT_PITCHDOWN
		dw PLY_AKG_EFFECT_PITCHSTOP
		dw PLY_AKG_EFFECT_GLIDEWITHNOTE
		dw PLY_AKG_EFFECT_GLIDE_READSPEED
		dw PLY_AKG_EFFECT_LEGATO
		dw PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED
		dw PLY_AKG_EFFECT_FORCEARPEGGIOSPEED
		dw PLY_AKG_EFFECT_FORCEPITCHSPEED
		PLY_AKG_EFFECT_RESETFULLVOLUME xor a
		jr PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING
		PLY_AKG_EFFECT_RESET ld a,(de)
		inc de
		PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING ld (iy-123),a
		xor a
		ld (iy-26),a
		ld (iy-25),a
		ld a,183
		ld (iy-24),a
		ld (iy-52),a
		ld (iy-91),a
		ld (iy-122),a
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_VOLUME ld a,(de)
		inc de
		ld (iy-123),a
		ld (iy-122),183
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_ARPEGGIOTABLE ld a,(de)
		inc de
		ld l,a
		ld h,0
		add hl,hl
		PLY_AKG_ARPEGGIOSTABLE ld bc,0
		add hl,bc
		ld c,(hl)
		inc hl
		ld b,(hl)
		inc hl
		ld a,(bc)
		inc bc
		ld (iy+61),a
		ld (iy+62),a
		ld (iy-87),c
		ld (iy-86),b
		ld (iy+63),c
		ld (iy+64),b
		ld (iy-91),55
		xor a
		ld (iy-68),a
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_ARPEGGIOTABLESTOP ld (iy-91),183
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_PITCHTABLE ld a,(de)
		inc de
		ld l,a
		ld h,0
		add hl,hl
		PLY_AKG_PITCHESTABLE ld bc,0
		add hl,bc
		ld c,(hl)
		inc hl
		ld b,(hl)
		inc hl
		ld a,(bc)
		inc bc
		ld (iy+65),a
		ld (iy+66),a
		ld (iy-48),c
		ld (iy-47),b
		ld (iy+67),c
		ld (iy+68),b
		ld (iy-52),55
		xor a
		ld (iy-39),a
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_PITCHTABLESTOP ld (iy-52),183
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_VOLUMESLIDE ld a,(de)
		inc de
		ld (iy-118),a
		ld a,(de)
		inc de
		ld (iy-117),a
		ld (iy-122),55
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_VOLUMESLIDESTOP ld (iy-122),183
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_PITCHDOWN ld (iy-15),0
		ld (iy-14),9
		ld (iy-11),198
		ld (iy-4),35
		PLY_AKG_EFFECT_PITCHUPDOWN_COMMON ld (iy-24),55
		ld (iy+1),0
		ld a,(de)
		inc de
		ld (iy-10),a
		ld a,(de)
		inc de
		ld (iy-18),a
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_PITCHUP ld (iy-15),237
		ld (iy-14),66
		ld (iy-11),214
		ld (iy-4),43
		jr PLY_AKG_EFFECT_PITCHUPDOWN_COMMON
		PLY_AKG_EFFECT_PITCHSTOP ld (iy-24),183
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_GLIDEWITHNOTE ld a,(de)
		inc de
		ld (PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE+1),de
		add a,a
		ld l,a
		ld h,0
		ld bc,PLY_AKG_PERIODTABLE
		add hl,bc
		ld sp,hl
		pop de
		ld (iy+29),e
		ld (iy+30),d
		ld a,(ix+4)
		add a,a
		ld l,a
		ld h,0
		add hl,bc
		ld sp,hl
		pop hl
		ld c,(iy-26)
		ld b,(iy-25)
		add hl,bc
		or a
		sbc hl,de
		PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE ld de,0
		jr c,PLY_AKG_EFFECT_GLIDE_PITCHDOWN
		ld (iy+1),1
		ld (iy-15),237
		ld (iy-14),66
		ld (iy-11),214
		ld (iy-4),43
		PLY_AKG_EFFECT_GLIDE_READSPEED
		PLY_AKG_EFFECT_GLIDESPEED ld a,(de)
		inc de
		ld (iy-10),a
		ld a,(de)
		inc de
		ld (iy-18),a
		ld a,55
		ld (iy-24),a
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_GLIDE_PITCHDOWN ld (iy+1),2
		ld (iy-15),0
		ld (iy-14),9
		ld (iy-11),198
		ld (iy-4),35
		jr PLY_AKG_EFFECT_GLIDE_READSPEED
		PLY_AKG_EFFECT_LEGATO ld a,(de)
		inc de
		ld (ix+4),a
		ld a,183
		ld (iy-24),a
		xor a
		ld (iy-26),a
		ld (iy-25),a
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED ld a,(de)
		inc de
		ld (ix+27),a
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_FORCEARPEGGIOSPEED ld a,(de)
		inc de
		ld (iy+61),a
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EFFECT_FORCEPITCHSPEED ld a,(de)
		inc de
		ld (iy+65),a
		jp PLY_AKG_CHANNEL_RE_EFFECTRETURN
		PLY_AKG_EVENT db 0
		PLY_AKG_PERIODTABLE dw 6778
		dw 6398
		dw 6039
		dw 5700
		dw 5380
		dw 5078
		dw 4793
		dw 4524
		dw 4270
		dw 4030
		dw 3804
		dw 3591
		dw 3389
		dw 3199
		dw 3019
		dw 2850
		dw 2690
		dw 2539
		dw 2397
		dw 2262
		dw 2135
		dw 2015
		dw 1902
		dw 1795
		dw 1695
		dw 1599
		dw 1510
		dw 1425
		dw 1345
		dw 1270
		dw 1198
		dw 1131
		dw 1068
		dw 1008
		dw 951
		dw 898
		dw 847
		dw 800
		dw 755
		dw 712
		dw 673
		dw 635
		dw 599
		dw 566
		dw 534
		dw 504
		dw 476
		dw 449
		dw 424
		dw 400
		dw 377
		dw 356
		dw 336
		dw 317
		dw 300
		dw 283
		dw 267
		dw 252
		dw 238
		dw 224
		dw 212
		dw 200
		dw 189
		dw 178
		dw 168
		dw 159
		dw 150
		dw 141
		dw 133
		dw 126
		dw 119
		dw 112
		dw 106
		dw 100
		dw 94
		dw 89
		dw 84
		dw 79
		dw 75
		dw 71
		dw 67
		dw 63
		dw 59
		dw 56
		dw 53
		dw 50
		dw 47
		dw 45
		dw 42
		dw 40
		dw 37
		dw 35
		dw 33
		dw 31
		dw 30
		dw 28
		dw 26
		dw 25
		dw 24
		dw 22
		dw 21
		dw 20
		dw 19
		dw 18
		dw 17
		dw 16
		dw 15
		dw 14
		dw 13
		dw 12
		dw 12
		dw 11
		dw 11
		dw 10
		dw 9
		dw 9
		dw 8
		dw 8
		dw 7
		dw 7
		dw 7
		dw 6
		dw 6
		dw 6
		dw 5
		dw 5
		dw 5
		dw 4
#line 14 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/MusicPlayer.zxbas"
SKIP_MUSIC:
#line 5285 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/MusicPlayer.zxbas"
_PlayerHolder__leave:
	ld sp, ix
	pop ix
	ret
_InitMaryMusic:
	push ix
	ld ix, 0
	add ix, sp
	call _PlayerHolder
#line 26 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/MusicPlayer.zxbas"
		push af
		push bc
		push de
		push hl
		push ix
		push iy
		exx
		ex af, af'
		push af
		push bc
		push de
		push hl
		ld hl, MARYLAMB_START
		xor a
		call PLY_AKG_INIT
		pop hl
		pop de
		pop bc
		pop af
		ex af, af'
		exx
		pop iy
		pop ix
		pop hl
		pop de
		pop bc
		pop af
#line 65 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/MusicPlayer.zxbas"
_InitMaryMusic__leave:
	ld sp, ix
	pop ix
	ret
_InitNextlevelMusic:
	push ix
	ld ix, 0
	add ix, sp
	call _PlayerHolder
#line 71 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/MusicPlayer.zxbas"
		push af
		push bc
		push de
		push hl
		push ix
		push iy
		exx
		ex af, af'
		push af
		push bc
		push de
		push hl
		ld hl, NEXTLEVEL_START
		xor a
		call PLY_AKG_INIT
		pop hl
		pop de
		pop bc
		pop af
		ex af, af'
		exx
		pop iy
		pop ix
		pop hl
		pop de
		pop bc
		pop af
#line 110 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/MusicPlayer.zxbas"
_InitNextlevelMusic__leave:
	ld sp, ix
	pop ix
	ret
_InitGameoverMusic:
	push ix
	ld ix, 0
	add ix, sp
	call _PlayerHolder
#line 116 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/MusicPlayer.zxbas"
		push af
		push bc
		push de
		push hl
		push ix
		push iy
		exx
		ex af, af'
		push af
		push bc
		push de
		push hl
		ld hl, GAMEOVER_START
		xor a
		call PLY_AKG_INIT
		pop hl
		pop de
		pop bc
		pop af
		ex af, af'
		exx
		pop iy
		pop ix
		pop hl
		pop de
		pop bc
		pop af
#line 155 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/MusicPlayer.zxbas"
_InitGameoverMusic__leave:
	ld sp, ix
	pop ix
	ret
_PlayMusic:
	push ix
	ld ix, 0
	add ix, sp
#line 160 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/MusicPlayer.zxbas"
		ld a, 1
		ld (_enableMusic), a
#line 165 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/MusicPlayer.zxbas"
_PlayMusic__leave:
	ld sp, ix
	pop ix
	ret
_StopMusic:
	push ix
	ld ix, 0
	add ix, sp
#line 170 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/MusicPlayer.zxbas"
		push ix
		ld a, 0
		ld (_enableMusic), a
		di
		call PLY_AKG_STOP
		ei
		pop ix
#line 182 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/MusicPlayer.zxbas"
_StopMusic__leave:
	ld sp, ix
	pop ix
	ret
_DoPause:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 1
	dec hl
	ld (_counter), hl
__LABEL19:
	ld l, (ix+4)
	ld h, (ix+5)
	ex de, hl
	ld hl, (_counter)
	or a
	sbc hl, de
	jp c, __LABEL19
_DoPause__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_InstallHandler:
#line 16 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/InterruptInstaller.zxbas"
		ld hl, INT_HANDLER
		ld (_intHandlerAddress), hl
		di
		ld a, $fe
		ld i, a
		im 2
		ei
		ret
INT_HANDLER:
		push af
		push hl
		ld hl, (_counter)
		inc hl
		ld (_counter), hl
		ld a, (_enableMusic)
		and a
		jp z, INT_NO_MUSIC
		push bc
		push de
		push ix
		push iy
		exx
		ex af, af'
		push af
		push bc
		push de
		push hl
		call PLY_AKG_PLAY
		pop hl
		pop de
		pop bc
		pop af
		ex af, af'
		exx
		pop iy
		pop ix
		pop de
		pop bc
INT_NO_MUSIC:
		pop hl
		pop af
		ei
		ret
#line 83 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/InterruptInstaller.zxbas"
_InstallHandler__leave:
	ret
_MultiKeys:
#line 41 "C:/zxbasic/src/arch/zx48k/library/keys.bas"
		ld a, h
		in a, (0FEh)
		cpl
		and l
#line 48 "C:/zxbasic/src/arch/zx48k/library/keys.bas"
_MultiKeys__leave:
	ret
_InitFastRnd:
#line 3 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/FastRND.zxbas"
		PROC
		LOCAL NOT_EMPTY_L, TEST_H, NOT_EMPTY_H, LOAD_SEED
		ld hl, ($5C78)
		ld a, l
		and $FF
		jp nz, NOT_EMPTY_L
		ld a, r
		ld l, a
		jp TEST_H
NOT_EMPTY_L:
		ld a, r
		xor l
		ld l, a
TEST_H:
		ld h, a
		and $FF
		jp nz, NOT_EMPTY_H
		ld a, r
		ld h, a
		jp LOAD_SEED
NOT_EMPTY_H:
		ld a, r
		xor h
		ld h, a
LOAD_SEED:
		ld      (FAST_RAND + 1),hl
		ENDP
#line 33 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/FastRND.zxbas"
_InitFastRnd__leave:
	ret
_FastRnd:
#line 37 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/FastRND.zxbas"
FAST_RAND:
		ld hl,$FFFF
		ld a,r
		ld d,a
		ld e,(hl)
		add hl,de
		add a,l
		xor h
		ld (FAST_RAND + 1),hl
#line 52 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/FastRND.zxbas"
_FastRnd__leave:
	ret
_PlayFX:
#line 2 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/BeepFX.zxbas"
play:
		ld hl,sfxData
		di
		push ix
		push iy
		ld b,0
		ld c,a
		add hl,bc
		add hl,bc
		ld e,(hl)
		inc hl
		ld d,(hl)
		push de
		pop ix
		ld a,(23624)
		rra
		rra
		rra
		and 7
		ld (sfxRoutineToneBorder  +1),a
		ld (sfxRoutineNoiseBorder +1),a
		ld (sfxRoutineSampleBorder+1),a
readData:
		ld a,(ix+0)
		ld c,(ix+1)
		ld b,(ix+2)
		ld e,(ix+3)
		ld d,(ix+4)
		push de
		pop iy
		dec a
		jr z,sfxRoutineTone
		dec a
		jr z,sfxRoutineNoise
		dec a
		jr z,sfxRoutineSample
		pop iy
		pop ix
		ei
		ret
sfxRoutineSample:
		ex de,hl
sfxRS0:
		ld e,8
		ld d,(hl)
		inc hl
sfxRS1:
		ld a,(ix+5)
sfxRS2:
		dec a
		jr nz,sfxRS2
		rl d
		sbc a,a
		and 16
sfxRoutineSampleBorder:
		or 0
		out (254),a
		dec e
		jr nz,sfxRS1
		dec bc
		ld a,b
		or c
		jr nz,sfxRS0
		ld c,6
nextData:
		add ix,bc
		jr readData
sfxRoutineTone:
		ld e,(ix+5)
		ld d,(ix+6)
		ld a,(ix+9)
		ld (sfxRoutineToneDuty+1),a
		ld hl,0
sfxRT0:
		push bc
		push iy
		pop bc
sfxRT1:
		add hl,de
		ld a,h
sfxRoutineToneDuty:
		cp 0
		sbc a,a
		and 16
sfxRoutineToneBorder:
		or 0
		out (254),a
		dec bc
		ld a,b
		or c
		jr nz,sfxRT1
		ld a,(sfxRoutineToneDuty+1)
		add a,(ix+10)
		ld (sfxRoutineToneDuty+1),a
		ld c,(ix+7)
		ld b,(ix+8)
		ex de,hl
		add hl,bc
		ex de,hl
		pop bc
		dec bc
		ld a,b
		or c
		jr nz,sfxRT0
		ld c,11
		jr nextData
sfxRoutineNoise:
		ld e,(ix+5)
		ld d,1
		ld h,d
		ld l,d
sfxRN0:
		push bc
		push iy
		pop bc
sfxRN1:
		ld a,(hl)
		and 16
sfxRoutineNoiseBorder:
		or 0
		out (254),a
		dec d
		jr nz,sfxRN2
		ld d,e
		inc hl
		ld a,h
		and 31
		ld h,a
sfxRN2:
		dec bc
		ld a,b
		or c
		jr nz,sfxRN1
		ld a,e
		add a,(ix+6)
		ld e,a
		pop bc
		dec bc
		ld a,b
		or c
		jr nz,sfxRN0
		ld c,7
		jr nextData
sfxData:
SoundEffectsData:
		defw SoundEffect0Data
SoundEffect0Data:
		defb 1
		defw 3,1000,350,0,2688
		defb 1
		defw 10,500,550,122,2688
		defb 0
#line 197 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/BeepFX.zxbas"
_PlayFX__leave:
	ret
_InitGFXLib:
	push ix
	ld ix, 0
	add ix, sp
#line 1660 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		call INIT_GFX_LIB
#line 1666 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
_InitGFXLib__leave:
	ld sp, ix
	pop ix
	ret
_RenderFrame:
	push ix
	ld ix, 0
	add ix, sp
#line 1680 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		call RENDER_FRAME
#line 1686 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
_RenderFrame__leave:
	ld sp, ix
	pop ix
	ret
_Create2x2Sprite:
#line 1765 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		push ix
		push iy
		call CREATE_2x2_SPRITE
		pop iy
		pop ix
#line 1775 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
_Create2x2Sprite__leave:
	ret
_Draw2x2Sprite:
#line 1779 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		exx
		push hl
		exx
		push ix
		push iy
		ld c, d
		call DRAW_2x2_SPRITE
		pop iy
		pop ix
#line 1798 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
_Draw2x2Sprite__leave:
	ret
_CancelOps:
#line 1802 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		xor a
		ld (CURRENT_DRAW_COUNT), a
		ld (CURRENT_CLEAR_COUNT), a
#line 1808 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
_CancelOps__leave:
	ret
_SetTileset:
#line 1827 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		call SET_TILEMAP
#line 1831 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
_SetTileset__leave:
	ret
_SetTile:
#line 1835 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
		exx
		pop hl
		exx
		pop bc
		pop de
		pop hl
		exx
		push hl
		exx
		call SET_TILE
#line 1848 "C:/Users/geniw/source/repos/PrettySheep/PrettySheep128/ZxBasicFiles/GuSprites.zxbas"
_SetTile__leave:
	ret
_ShowIntro:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc hl
	push hl
	ld hl, 13
	push hl
	ld hl, 38
	push hl
	ld a, 48
	call _SetTile
	ld hl, 1
	push hl
	ld hl, 15
	push hl
	ld hl, 39
	push hl
	ld a, 39
	call _SetTile
	ld hl, 1
	push hl
	ld hl, 16
	push hl
	ld hl, 39
	push hl
	ld a, 37
	call _SetTile
	ld hl, 1
	push hl
	ld hl, 17
	push hl
	ld hl, 39
	push hl
	ld a, 39
	call _SetTile
	ld hl, 1
	push hl
	ld hl, 18
	push hl
	ld hl, 39
	push hl
	ld a, 38
	call _SetTile
	ld (ix-2), 0
	jp __LABEL21
__LABEL24:
	ld a, (ix-2)
	add a, a
	inc a
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _introScreen
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-4), l
	ld (ix-3), h
	ld (ix-1), 0
	jp __LABEL26
__LABEL29:
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld a, (ix-1)
	ld b, a
	ld hl, 32768
	or a
	jr z, __LABEL373
__LABEL372:
	srl h
	rr l
	djnz __LABEL372
__LABEL373:
	ex de, hl
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL30
	ld a, (ix-2)
	add a, (ix+5)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld hl, 38
	push hl
	ld a, 47
	call _SetTile
__LABEL30:
	inc (ix-1)
__LABEL26:
	ld a, 15
	cp (ix-1)
	jp nc, __LABEL29
	ld a, (ix-2)
	add a, a
	add a, 2
	ld l, a
	ld h, 0
	dec hl
	push hl
	ld hl, _introScreen
	call __ARRAY
	ld e, (hl)
	inc hl
	ld d, (hl)
	ex de, hl
	ld (ix-4), l
	ld (ix-3), h
	ld (ix-1), 0
	jp __LABEL33
__LABEL36:
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld a, (ix-1)
	ld b, a
	ld hl, 32768
	or a
	jr z, __LABEL375
__LABEL374:
	srl h
	rr l
	djnz __LABEL374
__LABEL375:
	ex de, hl
	pop hl
	call __BAND16
	ld a, h
	or l
	jp z, __LABEL37
	ld a, (ix-2)
	add a, (ix+5)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	add a, 16
	ld l, a
	push hl
	ld hl, 38
	push hl
	ld a, 47
	call _SetTile
__LABEL37:
	inc (ix-1)
__LABEL33:
	ld a, 15
	cp (ix-1)
	jp nc, __LABEL36
	inc (ix-2)
__LABEL21:
	ld a, 15
	cp (ix-2)
	jp nc, __LABEL24
	ld a, 23
	push af
	xor a
	call PRINT_AT
	ld a, 1
	call BOLD_TMP
	ld hl, __LABEL40
	xor a
	call __PRINTSTR
	ld a, 2
	call INK_TMP
	ld hl, __LABEL41
	xor a
	call __PRINTSTR
	ld a, 3
	call INK_TMP
	ld hl, __LABEL42
	xor a
	call __PRINTSTR
	ld a, 1
	call INK_TMP
	ld hl, __LABEL43
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 19
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL44
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 20
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL45
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 21
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL46
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 22
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL47
	xor a
	call __PRINTSTR
	call PRINT_EOL
	ld a, 23
	push af
	ld a, 24
	call PRINT_AT
	ld hl, __LABEL48
	xor a
	call __PRINTSTR
	call PRINT_EOL
_ShowIntro__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_PadString:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	call __STRLEN
	ld a, l
	ld (ix-1), a
	sub (ix+9)
	ccf
	jp nc, __LABEL50
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	ld hl, 0
	push hl
	ld a, (ix+9)
	ld l, a
	dec hl
	push hl
	xor a
	call __STRSLICE
	jp _PadString__leave
__LABEL50:
	ld l, (ix+4)
	ld h, (ix+5)
	ld d, h
	ld e, l
	ld bc, -4
	call __PSTORE_STR
	ld (ix-2), 1
	jp __LABEL51
__LABEL54:
	ld l, (ix+6)
	ld h, (ix+7)
	push hl
	ld l, (ix-4)
	ld h, (ix-3)
	ex de, hl
	pop hl
	call __ADDSTR
	ld d, h
	ld e, l
	ld bc, -4
	call __PSTORE_STR2
	inc (ix-2)
__LABEL51:
	ld h, (ix-2)
	ld a, (ix+9)
	sub (ix-1)
	cp h
	jp nc, __LABEL54
	ld l, (ix-4)
	ld h, (ix-3)
	call __LOADSTR
_PadString__leave:
	ex af, af'
	exx
	ld l, (ix+4)
	ld h, (ix+5)
	call __MEM_FREE
	ld l, (ix+6)
	ld h, (ix+7)
	call __MEM_FREE
	ld l, (ix-4)
	ld h, (ix-3)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_PrintScore:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, 5
	push af
	ld hl, __LABEL56
	call __LOADSTR
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	ld de, 0
	call __U32TOFREG
	call __STR_FAST
	push hl
	call _PadString
	ld d, h
	ld e, l
	ld bc, -2
	call __PSTORE_STR2
	ld hl, 23
	push hl
	ld a, (ix+7)
	ld l, a
	push hl
	ld hl, 34
	push hl
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld hl, 0
	push hl
	push hl
	xor a
	call __STRSLICE
	ld a, 1
	call __ASC
	sub 11
	call _SetTile
	ld hl, 23
	push hl
	ld a, (ix+7)
	inc a
	ld l, a
	push hl
	ld hl, 34
	push hl
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld hl, 1
	push hl
	push hl
	xor a
	call __STRSLICE
	ld a, 1
	call __ASC
	sub 11
	call _SetTile
	ld hl, 23
	push hl
	ld a, (ix+7)
	add a, 2
	ld l, a
	push hl
	ld hl, 34
	push hl
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld hl, 2
	push hl
	push hl
	xor a
	call __STRSLICE
	ld a, 1
	call __ASC
	sub 11
	call _SetTile
	ld hl, 23
	push hl
	ld a, (ix+7)
	add a, 3
	ld l, a
	push hl
	ld hl, 34
	push hl
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld hl, 3
	push hl
	push hl
	xor a
	call __STRSLICE
	ld a, 1
	call __ASC
	sub 11
	call _SetTile
	ld hl, 23
	push hl
	ld a, (ix+7)
	add a, 4
	ld l, a
	push hl
	ld hl, 34
	push hl
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld hl, 4
	push hl
	push hl
	xor a
	call __STRSLICE
	ld a, 1
	call __ASC
	sub 11
	call _SetTile
_PrintScore__leave:
	ex af, af'
	exx
	ld l, (ix-2)
	ld h, (ix-1)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_CreateBackground:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push ix
	pop hl
	ld bc, -3
	add hl, bc
	ex de, hl
	ld hl, __LABEL376
	ld bc, 1
	ldir
	push ix
	pop hl
	ld bc, -4
	add hl, bc
	ex de, hl
	ld hl, __LABEL377
	ld bc, 1
	ldir
	ld (ix-2), 0
	jp __LABEL57
__LABEL60:
	ld (ix-1), 0
	jp __LABEL62
__LABEL65:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld hl, 79
	push hl
	xor a
	call _SetTile
	inc (ix-1)
__LABEL62:
	ld a, 31
	cp (ix-1)
	jp nc, __LABEL65
	inc (ix-2)
__LABEL57:
	ld a, 7
	cp (ix-2)
	jp nc, __LABEL60
	ld (ix-2), 8
	jp __LABEL67
__LABEL70:
	ld (ix-1), 0
	jp __LABEL72
__LABEL75:
	ld a, (ix-1)
	cp 10
	sbc a, a
	ld d, a
	ld a, 21
	cp (ix-1)
	sbc a, a
	or d
	jp z, __LABEL77
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld hl, 34
	push hl
	ld a, 27
	call _SetTile
	jp __LABEL76
__LABEL77:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld hl, 39
	push hl
	xor a
	call _SetTile
__LABEL76:
	inc (ix-1)
__LABEL72:
	ld a, 31
	cp (ix-1)
	jp nc, __LABEL75
	inc (ix-2)
__LABEL67:
	ld a, 13
	cp (ix-2)
	jp nc, __LABEL70
	ld (ix-1), 0
	jp __LABEL79
__LABEL82:
	ld a, (ix-1)
	ld h, 5
	call __MODU8_FAST
	or a
	jp nz, __LABEL84
	ld a, (ix-4)
	sub 23
	jp nz, __LABEL86
	ld (ix-4), 22
	jp __LABEL87
__LABEL86:
	ld (ix-4), 23
__LABEL87:
	ld a, (ix-4)
	push af
	ld a, 25
	push af
	ld a, (ix-3)
	push af
	ld a, (ix-1)
	push af
	call _DrawTerrainStack
	ld a, (ix-4)
	push af
	ld a, 26
	push af
	ld a, (ix-3)
	push af
	ld a, 31
	sub (ix-1)
	push af
	call _DrawTerrainStack
	dec (ix-3)
	jp __LABEL83
__LABEL84:
	ld a, (ix-4)
	push af
	ld a, 24
	push af
	ld a, (ix-3)
	push af
	ld a, (ix-1)
	push af
	call _DrawTerrainStack
	ld a, (ix-4)
	push af
	ld a, 24
	push af
	ld a, (ix-3)
	push af
	ld a, 31
	sub (ix-1)
	push af
	call _DrawTerrainStack
__LABEL83:
	inc (ix-1)
__LABEL79:
	ld a, 15
	cp (ix-1)
	jp nc, __LABEL82
	ld hl, 5
	push hl
	ld hl, 15
	push hl
	ld hl, 79
	push hl
	ld a, 12
	call _SetTile
	ld hl, 5
	push hl
	ld hl, 16
	push hl
	ld hl, 79
	push hl
	ld a, 13
	call _SetTile
	ld hl, 4
	push hl
	ld hl, 15
	push hl
	ld hl, 74
	push hl
	ld a, 10
	call _SetTile
	ld hl, 4
	push hl
	ld hl, 16
	push hl
	ld hl, 74
	push hl
	ld a, 11
	call _SetTile
	ld hl, 3
	push hl
	ld hl, 16
	push hl
	ld hl, 79
	push hl
	ld a, 14
	call _SetTile
	ld a, 5
	push af
	ld a, 7
	push af
	call _DrawTree
	ld a, 4
	push af
	ld a, 19
	push af
	call _DrawTree
	ld a, 6
	push af
	ld a, 29
	push af
	call _DrawTree
	ld (ix-2), 8
	jp __LABEL88
__LABEL91:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld hl, 10
	push hl
	ld hl, 39
	push hl
	ld a, 4
	call _SetTile
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld hl, 21
	push hl
	ld hl, 39
	push hl
	ld a, 4
	call _SetTile
	inc (ix-2)
__LABEL88:
	ld a, 12
	cp (ix-2)
	jp nc, __LABEL91
	ld (ix-1), 0
	jp __LABEL93
__LABEL96:
	ld (ix-2), 14
	jp __LABEL98
__LABEL101:
	ld a, (ix-2)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld hl, 39
	push hl
	xor a
	call _SetTile
	inc (ix-2)
__LABEL98:
	ld a, 23
	cp (ix-2)
	jp nc, __LABEL101
	inc (ix-1)
__LABEL93:
	ld a, 31
	cp (ix-1)
	jp nc, __LABEL96
	ld (ix-1), 0
	jp __LABEL103
__LABEL106:
	ld hl, 13
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld hl, 39
	push hl
	ld a, 3
	call _SetTile
	inc (ix-1)
__LABEL103:
	ld a, 31
	cp (ix-1)
	jp nc, __LABEL106
	ld (ix-1), 14
	jp __LABEL108
__LABEL111:
	ld hl, 13
	push hl
	ld a, (ix-1)
	ld l, a
	push hl
	ld hl, 38
	push hl
	ld a, 5
	call _SetTile
	inc (ix-1)
__LABEL108:
	ld a, 17
	cp (ix-1)
	jp nc, __LABEL111
	ld a, 19
	push af
	ld a, 4
	push af
	call _DrawFlower
	ld a, 21
	push af
	ld a, 12
	push af
	call _DrawFlower
	ld a, 20
	push af
	ld a, 19
	push af
	call _DrawFlower
	ld a, 17
	push af
	ld a, 28
	push af
	call _DrawFlower
	ld a, 3
	push af
	ld a, 1
	push af
	call _DrawSun
	ld a, 1
	push af
	ld a, 6
	push af
	call _DrawCloud
	xor a
	push af
	ld a, 25
	push af
	call _DrawCloud
	ld hl, 23
	push hl
	ld hl, 2
	push hl
	ld hl, 38
	push hl
	ld a, 34
	call _SetTile
	ld hl, 23
	push hl
	ld hl, 3
	push hl
	ld hl, 38
	push hl
	ld a, 35
	call _SetTile
	ld hl, 23
	push hl
	ld hl, 4
	push hl
	ld hl, 38
	push hl
	ld a, 33
	call _SetTile
	ld hl, 23
	push hl
	ld hl, 5
	push hl
	ld hl, 34
	push hl
	ld a, 28
	call _SetTile
	ld hl, 23
	push hl
	ld hl, 6
	push hl
	ld hl, 34
	push hl
	ld a, 29
	call _SetTile
	ld hl, 23
	push hl
	ld hl, 7
	push hl
	ld hl, 34
	push hl
	ld a, 30
	call _SetTile
	ld hl, 23
	push hl
	ld hl, 8
	push hl
	ld hl, 34
	push hl
	ld a, 31
	call _SetTile
	ld hl, 23
	push hl
	ld hl, 9
	push hl
	ld hl, 34
	push hl
	ld a, 32
	call _SetTile
	ld hl, 23
	push hl
	ld hl, 10
	push hl
	ld hl, 34
	push hl
	ld a, 36
	call _SetTile
	ld a, 11
	push af
	ld hl, (_hiScore)
	push hl
	call _PrintScore
	ld hl, 23
	push hl
	ld hl, 19
	push hl
	ld hl, 34
	push hl
	ld a, 28
	call _SetTile
	ld hl, 23
	push hl
	ld hl, 20
	push hl
	ld hl, 34
	push hl
	ld a, 29
	call _SetTile
	ld hl, 23
	push hl
	ld hl, 21
	push hl
	ld hl, 34
	push hl
	ld a, 30
	call _SetTile
	ld hl, 23
	push hl
	dec hl
	push hl
	ld hl, 34
	push hl
	ld a, 31
	call _SetTile
	ld hl, 23
	push hl
	push hl
	ld hl, 34
	push hl
	ld a, 32
	call _SetTile
	ld hl, 23
	push hl
	inc hl
	push hl
	ld hl, 34
	push hl
	ld a, 36
	call _SetTile
	ld a, 25
	push af
	ld hl, (_score)
	push hl
	call _PrintScore
_CreateBackground__leave:
	ld sp, ix
	pop ix
	ret
_DrawCloud:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 79
	push hl
	ld a, 20
	call _SetTile
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	inc a
	ld l, a
	push hl
	ld hl, 79
	push hl
	ld a, 21
	call _SetTile
_DrawCloud__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_DrawSun:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 78
	push hl
	ld a, 16
	call _SetTile
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	inc a
	ld l, a
	push hl
	ld hl, 78
	push hl
	ld a, 17
	call _SetTile
	ld a, (ix+7)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 78
	push hl
	ld a, 18
	call _SetTile
	ld a, (ix+7)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	inc a
	ld l, a
	push hl
	ld hl, 78
	push hl
	ld a, 19
	call _SetTile
_DrawSun__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_EraseSun:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 79
	push hl
	xor a
	call _SetTile
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	inc a
	ld l, a
	push hl
	ld hl, 79
	push hl
	xor a
	call _SetTile
	ld a, (ix+7)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 79
	push hl
	xor a
	call _SetTile
	ld a, (ix+7)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	inc a
	ld l, a
	push hl
	ld hl, 79
	push hl
	xor a
	call _SetTile
_EraseSun__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_DrawFlower:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 38
	push hl
	ld a, 1
	call _SetTile
	ld a, (ix+7)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 34
	push hl
	ld a, 2
	call _SetTile
_DrawFlower__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_DrawTree:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 76
	push hl
	ld a, 6
	call _SetTile
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	inc a
	ld l, a
	push hl
	ld hl, 76
	push hl
	ld a, 7
	call _SetTile
	ld a, (ix+7)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 74
	push hl
	ld a, 8
	call _SetTile
	ld a, (ix+7)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	inc a
	ld l, a
	push hl
	ld hl, 74
	push hl
	ld a, 9
	call _SetTile
_DrawTree__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_DrawTerrainStack:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+7)
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 76
	push hl
	ld a, (ix+9)
	call _SetTile
	ld a, (ix+7)
	inc a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 98
	push hl
	ld a, (ix+11)
	call _SetTile
	ld a, (ix+5)
	cp 10
	sbc a, a
	ld d, a
	ld a, 21
	cp (ix+5)
	sbc a, a
	or d
	jp z, __LABEL113
	ld a, (ix+7)
	add a, 2
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 34
	push hl
	ld a, 27
	call _SetTile
	jp _DrawTerrainStack__leave
__LABEL113:
	ld a, (ix+7)
	add a, 2
	ld l, a
	ld h, 0
	push hl
	ld a, (ix+5)
	ld l, a
	push hl
	ld hl, 39
	push hl
	xor a
	call _SetTile
_DrawTerrainStack__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
_UpdateSheeps:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL115
__LABEL118:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld a, (hl)
	dec a
	jp nz, _UpdateSheeps__leave
	ld a, (ix-1)
	push af
	call _UpdateSheep
	jp __LABEL119
__LABEL120:
	jp _UpdateSheeps__leave
__LABEL119:
	inc (ix-1)
__LABEL115:
	ld a, 8
	cp (ix-1)
	jp nc, __LABEL118
_UpdateSheeps__leave:
	ld sp, ix
	pop ix
	ret
_CanMoveTo:
	push ix
	ld ix, 0
	add ix, sp
	ld l, (ix+6)
	ld h, (ix+7)
	ex de, hl
	ld hl, 27
	or a
	sbc hl, de
	jp nc, __LABEL123
	ld a, 1
	jp _CanMoveTo__leave
__LABEL123:
	ld l, (ix+6)
	ld h, (ix+7)
	ld de, 23
	or a
	sbc hl, de
	jp nc, __LABEL125
	ld l, (ix+4)
	ld h, (ix+5)
	ex de, hl
	ld hl, 21
	or a
	sbc hl, de
	jp nc, __LABEL127
	ld l, (ix+4)
	ld h, (ix+5)
	ld de, 39
	or a
	sbc hl, de
	jp nc, __LABEL127
	ld a, 1
	jp _CanMoveTo__leave
__LABEL127:
	xor a
	jp _CanMoveTo__leave
__LABEL125:
	ld l, (ix+4)
	ld h, (ix+5)
	ex de, hl
	ld hl, 27
	or a
	sbc hl, de
	jp nc, __LABEL131
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	inc hl
	inc hl
	push hl
	ld a, (_gateX)
	add a, a
	ld l, a
	ld h, 0
	ex de, hl
	pop hl
	or a
	sbc hl, de
	jp nc, __LABEL131
	ld a, 1
	jp _CanMoveTo__leave
__LABEL131:
	xor a
_CanMoveTo__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
_UpdateSheep:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -10
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 9
	ld d, h
	ld e, l
	inc de
	ldir
	ld hl, 1
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 4
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld hl, 5
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld a, (hl)
	ld (ix-5), a
	ld hl, 6
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld a, (hl)
	ld (ix-6), a
	ld a, (ix-1)
	srl a
	ld (ix-7), a
	ld a, (ix-2)
	srl a
	ld (ix-8), a
	ld a, (_trappedSheep)
	sub 1
	sbc a, a
	ld hl, (_spaceDown - 1)
	or a
	jr z, __LABEL378
	ld a, h
__LABEL378:
	or a
	jp z, __LABEL135
	ld h, (ix-7)
	ld a, (_girlX)
	sub 3
	cp h
	sbc a, a
	push af
	ld a, (ix-7)
	push af
	ld a, (_girlX)
	add a, 3
	ld h, a
	pop af
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL379
	ld a, h
__LABEL379:
	or a
	jp z, __LABEL135
	ld a, (ix-8)
	push af
	ld a, (_girlY)
	add a, 5
	ld h, a
	pop af
	cp h
	sbc a, a
	push af
	ld h, (ix-8)
	ld a, (_girlY)
	add a, 2
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL380
	ld a, h
__LABEL380:
	or a
	jp z, __LABEL135
	ld a, (ix+5)
	ld (_trappedSheep), a
__LABEL135:
	ld a, (_trappedSheep)
	sub (ix+5)
	jp nz, __LABEL140
	ld a, (_spaceDown)
	or a
	jp nz, __LABEL142
	xor a
	ld (_trappedSheep), a
	call _FastRnd
	and 7
	ld h, a
	ld a, 4
	sub h
	ld (ix-3), a
	call _FastRnd
	and 7
	ld h, a
	ld a, 4
	sub h
	ld (ix-4), a
	ld a, (ix-3)
	ld h, 1
	call __LTI8
	or a
	jp z, __LABEL145
	dec (ix-3)
__LABEL145:
	ld a, (ix-4)
	ld h, 1
	call __LTI8
	or a
	jp z, __LABEL147
	dec (ix-4)
__LABEL147:
	ld a, (ix-8)
	cp 26
	jp nc, __LABEL141
	ld hl, (_score)
	ld de, 10
	add hl, de
	ld (_score), hl
	ld a, 1
	ld (_updateScore), a
__LABEL149:
	jp __LABEL141
__LABEL142:
	ld a, (_girlX)
	add a, a
	ld (ix-1), a
	ld a, (_girlY)
	add a, a
	add a, 8
	ld (ix-2), a
	ld h, a
	ld a, 85
	cp h
	jp nc, __LABEL151
	ld (ix-2), 85
__LABEL151:
	ld a, (ix-6)
	sub 2
	jp nz, __LABEL152
	ld (ix-6), 0
	jp __LABEL153
__LABEL152:
	ld (ix-6), 2
__LABEL153:
	ld a, (ix-5)
	or a
	jp nz, __LABEL154
	ld (ix-5), 1
	jp __LABEL155
__LABEL154:
	ld (ix-5), 0
__LABEL155:
	ld a, (ix-5)
	push af
	ld hl, 5
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-6)
	push af
	ld hl, 6
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-1)
	push af
	ld hl, 1
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	srl a
	push af
	ld a, (ix-1)
	srl a
	push af
	ld a, (ix-5)
	inc a
	add a, (ix-6)
	call _Draw2x2Sprite
	jp _UpdateSheep__leave
__LABEL143:
	jp __LABEL141
__LABEL140:
	call _FastRnd
	cp 15
	jp nc, __LABEL157
	call _FastRnd
	and 7
	ld h, a
	ld a, 4
	sub h
	ld (ix-3), a
	call _FastRnd
	and 7
	ld h, a
	ld a, 4
	sub h
	ld (ix-4), a
	ld a, (ix-3)
	ld h, 1
	call __LTI8
	or a
	jp z, __LABEL159
	dec (ix-3)
__LABEL159:
	ld a, (ix-4)
	ld h, 1
	call __LTI8
	or a
	jp z, __LABEL157
	dec (ix-4)
__LABEL157:
	ld a, (ix-8)
	cp 27
	jp nc, __LABEL162
	ld h, (ix-7)
	ld a, (_girlX)
	sub 5
	cp h
	sbc a, a
	push af
	ld a, (ix-7)
	push af
	ld a, (_girlX)
	add a, 5
	ld h, a
	pop af
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL381
	ld a, h
__LABEL381:
	push af
	ld h, (ix-8)
	ld a, (_girlY)
	sub 5
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL382
	ld a, h
__LABEL382:
	push af
	ld a, (ix-8)
	push af
	ld a, (_girlY)
	add a, 5
	ld h, a
	pop af
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL383
	ld a, h
__LABEL383:
	or a
	jp z, __LABEL141
	ld (ix-4), 255
__LABEL165:
	jp __LABEL141
__LABEL162:
	cp 29
	jp nc, __LABEL166
	ld (ix-4), 1
	jp __LABEL141
__LABEL166:
	ld h, (ix-7)
	ld a, (_girlX)
	sub 5
	cp h
	jp nc, __LABEL141
	ld a, (ix-7)
	push af
	ld a, (_girlX)
	add a, 5
	ld h, a
	pop af
	cp h
	jp nc, __LABEL141
	ld h, (ix-8)
	ld a, (_girlY)
	sub 5
	cp h
	jp nc, __LABEL141
	ld a, (ix-8)
	push af
	ld a, (_girlY)
	add a, 5
	ld h, a
	pop af
	cp h
	jp nc, __LABEL141
	ld a, (ix-7)
	ld hl, (_girlX - 1)
	cp h
	jp nc, __LABEL176
	ld (ix-3), 254
	jp __LABEL141
__LABEL176:
	ld (ix-3), 2
__LABEL141:
	ld a, (ix-1)
	add a, (ix-3)
	ld (ix-7), a
	ld a, (ix-2)
	add a, (ix-4)
	ld (ix-8), a
	ld a, (ix-7)
	cp 2
	sbc a, a
	ld d, a
	ld a, 120
	cp (ix-7)
	sbc a, a
	or d
	jp z, __LABEL179
	ld a, (ix-3)
	neg
	ld (ix-3), a
	ld a, (ix-1)
	add a, (ix-3)
	ld (ix-7), a
	ld (ix-9), 1
__LABEL179:
	ld a, (ix-8)
	cp 28
	sbc a, a
	ld d, a
	ld a, 85
	cp (ix-8)
	sbc a, a
	or d
	jp z, __LABEL181
	ld a, (ix-4)
	neg
	ld (ix-4), a
	ld a, (ix-2)
	add a, (ix-4)
	ld (ix-8), a
	ld (ix-10), 1
__LABEL181:
	ld a, (ix-2)
	srl a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-7)
	srl a
	ld l, a
	ld h, 0
	push hl
	call _CanMoveTo
	or a
	jp nz, __LABEL183
	ld a, (ix-9)
	or a
	jp nz, __LABEL183
	ld a, (ix-3)
	neg
	ld (ix-3), a
	ld a, (ix-1)
	add a, (ix-3)
	ld (ix-7), a
	ld a, (ix-2)
	srl a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-7)
	srl a
	ld l, a
	ld h, 0
	push hl
	call _CanMoveTo
	or a
	jp nz, __LABEL183
	ld (ix-3), 0
	ld a, (ix-1)
	ld (ix-7), a
__LABEL183:
	ld a, (ix-8)
	srl a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-7)
	srl a
	ld l, a
	ld h, 0
	push hl
	call _CanMoveTo
	or a
	jp nz, __LABEL189
	ld a, (ix-10)
	or a
	jp nz, __LABEL189
	ld a, (ix-4)
	neg
	ld (ix-4), a
	ld a, (ix-2)
	add a, (ix-4)
	ld (ix-8), a
	srl a
	ld l, a
	ld h, 0
	push hl
	ld a, (ix-7)
	srl a
	ld l, a
	ld h, 0
	push hl
	call _CanMoveTo
	or a
	jp nz, __LABEL189
	ld (ix-4), 0
	ld a, (ix-2)
	ld (ix-8), a
__LABEL189:
	ld a, (ix-3)
	ld h, a
	xor a
	call __LTI8
	or a
	jp z, __LABEL194
	ld (ix-6), 0
	jp __LABEL195
__LABEL194:
	ld a, (ix-3)
	ld h, 0
	call __LTI8
	or a
	jp z, __LABEL195
	ld (ix-6), 2
__LABEL195:
	ld a, (ix-5)
	or a
	jp nz, __LABEL198
	ld (ix-5), 1
	jp __LABEL199
__LABEL198:
	ld (ix-5), 0
__LABEL199:
	ld a, (ix-7)
	push af
	ld hl, 1
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-8)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-3)
	push af
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-4)
	push af
	ld hl, 4
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-5)
	push af
	ld hl, 5
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-6)
	push af
	ld hl, 6
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-8)
	srl a
	ld (ix-8), a
	ld h, a
	ld a, 22
	cp h
	sbc a, a
	push af
	ld a, (ix-8)
	cp 28
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL384
	ld a, h
__LABEL384:
	or a
	jp z, __LABEL201
	ld a, 1
	ld (_sheepOnGate), a
__LABEL201:
	ld a, (ix-8)
	push af
	ld a, (ix-7)
	srl a
	push af
	ld a, (ix-5)
	inc a
	add a, (ix-6)
	call _Draw2x2Sprite
_UpdateSheep__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_OpenGate:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (_gateX)
	cp 18
	jp nc, _OpenGate__leave
	ld hl, 13
	push hl
	ld l, a
	push hl
	ld hl, 39
	push hl
	xor a
	call _SetTile
	ld hl, 13
	push hl
	ld a, (_gateX)
	add a, 4
	ld l, a
	push hl
	ld hl, 38
	push hl
	ld a, 5
	call _SetTile
	ld hl, _gateX
	inc (hl)
_OpenGate__leave:
	ld sp, ix
	pop ix
	ret
_CloseGate:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 14
	ld hl, (_gateX - 1)
	cp h
	jp nc, _CloseGate__leave
	ld hl, 13
	push hl
	ld a, (_gateX)
	add a, 3
	ld l, a
	push hl
	ld hl, 39
	push hl
	ld a, 3
	call _SetTile
	ld hl, _gateX
	dec (hl)
	ld hl, 13
	push hl
	ld a, (_gateX)
	ld l, a
	push hl
	ld hl, 38
	push hl
	ld a, 5
	call _SetTile
	ld a, (_gateX)
	sub 14
	jp nz, _CloseGate__leave
	ld a, 1
	ld (_checkSheeps), a
_CloseGate__leave:
	ld sp, ix
	pop ix
	ret
_UpdateGirl:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld hl, 57090
	call _MultiKeys
	or a
	jp z, __LABEL208
	ld (ix-1), 255
	jp __LABEL209
__LABEL208:
	ld hl, 57089
	call _MultiKeys
	or a
	jp z, __LABEL209
	ld (ix-1), 1
__LABEL209:
	ld hl, 64257
	call _MultiKeys
	or a
	jp z, __LABEL212
	ld (ix-2), 255
	jp __LABEL213
__LABEL212:
	ld hl, 64769
	call _MultiKeys
	or a
	jp z, __LABEL213
	ld (ix-2), 1
__LABEL213:
	ld a, (_girlX)
	add a, (ix-1)
	ld (ix-3), a
	ld a, (_girlY)
	add a, (ix-2)
	ld (ix-4), a
	ld a, (ix-3)
	ld h, 3
	call __LTI8
	push af
	ld h, (ix-3)
	ld a, 57
	call __LTI8
	pop de
	or d
	jp z, __LABEL217
	ld (ix-1), 0
	ld a, (_girlX)
	ld (ix-3), a
__LABEL217:
	ld a, (ix-4)
	ld h, 14
	call __LTI8
	push af
	ld h, (ix-4)
	ld a, 42
	call __LTI8
	pop de
	or d
	jp z, __LABEL219
	ld a, (_girlY)
	ld (ix-4), a
__LABEL219:
	ld a, (ix-4)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	ld a, (ix-3)
	ld l, a
	add a, a
	sbc a, a
	ld h, a
	push hl
	call _CanMoveTo
	or a
	jp nz, __LABEL221
	ld a, (_girlX)
	ld (ix-3), a
	ld a, (_girlY)
	ld (ix-4), a
__LABEL221:
	ld a, (ix-1)
	ld (_girlVx), a
	ld h, a
	xor a
	call __LTI8
	or a
	jp z, __LABEL222
	xor a
	ld (_girlDir), a
	jp __LABEL223
__LABEL222:
	ld a, (ix-1)
	ld h, 0
	call __LTI8
	or a
	jp z, __LABEL223
	ld a, 2
	ld (_girlDir), a
__LABEL223:
	ld a, (ix-3)
	ld hl, (_girlX - 1)
	sub h
	ld d, a
	ld a, (ix-4)
	ld hl, (_girlY - 1)
	sub h
	or d
	jp z, __LABEL227
	ld a, (_girlFrm)
	or a
	jp nz, __LABEL228
	ld a, 1
	ld (_girlFrm), a
	jp __LABEL229
__LABEL228:
	xor a
	ld (_girlFrm), a
__LABEL229:
	ld a, (ix-3)
	ld (_girlX), a
	ld a, (ix-4)
	ld (_girlY), a
__LABEL227:
	ld a, (_girlY)
	push af
	ld a, (_girlX)
	push af
	ld a, (_girlFrm)
	add a, 9
	ld h, a
	ld a, (_girlDir)
	add a, h
	call _Draw2x2Sprite
_UpdateGirl__leave:
	ld sp, ix
	pop ix
	ret
_CheckGate:
	push ix
	ld ix, 0
	add ix, sp
	xor a
	ld hl, (_sheepOnGate - 1)
	cp h
	jp nc, __LABEL231
	ld (_sheepOnGate), a
	jp _CheckGate__leave
__LABEL231:
	ld a, (_girlVx)
	or a
	jp z, _CheckGate__leave
	ld a, (_spaceDown)
	or a
	jp z, _CheckGate__leave
	ld a, (_girlY)
	sub 22
	sub 1
	sbc a, a
	ld d, a
	ld a, (_girlY)
	sub 28
	sub 1
	sbc a, a
	or d
	jp z, _CheckGate__leave
	ld a, (_gateX)
	add a, a
	ld h, a
	ld a, (_girlX)
	sub h
	jp nz, _CheckGate__leave
	xor a
	ld hl, (_girlVx - 1)
	call __LTI8
	or a
	jp z, __LABEL240
	call _OpenGate
	jp _CheckGate__leave
__LABEL240:
	call _CloseGate
_CheckGate__leave:
	ld sp, ix
	pop ix
	ret
_GetSunY:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (ix+5)
	cp 16
	jp nc, __LABEL242
	dec a
	ld h, 5
	call __DIVU8_FAST
	ld h, a
	ld a, 3
	sub h
	ld (ix-1), a
	jp __LABEL243
__LABEL242:
	sub 16
	ld h, 5
	call __DIVU8_FAST
	ld (ix-2), a
	inc a
	ld (ix-1), a
__LABEL243:
	ld a, (ix-1)
_GetSunY__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_UpdateWolves:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld (ix-1), 1
	jp __LABEL244
__LABEL247:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	ld a, (hl)
	dec a
	jp nz, _UpdateWolves__leave
	ld a, (ix-1)
	push af
	call _UpdateWolf
	jp __LABEL248
__LABEL249:
	jp _UpdateWolves__leave
__LABEL248:
	inc (ix-1)
__LABEL244:
	ld a, 3
	cp (ix-1)
	jp nc, __LABEL247
_UpdateWolves__leave:
	ld sp, ix
	pop ix
	ret
_FullOpenGate:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 18
	ld (_gateX), a
	ld hl, 13
	push hl
	inc hl
	push hl
	ld hl, 39
	push hl
	xor a
	call _SetTile
	ld hl, 13
	push hl
	ld hl, 15
	push hl
	ld hl, 39
	push hl
	xor a
	call _SetTile
	ld hl, 13
	push hl
	ld hl, 16
	push hl
	ld hl, 39
	push hl
	xor a
	call _SetTile
	ld hl, 13
	push hl
	ld hl, 17
	push hl
	ld hl, 39
	push hl
	xor a
	call _SetTile
	ld hl, 13
	push hl
	ld hl, 18
	push hl
	ld hl, 38
	push hl
	ld a, 5
	call _SetTile
	ld hl, 13
	push hl
	ld hl, 19
	push hl
	ld hl, 38
	push hl
	ld a, 5
	call _SetTile
	ld hl, 13
	push hl
	ld hl, 20
	push hl
	ld hl, 38
	push hl
	ld a, 5
	call _SetTile
	ld hl, 13
	push hl
	ld hl, 21
	push hl
	ld hl, 38
	push hl
	ld a, 5
	call _SetTile
_FullOpenGate__leave:
	ld sp, ix
	pop ix
	ret
_UpdateWolf:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc hl
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	ld a, (hl)
	ld (ix-1), a
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	ld a, (hl)
	ld (ix-2), a
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	ld a, (hl)
	ld (ix-3), a
	ld hl, 4
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	ld a, (hl)
	ld (ix-4), a
	ld a, (ix-3)
	or a
	jp nz, __LABEL251
	inc (ix-1)
	ld h, (ix-1)
	ld a, 58
	call __LTI8
	or a
	jp z, __LABEL252
	ld (ix-3), 2
	ld a, (ix-1)
	sub 2
	ld (ix-1), a
__LABEL254:
	jp __LABEL252
__LABEL251:
	dec (ix-1)
	ld a, (ix-1)
	ld h, 2
	call __LTI8
	or a
	jp z, __LABEL252
	ld (ix-3), 0
	ld a, (ix-1)
	add a, 2
	ld (ix-1), a
__LABEL252:
	ld h, (ix-1)
	ld a, 7
	call __LTI8
	push af
	ld a, (ix-1)
	ld h, 22
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL385
	ld a, h
__LABEL385:
	or a
	jp z, __LABEL257
	ld a, 49
	sub (ix-1)
	ld (ix-2), a
	jp __LABEL258
__LABEL257:
	ld h, (ix-1)
	ld a, 39
	call __LTI8
	push af
	ld a, (ix-1)
	ld h, 54
	call __LTI8
	ld h, a
	pop af
	or a
	jr z, __LABEL386
	ld a, h
__LABEL386:
	or a
	jp z, __LABEL258
	ld a, (ix-1)
	sub 12
	ld (ix-2), a
__LABEL258:
	ld a, (ix-4)
	or a
	jp nz, __LABEL261
	ld (ix-4), 1
	jp __LABEL262
__LABEL261:
	ld (ix-4), 0
__LABEL262:
	ld a, (ix-2)
	push af
	ld a, (ix-1)
	push af
	ld a, (ix-3)
	add a, 5
	add a, (ix-4)
	call _Draw2x2Sprite
	ld a, (ix-1)
	sub 28
	sub 1
	sbc a, a
	push af
	ld a, (_gateX)
	cp 18
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL387
	ld a, h
__LABEL387:
	or a
	jp z, __LABEL264
	ld a, 29
	ld hl, (_girlY - 1)
	cp h
	sbc a, a
	ld d, a
	ld a, (_girlY)
	cp 26
	sbc a, a
	or d
	ld d, a
	ld a, (_girlX)
	cp 22
	sbc a, a
	or d
	ld d, a
	ld a, 38
	ld hl, (_girlX - 1)
	cp h
	sbc a, a
	or d
	jp z, __LABEL264
	call _FullOpenGate
__LABEL264:
	ld a, (ix-1)
	push af
	ld hl, 1
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-2)
	push af
	ld hl, 2
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-3)
	push af
	ld hl, 3
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (ix-4)
	push af
	ld hl, 4
	push hl
	ld a, (ix+5)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	pop af
	ld (hl), a
	ld a, (_wolvesToSpawn)
	push af
	ld a, (ix-1)
	sub 22
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL388
	ld a, h
__LABEL388:
	or a
	jp z, _UpdateWolf__leave
	ld hl, _wolfIndex
	inc (hl)
	ld hl, _wolvesToSpawn
	dec (hl)
	ld hl, 0
	push hl
	ld a, (_wolfIndex)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	ld (hl), 1
_UpdateWolf__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_CheckGameStatus:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	ld hl, _loopCount
	inc (hl)
	ld a, 39
	ld hl, (_loopCount - 1)
	cp h
	jp nc, __LABEL270
	xor a
	ld (_loopCount), a
	ld hl, _timeCount
	inc (hl)
	ld a, (_sunX)
	push af
	call _GetSunY
	push af
	ld a, (_sunX)
	push af
	call _EraseSun
	ld hl, _sunX
	inc (hl)
	ld a, (_sunX)
	push af
	call _GetSunY
	push af
	ld a, (_sunX)
	push af
	call _DrawSun
__LABEL270:
	ld a, (_loopCount)
	and 15
	sub 15
	jp nz, __LABEL272
	ld a, (_cSmoke)
	or a
	jp nz, __LABEL273
	ld a, 1
	ld (_cSmoke), a
	jp __LABEL274
__LABEL273:
	xor a
	ld (_cSmoke), a
__LABEL274:
	ld hl, 3
	push hl
	ld hl, 16
	push hl
	ld hl, 79
	push hl
	ld a, (_cSmoke)
	add a, 14
	call _SetTile
__LABEL272:
	ld a, (_checkSheeps)
	or a
	jp z, __LABEL276
	xor a
	ld (_checkSheeps), a
	ld a, 1
	ld (_nextLevel), a
	ld (ix-1), 1
	jp __LABEL277
__LABEL280:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld a, (hl)
	dec a
	jp nz, __LABEL276
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld a, (hl)
	sra a
	ld h, a
	ld a, 22
	call __LTI8
	or a
	jp z, __LABEL281
	xor a
	ld (_nextLevel), a
	jp __LABEL276
__LABEL285:
	jp __LABEL281
__LABEL282:
	jp __LABEL276
__LABEL281:
	inc (ix-1)
__LABEL277:
	ld a, 8
	cp (ix-1)
	jp nc, __LABEL280
__LABEL276:
	ld a, (_nextLevel)
	sub 1
	sbc a, a
	push af
	ld a, 28
	ld hl, (_sunX - 1)
	cp h
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL389
	ld a, h
__LABEL389:
	or a
	jp z, __LABEL287
	ld a, 1
	ld (_lose), a
__LABEL287:
	call _CheckUpdateScore
_CheckGameStatus__leave:
	ld sp, ix
	pop ix
	ret
_CheckUpdateScore:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (_updateScore)
	or a
	jp z, _CheckUpdateScore__leave
	ld hl, (_hiScore)
	ld de, (_score)
	or a
	sbc hl, de
	jp nc, __LABEL291
	ld hl, (_score)
	ld (_hiScore), hl
	ld a, 11
	push af
	push hl
	call _PrintScore
__LABEL291:
	ld a, 25
	push af
	ld hl, (_score)
	push hl
	call _PrintScore
	xor a
	ld (_updateScore), a
_CheckUpdateScore__leave:
	ld sp, ix
	pop ix
	ret
_SpawnSheeps:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	xor a
	ld (_sheeps.__DATA__ + 0), a
	ld (_sheeps.__DATA__ + 8), a
	ld (_sheeps.__DATA__ + 16), a
	ld (_sheeps.__DATA__ + 24), a
	ld (_sheeps.__DATA__ + 32), a
	ld (_sheeps.__DATA__ + 40), a
	ld (_sheeps.__DATA__ + 48), a
	ld (_sheeps.__DATA__ + 56), a
	ld a, (ix+5)
	or a
	jp z, _SpawnSheeps__leave
	ld (ix-1), 1
	jp __LABEL294
__LABEL297:
	ld hl, 0
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld (hl), 1
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld (hl), 63
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld (hl), 74
	call _FastRnd
	ld h, 9
	call __MODU8_FAST
	ld h, a
	ld a, 4
	sub h
	push af
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	pop af
	ld (hl), a
	call _FastRnd
	ld h, 9
	call __MODU8_FAST
	ld h, a
	ld a, 4
	sub h
	push af
	ld hl, 4
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	pop af
	ld (hl), a
	ld hl, 5
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld (hl), 0
	ld hl, 6
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _sheeps
	call __ARRAY
	ld (hl), 0
	inc (ix-1)
__LABEL294:
	ld a, (ix+5)
	cp (ix-1)
	jp nc, __LABEL297
_SpawnSheeps__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_SpawnWolves:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	inc sp
	xor a
	ld (_wolves.__DATA__ + 0), a
	ld (_wolves.__DATA__ + 5), a
	ld (_wolves.__DATA__ + 10), a
	ld a, (ix+5)
	or a
	jp z, _SpawnWolves__leave
	ld a, 1
	ld (_wolves.__DATA__ + 0), a
	ld (ix-1), 1
	jp __LABEL301
__LABEL304:
	ld hl, 1
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	ld (hl), 0
	ld hl, 2
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	ld (hl), 42
	ld hl, 3
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	ld (hl), 0
	ld hl, 4
	push hl
	ld a, (ix-1)
	ld l, a
	dec hl
	push hl
	ld hl, _wolves
	call __ARRAY
	ld (hl), 0
	inc (ix-1)
__LABEL301:
	ld a, (ix+5)
	cp (ix-1)
	jp nc, __LABEL304
	dec a
	ld (_wolvesToSpawn), a
	ld a, 1
	ld (_wolfIndex), a
_SpawnWolves__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_UpdateBoy:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (_boyOnScreen)
	or a
	jp nz, __LABEL307
	xor a
	ld hl, (_boyWait - 1)
	cp h
	jp nc, __LABEL308
	ld hl, _boyWait
	dec (hl)
	jp __LABEL307
__LABEL308:
	call _FastRnd
	cp 2
	jp nc, __LABEL307
	ld a, 1
	ld (_boyOnScreen), a
	ld (_boyX), a
	ld a, 42
	ld (_boyY), a
	ld a, 255
	ld (_boyWait), a
__LABEL307:
	ld a, (_boyOnScreen)
	dec a
	jp nz, _UpdateBoy__leave
	ld hl, _boyX
	inc (hl)
	ld a, 57
	ld hl, (_boyX - 1)
	cp h
	jp nc, __LABEL314
	xor a
	ld (_boyOnScreen), a
	jp _UpdateBoy__leave
__LABEL314:
	ld a, (_girlY)
	sub 42
	sub 1
	sbc a, a
	push af
	ld a, (_boyX)
	add a, 4
	ld h, a
	ld a, (_girlX)
	sub h
	sub 1
	sbc a, a
	ld h, a
	pop af
	or a
	jr z, __LABEL390
	ld a, h
__LABEL390:
	or a
	jp z, __LABEL316
	call _PlayKiss
	ld hl, (_score)
	ld de, 20
	add hl, de
	ld (_score), hl
	ld a, 1
	ld (_updateScore), a
	xor a
	ld (_boyOnScreen), a
	jp _UpdateBoy__leave
__LABEL316:
	ld a, (_boyY)
	push af
	ld a, (_boyX)
	push af
	and 1
	add a, 13
	call _Draw2x2Sprite
_UpdateBoy__leave:
	ld sp, ix
	pop ix
	ret
_PlayKiss:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (_boyY)
	push af
	ld a, (_boyX)
	push af
	and 1
	add a, 13
	call _Draw2x2Sprite
	ld a, (_girlY)
	push af
	ld a, (_girlX)
	push af
	ld a, 12
	call _Draw2x2Sprite
	call _RenderFrame
	ld hl, 25
	push hl
	call _DoPause
	ld a, (_boyY)
	srl a
	dec a
	ld l, a
	ld h, 0
	push hl
	ld a, (_boyX)
	srl a
	inc a
	ld l, a
	ld h, 0
	push hl
	ld hl, 38
	push hl
	ld a, 47
	call _SetTile
	ld hl, 25
	push hl
	call _DoPause
	ld a, (_girlY)
	srl a
	dec a
	ld l, a
	ld h, 0
	push hl
	ld a, (_girlX)
	srl a
	push af
	ld a, (_girlX)
	and 1
	ld h, a
	pop af
	add a, h
	ld l, a
	ld h, 0
	push hl
	ld hl, 38
	push hl
	ld a, 47
	call _SetTile
	ld hl, 25
	push hl
	call _DoPause
	xor a
	call _PlayFX
	ld hl, 25
	push hl
	call _DoPause
	ld a, (_boyY)
	srl a
	dec a
	ld l, a
	ld h, 0
	push hl
	ld a, (_boyX)
	srl a
	inc a
	ld l, a
	ld h, 0
	push hl
	ld hl, 39
	push hl
	xor a
	call _SetTile
	ld a, (_girlY)
	srl a
	dec a
	ld l, a
	ld h, 0
	push hl
	ld a, (_girlX)
	srl a
	push af
	ld a, (_girlX)
	and 1
	ld h, a
	pop af
	add a, h
	ld l, a
	ld h, 0
	push hl
	ld hl, 39
	push hl
	xor a
	call _SetTile
_PlayKiss__leave:
	ld sp, ix
	pop ix
	ret
_InitLevel:
	push ix
	ld ix, 0
	add ix, sp
	ld a, 14
	ld (_gateX), a
	xor a
	ld (_trappedSheep), a
	ld a, 28
	ld (_girlX), a
	ld a, 18
	ld (_girlY), a
	xor a
	ld (_girlFrm), a
	ld (_girlDir), a
	ld (_girlVx), a
	ld (_spaceDown), a
	ld (_loopCount), a
	ld (_timeCount), a
	ld a, 1
	ld (_sunX), a
	xor a
	ld (_cSmoke), a
	ld (_wolvesToSpawn), a
	ld (_wolfIndex), a
	ld (_nextLevel), a
	ld (_checkSheeps), a
	ld (_updateScore), a
	ld a, 255
	ld (_boyWait), a
	ld a, 4
	call PAPER
	call COPY_ATTR
	call CLS
	ld a, 1
	call _FastBorder
	call _CreateBackground
	ld a, (ix+5)
	dec a
	jp nz, __LABEL318
	ld a, 1
	push af
	call _SpawnSheeps
	xor a
	push af
	call _SpawnWolves
	jp _InitLevel__leave
__LABEL318:
	ld a, (ix+5)
	sub 2
	jp nz, __LABEL320
	ld a, 2
	push af
	call _SpawnSheeps
	xor a
	push af
	call _SpawnWolves
	jp _InitLevel__leave
__LABEL320:
	ld a, (ix+5)
	sub 3
	jp nz, __LABEL322
	ld a, 3
	push af
	call _SpawnSheeps
	xor a
	push af
	call _SpawnWolves
	jp _InitLevel__leave
__LABEL322:
	ld a, (ix+5)
	sub 4
	jp nz, __LABEL324
	ld a, 3
	push af
	call _SpawnSheeps
	ld a, 1
	push af
	call _SpawnWolves
	jp _InitLevel__leave
__LABEL324:
	ld a, (ix+5)
	sub 5
	jp nz, __LABEL326
	ld a, 4
	push af
	call _SpawnSheeps
	ld a, 2
	push af
	call _SpawnWolves
	jp _InitLevel__leave
__LABEL326:
	ld a, (ix+5)
	sub 6
	jp nz, __LABEL328
	ld a, 4
	push af
	call _SpawnSheeps
	ld a, 3
	push af
	call _SpawnWolves
	jp _InitLevel__leave
__LABEL328:
	ld a, (ix+5)
	sub 7
	jp nz, __LABEL330
	ld a, 5
	push af
	call _SpawnSheeps
	xor a
	push af
	call _SpawnWolves
	jp _InitLevel__leave
__LABEL330:
	ld a, (ix+5)
	sub 8
	jp nz, __LABEL332
	ld a, 5
	push af
	call _SpawnSheeps
	ld a, 1
	push af
	call _SpawnWolves
	jp _InitLevel__leave
__LABEL332:
	ld a, (ix+5)
	sub 9
	jp nz, __LABEL334
	ld a, 6
	push af
	call _SpawnSheeps
	ld a, 2
	push af
	call _SpawnWolves
	jp _InitLevel__leave
__LABEL334:
	ld a, (ix+5)
	sub 10
	jp nz, __LABEL336
	ld a, 6
	push af
	call _SpawnSheeps
	ld a, 3
	push af
	call _SpawnWolves
	jp _InitLevel__leave
__LABEL336:
	ld a, (ix+5)
	sub 11
	jp nz, __LABEL338
	ld a, 7
	push af
	call _SpawnSheeps
	xor a
	push af
	call _SpawnWolves
	jp _InitLevel__leave
__LABEL338:
	ld a, (ix+5)
	sub 12
	jp nz, __LABEL340
	ld a, 7
	push af
	call _SpawnSheeps
	ld a, 1
	push af
	call _SpawnWolves
	jp _InitLevel__leave
__LABEL340:
	ld a, (ix+5)
	sub 13
	jp nz, __LABEL342
	ld a, 8
	push af
	call _SpawnSheeps
	ld a, 2
	push af
	call _SpawnWolves
	jp _InitLevel__leave
__LABEL342:
	ld a, (ix+5)
	sub 14
	jp nz, _InitLevel__leave
	ld a, 8
	push af
	call _SpawnSheeps
	ld a, 3
	push af
	call _SpawnWolves
_InitLevel__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_GameOver:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	call _InitGameoverMusic
	call _PlayMusic
	call _CancelOps
	ld (ix-1), 59
	jp __LABEL346
__LABEL349:
	ld hl, 0
	ld (_counter), hl
	ld a, 1
	push af
	ld a, (ix-1)
	push af
	and 1
	add a, 17
	call _Draw2x2Sprite
	ld a, (ix-1)
	add a, 6
	ld (ix-2), a
	cp 60
	jp nc, __LABEL352
	ld a, 25
	cp (ix-2)
	jp nc, __LABEL353
	ld a, 1
	push af
	ld a, (ix-2)
	push af
	ld a, 19
	call _Draw2x2Sprite
	ld a, (ix-2)
	add a, 5
	ld (ix-2), a
	cp 60
	jp nc, __LABEL356
	ld a, 1
	push af
	ld a, (ix-2)
	push af
	ld a, 20
	call _Draw2x2Sprite
__LABEL356:
	ld a, (ix-2)
	add a, 5
	ld (ix-2), a
	cp 60
	jp nc, __LABEL352
	ld a, 1
	push af
	ld a, (ix-2)
	push af
	ld a, 21
	call _Draw2x2Sprite
__LABEL358:
	jp __LABEL352
__LABEL353:
	ld a, 1
	push af
	ld a, 25
	push af
	ld a, 19
	call _Draw2x2Sprite
	ld a, 1
	push af
	ld a, 30
	push af
	ld a, 20
	call _Draw2x2Sprite
	ld a, 1
	push af
	ld a, 35
	push af
	ld a, 21
	call _Draw2x2Sprite
__LABEL352:
	call _RenderFrame
__LABEL359:
	ld de, 4
	ld hl, (_counter)
	or a
	sbc hl, de
	jp c, __LABEL359
	dec (ix-1)
__LABEL346:
	ld a, (ix-1)
	cp 1
	jp nc, __LABEL349
__LABEL361:
	ld de, 100
	ld hl, (_counter)
	or a
	sbc hl, de
	jp c, __LABEL361
	call CLS
	ld a, 4
	call _FastBorder
	call _CancelOps
	call _StopMusic
_GameOver__leave:
	ld sp, ix
	pop ix
	ret
_DoNextLevel:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	call _InitNextlevelMusic
	call _PlayMusic
	ld hl, 1
	dec hl
	ld (_counter), hl
	ld a, (ix+5)
	ld h, 10
	call __MUL8_FAST
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, (_score)
	add hl, de
	ld (_score), hl
	ld a, 1
	ld (_updateScore), a
	call _CheckUpdateScore
	ld a, (ix+5)
	inc a
	ld (ix-1), a
	ld h, 10
	call __LTI8
	or a
	jp z, __LABEL363
	ld de, __LABEL56
	ld bc, -3
	call __PSTORE_STR
	jp __LABEL364
__LABEL363:
	ld de, __LABEL365
	ld bc, -3
	call __PSTORE_STR
__LABEL364:
	ld a, 11
	push af
	ld a, 7
	call PRINT_AT
	ld a, 1
	call BOLD_TMP
	ld a, 2
	call INK_TMP
	ld a, 4
	call PAPER_TMP
	ld hl, __LABEL366
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 12
	push af
	ld a, 7
	call PRINT_AT
	ld a, 1
	call BOLD_TMP
	ld a, 2
	call INK_TMP
	ld a, 4
	call PAPER_TMP
	ld hl, __LABEL367
	xor a
	call __PRINTSTR
	ld l, (ix-3)
	ld h, (ix-2)
	xor a
	call __PRINTSTR
	ld a, (ix-1)
	call __PRINTI8
	ld hl, __LABEL368
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
	ld a, 13
	push af
	ld a, 7
	call PRINT_AT
	ld a, 1
	call BOLD_TMP
	ld a, 2
	call INK_TMP
	ld a, 4
	call PAPER_TMP
	ld hl, __LABEL366
	xor a
	call __PRINTSTR
	call PRINT_EOL_ATTR
__LABEL369:
	ld de, 200
	ld hl, (_counter)
	or a
	sbc hl, de
	jp c, __LABEL369
	call _StopMusic
_DoNextLevel__leave:
	ex af, af'
	exx
	ld l, (ix-3)
	ld h, (ix-2)
	call __MEM_FREE
	ex af, af'
	exx
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
_FastBorder:
#line 1180 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
		OUT ($FE),A
		RLCA
		RLCA
		RLCA
		BIT 5,A
		JR NZ,BORDER_1
		XOR $07
BORDER_1:
		LD ($5C48),A
#line 1192 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
_FastBorder__leave:
	ret
__LABEL40:
	DEFW 0005h
	DEFB 53h
	DEFB 48h
	DEFB 45h
	DEFB 45h
	DEFB 50h
__LABEL41:
	DEFW 0006h
	DEFB 20h
	DEFB 20h
	DEFB 57h
	DEFB 4Fh
	DEFB 4Ch
	DEFB 46h
__LABEL42:
	DEFW 0006h
	DEFB 20h
	DEFB 20h
	DEFB 47h
	DEFB 49h
	DEFB 52h
	DEFB 4Ch
__LABEL43:
	DEFW 0006h
	DEFB 20h
	DEFB 20h
	DEFB 20h
	DEFB 42h
	DEFB 4Fh
	DEFB 59h
__LABEL44:
	DEFW 0006h
	DEFB 4Fh
	DEFB 3Ah
	DEFB 4Ch
	DEFB 45h
	DEFB 46h
	DEFB 54h
__LABEL45:
	DEFW 0007h
	DEFB 50h
	DEFB 3Ah
	DEFB 52h
	DEFB 49h
	DEFB 47h
	DEFB 48h
	DEFB 54h
__LABEL46:
	DEFW 0004h
	DEFB 51h
	DEFB 3Ah
	DEFB 55h
	DEFB 50h
__LABEL47:
	DEFW 0006h
	DEFB 41h
	DEFB 3Ah
	DEFB 44h
	DEFB 4Fh
	DEFB 57h
	DEFB 4Eh
__LABEL48:
	DEFW 0006h
	DEFB 53h
	DEFB 50h
	DEFB 3Ah
	DEFB 41h
	DEFB 43h
	DEFB 54h
__LABEL56:
	DEFW 0001h
	DEFB 30h
__LABEL365:
	DEFW 0000h
__LABEL366:
	DEFW 0013h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
	DEFB 23h
__LABEL367:
	DEFW 000Eh
	DEFB 23h
	DEFB 20h
	DEFB 20h
	DEFB 4Eh
	DEFB 45h
	DEFB 58h
	DEFB 54h
	DEFB 20h
	DEFB 4Ch
	DEFB 45h
	DEFB 56h
	DEFB 45h
	DEFB 4Ch
	DEFB 20h
__LABEL368:
	DEFW 0003h
	DEFB 20h
	DEFB 20h
	DEFB 23h
	;; --- end of user code ---
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	; -------------------------------------------------------------------
	; Simple array Index routine
	; Number of total indexes dimensions - 1 at beginning of memory
	; HL = Start of array memory (First two bytes contains N-1 dimensions)
	; Dimension values on the stack, (top of the stack, highest dimension)
	; E.g. A(2, 4) -> PUSH <4>; PUSH <2>

	; For any array of N dimension A(aN-1, ..., a1, a0)
	; and dimensions D[bN-1, ..., b1, b0], the offset is calculated as
	; O = [a0 + b0 * (a1 + b1 * (a2 + ... bN-2(aN-1)))]
; What I will do here is to calculate the following sequence:
	; ((aN-1 * bN-2) + aN-2) * bN-3 + ...


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/mul16.asm"
__MUL16:	; Mutiplies HL with the last value stored into de stack
				; Works for both signed and unsigned

			PROC

			LOCAL __MUL16LOOP
	        LOCAL __MUL16NOADD

			ex de, hl
			pop hl		; Return address
			ex (sp), hl ; CALLEE caller convention

__MUL16_FAST:
	        ld b, 16
	        ld a, h
	        ld c, l
	        ld hl, 0

__MUL16LOOP:
	        add hl, hl  ; hl << 1
	        sla c
	        rla         ; a,c << 1
	        jp nc, __MUL16NOADD
	        add hl, de

__MUL16NOADD:
	        djnz __MUL16LOOP

			ret	; Result in hl (16 lower bits)

			ENDP

#line 20 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

#line 24 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

__ARRAY_PTR:   ;; computes an array offset from a pointer
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c

__ARRAY:
		PROC

		LOCAL LOOP
		LOCAL ARRAY_END
		LOCAL RET_ADDRESS ; Stores return address
		LOCAL TMP_ARR_PTR ; Stores pointer temporarily

	    ld e, (hl)
	    inc hl
	    ld d, (hl)
	    inc hl
	    ld (TMP_ARR_PTR), hl
	    ex de, hl
		ex (sp), hl	; Return address in HL, array address in the stack
		ld (RET_ADDRESS + 1), hl ; Stores it for later

		exx
		pop hl		; Will use H'L' as the pointer
		ld c, (hl)	; Loads Number of dimensions from (hl)
		inc hl
		ld b, (hl)
		inc hl		; Ready
		exx

		ld hl, 0	; HL = Offset "accumulator"

LOOP:
#line 62 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
		pop bc		; Get next index (Ai) from the stack

#line 72 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

		add hl, bc	; Adds current index

		exx			; Checks if B'C' = 0
		ld a, b		; Which means we must exit (last element is not multiplied by anything)
		or c
		jr z, ARRAY_END		; if B'Ci == 0 we are done

		ld e, (hl)			; Loads next dimension into D'E'
		inc hl
		ld d, (hl)
		inc hl
		push de
		dec bc				; Decrements loop counter
		exx
		pop de				; DE = Max bound Number (i-th dimension)

	    call __FNMUL
		jp LOOP

ARRAY_END:
		ld a, (hl)
		exx

#line 101 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"
	    LOCAL ARRAY_SIZE_LOOP

	    ex de, hl
	    ld hl, 0
	    ld b, a
ARRAY_SIZE_LOOP:
	    add hl, de
	    djnz ARRAY_SIZE_LOOP

#line 111 "C:/zxbasic/src/arch/zx48k/library-asm/array.asm"

	    ex de, hl
		ld hl, (TMP_ARR_PTR)
		ld a, (hl)
		inc hl
		ld h, (hl)
		ld l, a
		add hl, de  ; Adds element start

RET_ADDRESS:
		jp 0

	    ;; Performs a faster multiply for little 16bit numbs
	    LOCAL __FNMUL, __FNMUL2

__FNMUL:
	    xor a
	    or h
	    jp nz, __MUL16_FAST
	    or l
	    ret z

	    cp 33
	    jp nc, __MUL16_FAST

	    ld b, l
	    ld l, h  ; HL = 0

__FNMUL2:
	    add hl, de
	    djnz __FNMUL2
	    ret

TMP_ARR_PTR:
	    DW 0  ; temporary storage for pointer to tables

		ENDP

#line 10966 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/asc.asm"
	; Returns the ascii code for the given str
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/free.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/heapinit.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.




	; ---------------------------------------------------------------------
	;  __MEM_INIT must be called to initalize this library with the
	; standard parameters
	; ---------------------------------------------------------------------
__MEM_INIT: ; Initializes the library using (RAMTOP) as start, and
	        ld hl, ZXBASIC_MEM_HEAP  ; Change this with other address of heap start
	        ld de, ZXBASIC_HEAP_SIZE ; Change this with your size

	; ---------------------------------------------------------------------
	;  __MEM_INIT2 initalizes this library
; Parameters:
;   HL : Memory address of 1st byte of the memory heap
;   DE : Length in bytes of the Memory Heap
	; ---------------------------------------------------------------------
__MEM_INIT2:
	        ; HL as TOP
	        PROC

	        dec de
	        dec de
	        dec de
	        dec de        ; DE = length - 4; HL = start
	        ; This is done, because we require 4 bytes for the empty dummy-header block

	        xor a
	        ld (hl), a
	        inc hl
        ld (hl), a ; First "free" block is a header: size=0, Pointer=&(Block) + 4
	        inc hl

	        ld b, h
	        ld c, l
	        inc bc
	        inc bc      ; BC = starts of next block

	        ld (hl), c
	        inc hl
	        ld (hl), b
	        inc hl      ; Pointer to next block

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl      ; Block size (should be length - 4 at start); This block contains all the available memory

	        ld (hl), a ; NULL (0000h) ; No more blocks (a list with a single block)
	        inc hl
	        ld (hl), a

	        ld a, 201
	        ld (__MEM_INIT), a; "Pokes" with a RET so ensure this routine is not called again
	        ret

	        ENDP

#line 69 "C:/zxbasic/src/arch/zx48k/library-asm/free.asm"

	; ---------------------------------------------------------------------
	; MEM_FREE
	;  Frees a block of memory
	;
; Parameters:
	;  HL = Pointer to the block to be freed. If HL is NULL (0) nothing
	;  is done
	; ---------------------------------------------------------------------

MEM_FREE:
__MEM_FREE: ; Frees the block pointed by HL
	            ; HL DE BC & AF modified
	        PROC

	        LOCAL __MEM_LOOP2
	        LOCAL __MEM_LINK_PREV
	        LOCAL __MEM_JOIN_TEST
	        LOCAL __MEM_BLOCK_JOIN

	        ld a, h
	        or l
	        ret z       ; Return if NULL pointer

	        dec hl
	        dec hl
	        ld b, h
	        ld c, l    ; BC = Block pointer

	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start

__MEM_LOOP2:
	        inc hl
	        inc hl     ; Next block ptr

	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; Block next ptr
	        ex de, hl  ; DE = &(block->next); HL = block->next

	        ld a, h    ; HL == NULL?
	        or l
	        jp z, __MEM_LINK_PREV; if so, link with previous

	        or a       ; Clear carry flag
	        sbc hl, bc ; Carry if BC > HL => This block if before
	        add hl, bc ; Restores HL, preserving Carry flag
	        jp c, __MEM_LOOP2 ; This block is before. Keep searching PASS the block

	;------ At this point current HL is PAST BC, so we must link (DE) with BC, and HL in BC->next

__MEM_LINK_PREV:    ; Link (DE) with BC, and BC->next with HL
	        ex de, hl
	        push hl
	        dec hl

	        ld (hl), c
	        inc hl
	        ld (hl), b ; (DE) <- BC

	        ld h, b    ; HL <- BC (Free block ptr)
	        ld l, c
	        inc hl     ; Skip block length (2 bytes)
	        inc hl
	        ld (hl), e ; Block->next = DE
	        inc hl
	        ld (hl), d
	        ; --- LINKED ; HL = &(BC->next) + 2

	        call __MEM_JOIN_TEST
	        pop hl

__MEM_JOIN_TEST:   ; Checks for fragmented contiguous blocks and joins them
	                   ; hl = Ptr to current block + 2
	        ld d, (hl)
	        dec hl
	        ld e, (hl)
	        dec hl
	        ld b, (hl) ; Loads block length into BC
	        dec hl
	        ld c, (hl) ;

	        push hl    ; Saves it for later
	        add hl, bc ; Adds its length. If HL == DE now, it must be joined
	        or a
	        sbc hl, de ; If Z, then HL == DE => We must join
	        pop hl
	        ret nz

__MEM_BLOCK_JOIN:  ; Joins current block (pointed by HL) with next one (pointed by DE). HL->length already in BC
	        push hl    ; Saves it for later
	        ex de, hl

	        ld e, (hl) ; DE -> block->next->length
	        inc hl
	        ld d, (hl)
	        inc hl

	        ex de, hl  ; DE = &(block->next)
	        add hl, bc ; HL = Total Length

	        ld b, h
	        ld c, l    ; BC = Total Length

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl) ; DE = block->next

	        pop hl     ; Recovers Pointer to block
	        ld (hl), c
	        inc hl
	        ld (hl), b ; Length Saved
	        inc hl
	        ld (hl), e
	        inc hl
	        ld (hl), d ; Next saved
	        ret

	        ENDP

#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/asc.asm"

__ASC:
		PROC
		LOCAL __ASC_END

		ex af, af'	; Saves free_mem flag

		ld a, h
		or l
		ret z		; NULL? return

		ld c, (hl)
		inc hl
		ld b, (hl)

		ld a, b
		or c
		jr z, __ASC_END		; No length? return

		inc hl
		ld a, (hl)
	    dec hl

__ASC_END:
		dec hl
		ex af, af'
		or a
		call nz, __MEM_FREE	; Free memory if needed

		ex af, af'	; Recover result

		ret
		ENDP
#line 10967 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/band16.asm"
; vim:ts=4:et:
	; FASTCALL bitwise and16 version.
	; result in hl
; __FASTCALL__ version (operands: A, H)
	; Performs 16bit or 16bit and returns the boolean
; Input: HL, DE
; Output: HL <- HL AND DE

__BAND16:
		ld a, h
		and d
	    ld h, a

	    ld a, l
	    and e
	    ld l, a

	    ret

#line 10968 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/bold.asm"
	; Sets BOLD flag in P_FLAG permanently
; Parameter: BOLD flag in bit 0 of A register
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
; vim:ts=4:sw=4:et:
; vim:ts=4:sw=4:et:
	; PRINT command routine
	; Does not print attribute. Use PRINT_STR or PRINT_NUM for that

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/sposn.asm"
	; Printing positioning library.
			PROC
			LOCAL ECHO_E

__LOAD_S_POSN:		; Loads into DE current ROW, COL print position from S_POSN mem var.
			ld de, (S_POSN)
			ld hl, (MAXX)
			or a
			sbc hl, de
			ex de, hl
			ret


__SAVE_S_POSN:		; Saves ROW, COL from DE into S_POSN mem var.
			ld hl, (MAXX)
			or a
			sbc hl, de
			ld (S_POSN), hl ; saves it again
			ret


	ECHO_E	EQU 23682
	MAXX	EQU ECHO_E   ; Max X position + 1
	MAXY	EQU MAXX + 1 ; Max Y position + 1

	S_POSN	EQU 23688
	POSX	EQU S_POSN		; Current POS X
	POSY	EQU S_POSN + 1	; Current POS Y

			ENDP

#line 7 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/cls.asm"
	; JUMPS directly to spectrum CLS
	; This routine does not clear lower screen

	;CLS	EQU	0DAFh

	; Our faster implementation



CLS:
		PROC

		LOCAL COORDS
		LOCAL __CLS_SCR
		LOCAL ATTR_P
		LOCAL SCREEN

		ld hl, 0
		ld (COORDS), hl
	    ld hl, 1821h
		ld (S_POSN), hl
__CLS_SCR:
		ld hl, SCREEN
		ld (hl), 0
		ld d, h
		ld e, l
		inc de
		ld bc, 6144
		ldir

		; Now clear attributes

		ld a, (ATTR_P)
		ld (hl), a
		ld bc, 767
		ldir
		ret

	COORDS	EQU	23677
	SCREEN	EQU 16384 ; Default start of the screen (can be changed)
	ATTR_P	EQU 23693
	;you can poke (SCREEN_SCRADDR) to change CLS, DRAW & PRINTing address

	SCREEN_ADDR EQU (__CLS_SCR + 1) ; Address used by print and other screen routines
								    ; to get the start of the screen
		ENDP

#line 8 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/in_screen.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/error.asm"
	; Simple error control routines
; vim:ts=4:et:

	ERR_NR    EQU    23610    ; Error code system variable


	; Error code definitions (as in ZX spectrum manual)

; Set error code with:
	;    ld a, ERROR_CODE
	;    ld (ERR_NR), a


	ERROR_Ok                EQU    -1
	ERROR_SubscriptWrong    EQU     2
	ERROR_OutOfMemory       EQU     3
	ERROR_OutOfScreen       EQU     4
	ERROR_NumberTooBig      EQU     5
	ERROR_InvalidArg        EQU     9
	ERROR_IntOutOfRange     EQU    10
	ERROR_NonsenseInBasic   EQU    11
	ERROR_InvalidFileName   EQU    14
	ERROR_InvalidColour     EQU    19
	ERROR_BreakIntoProgram  EQU    20
	ERROR_TapeLoadingErr    EQU    26


	; Raises error using RST #8
__ERROR:
	    ld (__ERROR_CODE), a
	    rst 8
__ERROR_CODE:
	    nop
	    ret

	; Sets the error system variable, but keeps running.
	; Usually this instruction if followed by the END intermediate instruction.
__STOP:
	    ld (ERR_NR), a
	    ret
#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/in_screen.asm"

__IN_SCREEN:
		; Returns NO carry if current coords (D, E)
		; are OUT of the screen limits (MAXX, MAXY)

		PROC
		LOCAL __IN_SCREEN_ERR

		ld hl, MAXX
		ld a, e
		cp (hl)
		jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range

		ld a, d
		inc hl
		cp (hl)
		;; jr nc, __IN_SCREEN_ERR	; Do nothing and return if out of range
		;; ret
	    ret c                       ; Return if carry (OK)

__IN_SCREEN_ERR:
__OUT_OF_SCREEN_ERR:
		; Jumps here if out of screen
		ld a, ERROR_OutOfScreen
	    jp __STOP   ; Saves error code and exits

		ENDP
#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/table_jump.asm"

JUMP_HL_PLUS_2A: ; Does JP (HL + A*2) Modifies DE. Modifies A
		add a, a

JUMP_HL_PLUS_A:	 ; Does JP (HL + A) Modifies DE
		ld e, a
		ld d, 0

JUMP_HL_PLUS_DE: ; Does JP (HL + DE)
		add hl, de
		ld e, (hl)
		inc hl
		ld d, (hl)
		ex de, hl
CALL_HL:
		jp (hl)

#line 10 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/ink.asm"
	; Sets ink color in ATTR_P permanently
; Parameter: Paper color in A register

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/const.asm"
	; Global constants

	P_FLAG	EQU 23697
	FLAGS2	EQU 23681
	ATTR_P	EQU 23693	; permanet ATTRIBUTES
	ATTR_T	EQU 23695	; temporary ATTRIBUTES
	CHARS	EQU 23606 ; Pointer to ROM/RAM Charset
	UDG	EQU 23675 ; Pointer to UDG Charset
	MEM0	EQU 5C92h ; Temporary memory buffer used by ROM chars

#line 5 "C:/zxbasic/src/arch/zx48k/library-asm/ink.asm"

INK:
		PROC
		LOCAL __SET_INK
		LOCAL __SET_INK2

		ld de, ATTR_P

__SET_INK:
		cp 8
		jr nz, __SET_INK2

		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		or 7 ; Set bits 0,1,2 to enable transparency
		ld (de), a
		ret

__SET_INK2:
		; Another entry. This will set the ink color at location pointer by DE
		and 7	; # Gets color mod 8
		ld b, a	; Saves the color
		ld a, (de)
		and 0F8h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points DE to MASK_T or MASK_P
		ld a, (de)
		and 0F8h ; Reset bits 0,1,2 sign to disable transparency
		ld (de), a ; Store new attr
		ret

	; Sets the INK color passed in A register in the ATTR_T variable
INK_TMP:
		ld de, ATTR_T
		jp __SET_INK

		ENDP

#line 11 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/paper.asm"
	; Sets paper color in ATTR_P permanently
; Parameter: Paper color in A register



PAPER:
		PROC
		LOCAL __SET_PAPER
		LOCAL __SET_PAPER2

		ld de, ATTR_P

__SET_PAPER:
		cp 8
		jr nz, __SET_PAPER2
		inc de
		ld a, (de)
		or 038h
		ld (de), a
		ret

		; Another entry. This will set the paper color at location pointer by DE
__SET_PAPER2:
		and 7	; # Remove
		rlca
		rlca
		rlca		; a *= 8

		ld b, a	; Saves the color
		ld a, (de)
		and 0C7h ; Clears previous value
		or b
		ld (de), a
		inc de ; Points to MASK_T or MASK_P accordingly
		ld a, (de)
		and 0C7h  ; Resets bits 3,4,5
		ld (de), a
		ret


	; Sets the PAPER color passed in A register in the ATTR_T variable
PAPER_TMP:
		ld de, ATTR_T
		jp __SET_PAPER
		ENDP

#line 12 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/flash.asm"
	; Sets flash flag in ATTR_P permanently
; Parameter: Paper color in A register



FLASH:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_FLASH:
		; Another entry. This will set the flash flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x80

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 07Fh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 7, (hl)  ;Reset bit 7 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
		set 7, (hl)  ;Set bit 7 to enable transparency
		ret

	; Sets the FLASH flag passed in A register in the ATTR_T variable
FLASH_TMP:
		ld hl, ATTR_T
		jr __SET_FLASH
	    ENDP

#line 13 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/bright.asm"
	; Sets bright flag in ATTR_P permanently
; Parameter: Paper color in A register



BRIGHT:
		ld hl, ATTR_P

	    PROC
	    LOCAL IS_TR
	    LOCAL IS_ZERO

__SET_BRIGHT:
		; Another entry. This will set the bright flag at location pointer by DE
		cp 8
		jr z, IS_TR

		; # Convert to 0/1
		or a
		jr z, IS_ZERO
		ld a, 0x40

IS_ZERO:
		ld b, a	; Saves the color
		ld a, (hl)
		and 0BFh ; Clears previous value
		or b
		ld (hl), a
		inc hl
		res 6, (hl)  ;Reset bit 6 to disable transparency
		ret

IS_TR:  ; transparent
		inc hl ; Points DE to MASK_T or MASK_P
	    set 6, (hl)  ;Set bit 6 to enable transparency
		ret

	; Sets the BRIGHT flag passed in A register in the ATTR_T variable
BRIGHT_TMP:
		ld hl, ATTR_T
		jr __SET_BRIGHT
	    ENDP
#line 14 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/over.asm"
	; Sets OVER flag in P_FLAG permanently
; Parameter: OVER flag in bit 0 of A register



OVER:
		PROC

		ld c, a ; saves it for later
		and 2
		ld hl, FLAGS2
		res 1, (HL)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1	; # Convert to 0/1
		add a, a; # Shift left 1 bit for permanent

		ld hl, P_FLAG
		res 1, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets OVER flag in P_FLAG temporarily
OVER_TMP:
		ld c, a ; saves it for later
		and 2	; gets bit 1; clears carry
		rra
		ld hl, FLAGS2
		res 0, (hl)
		or (hl)
		ld (hl), a

		ld a, c	; Recovers previous value
		and 1
		ld hl, P_FLAG
		res 0, (hl)
	    or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 15 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/inverse.asm"
	; Sets INVERSE flag in P_FLAG permanently
; Parameter: INVERSE flag in bit 0 of A register



INVERSE:
		PROC

		and 1	; # Convert to 0/1
		add a, a; # Shift left 3 bits for permanent
		add a, a
		add a, a
		ld hl, P_FLAG
		res 3, (hl)
		or (hl)
		ld (hl), a
		ret

	; Sets INVERSE flag in P_FLAG temporarily
INVERSE_TMP:
		and 1
		add a, a
		add a, a; # Shift left 2 bits for temporary
		ld hl, P_FLAG
		res 2, (hl)
		or (hl)
		ld (hl), a
		jp __SET_ATTR_MODE

		ENDP

#line 16 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/italic.asm"
	; Sets ITALIC flag in P_FLAG permanently
; Parameter: ITALIC flag in bit 0 of A register


ITALIC:
		PROC

		and 1
	    rrca
	    rrca
	    rrca
		ld hl, FLAGS2
		res 5, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets ITALIC flag in P_FLAG temporarily
ITALIC_TMP:
		and 1
		rrca
		rrca
		rrca
		rrca
		ld hl, FLAGS2
		res 4, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 18 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/attr.asm"
	; Attribute routines
; vim:ts=4:et:sw:







__ATTR_ADDR:
	    ; calc start address in DE (as (32 * d) + e)
    ; Contributed by Santiago Romero at http://www.speccy.org
	    ld h, 0                     ;  7 T-States
	    ld a, d                     ;  4 T-States
	    add a, a     ; a * 2        ;  4 T-States
	    add a, a     ; a * 4        ;  4 T-States
	    ld l, a      ; HL = A * 4   ;  4 T-States

	    add hl, hl   ; HL = A * 8   ; 15 T-States
	    add hl, hl   ; HL = A * 16  ; 15 T-States
	    add hl, hl   ; HL = A * 32  ; 15 T-States

    ld d, 18h ; DE = 6144 + E. Note: 6144 is the screen size (before attr zone)
	    add hl, de

	    ld de, (SCREEN_ADDR)    ; Adds the screen address
	    add hl, de

	    ; Return current screen address in HL
	    ret


	; Sets the attribute at a given screen coordinate (D, E).
	; The attribute is taken from the ATTR_T memory variable
	; Used by PRINT routines
SET_ATTR:

	    ; Checks for valid coords
	    call __IN_SCREEN
	    ret nc

__SET_ATTR:
	    ; Internal __FASTCALL__ Entry used by printing routines
	    PROC

	    call __ATTR_ADDR

__SET_ATTR2:  ; Sets attr from ATTR_T to (HL) which points to the scr address
	    ld de, (ATTR_T)    ; E = ATTR_T, D = MASK_T

	    ld a, d
	    and (hl)
	    ld c, a    ; C = current screen color, masked

	    ld a, d
	    cpl        ; Negate mask
	    and e    ; Mask current attributes
	    or c    ; Mix them
	    ld (hl), a ; Store result in screen

	    ret

	    ENDP


	; Sets the attribute at a given screen pixel address in hl
	; HL contains the address in RAM for a given pixel (not a coordinate)
SET_PIXEL_ADDR_ATTR:
	    ;; gets ATTR position with offset given in SCREEN_ADDR
	    ld a, h
	    rrca
	    rrca
	    rrca
	    and 3
	    or 18h
	    ld h, a
	    ld de, (SCREEN_ADDR)
	    add hl, de  ;; Final screen addr
	    jp __SET_ATTR2
#line 20 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

	; Putting a comment starting with @INIT <address>
	; will make the compiler to add a CALL to <address>
	; It is useful for initialization routines.


__PRINT_INIT: ; To be called before program starts (initializes library)
	        PROC

	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl

	        ld hl, 1821h
	        ld (MAXX), hl  ; Sets current maxX and maxY

	        xor a
	        ld (FLAGS2), a

	        ret


__PRINTCHAR: ; Print character store in accumulator (A register)
	             ; Modifies H'L', B'C', A'F', D'E', A

	        LOCAL PO_GR_1

	        LOCAL __PRCHAR
	        LOCAL __PRINT_CONT
	        LOCAL __PRINT_CONT2
	        LOCAL __PRINT_JUMP
	        LOCAL __SRCADDR
	        LOCAL __PRINT_UDG
	        LOCAL __PRGRAPH
	        LOCAL __PRINT_START
	        LOCAL __ROM_SCROLL_SCR
	        LOCAL __TVFLAGS

	        __ROM_SCROLL_SCR EQU 0DFEh
	        __TVFLAGS EQU 5C3Ch

	PRINT_JUMP_STATE EQU __PRINT_JUMP + 1

__PRINT_JUMP:
	        jp __PRINT_START    ; Where to jump. If we print 22 (AT), next two calls jumps to AT1 and AT2 respectively


	        LOCAL __SCROLL
__SCROLL:  ; Scroll?
	        ld hl, __TVFLAGS
	        bit 1, (hl)
	        ret z
	        call __ROM_SCROLL_SCR
	        ld hl, __TVFLAGS
	        res 1, (hl)
	        ret
#line 76 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

__PRINT_START:
	        cp ' '
	        jp c, __PRINT_SPECIAL    ; Characters below ' ' are special ones

	        exx               ; Switch to alternative registers
	        ex af, af'        ; Saves a value (char to print) for later


	        call __SCROLL
#line 87 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
	        call __LOAD_S_POSN

	; At this point we have the new coord
	        ld hl, (SCREEN_ADDR)

	        ld a, d
	        ld c, a     ; Saves it for later

	        and 0F8h    ; Masks 3 lower bit ; zy
	        ld d, a

	        ld a, c     ; Recovers it
	        and 07h     ; MOD 7 ; y1
	        rrca
	        rrca
	        rrca

	        or e
	        ld e, a
	        add hl, de    ; HL = Screen address + DE
	        ex de, hl     ; DE = Screen address

	        ex af, af'

	        cp 80h    ; Is it an UDG or a ?
	        jp c, __SRCADDR

	        cp 90h
	        jp nc, __PRINT_UDG

	        ; Print a 8 bit pattern (80h to 8Fh)

	        ld b, a
	        call PO_GR_1 ; This ROM routine will generate the bit pattern at MEM0
	        ld hl, MEM0
	        jp __PRGRAPH

	PO_GR_1 EQU 0B38h

__PRINT_UDG:
	        sub 90h ; Sub ASC code
	        ld bc, (UDG)
	        jp __PRGRAPH0

	__SOURCEADDR EQU (__SRCADDR + 1)    ; Address of the pointer to chars source
__SRCADDR:
	        ld bc, (CHARS)

__PRGRAPH0:
        add a, a   ; A = a * 2 (since a < 80h) ; Thanks to Metalbrain at http://foro.speccy.org
	        ld l, a
	        ld h, 0    ; HL = a * 2 (accumulator)
	        add hl, hl
	        add hl, hl ; HL = a * 8
	        add hl, bc ; HL = CHARS address

__PRGRAPH:
	        ex de, hl  ; HL = Write Address, DE = CHARS address
	        bit 2, (iy + $47)
	        call nz, __BOLD
	        bit 4, (iy + $47)
	        call nz, __ITALIC
	        ld b, 8 ; 8 bytes per char
__PRCHAR:
	        ld a, (de) ; DE *must* be ALWAYS source, and HL destiny

PRINT_MODE:     ; Which operation is used to write on the screen
                ; Set it with:
	                ; LD A, <OPERATION>
	                ; LD (PRINT_MODE), A
	                ;
                ; Available opertions:
                ; NORMAL : 0h  --> NOP         ; OVER 0
                ; XOR    : AEh --> XOR (HL)    ; OVER 1
                ; OR     : B6h --> OR (HL)     ; PUTSPRITE
                ; AND    : A6h --> AND (HL)    ; PUTMASK
	        nop     ;

INVERSE_MODE:   ; 00 -> NOP -> INVERSE 0
	        nop     ; 2F -> CPL -> INVERSE 1

	        ld (hl), a

	        inc de
	        inc h     ; Next line
	        djnz __PRCHAR

	        call __LOAD_S_POSN
	        push de
	        call __SET_ATTR
	        pop de
	        inc e            ; COL = COL + 1
	        ld hl, (MAXX)
	        ld a, e
	        dec l            ; l = MAXX
	        cp l            ; Lower than max?
	        jp c, __PRINT_CONT; Nothing to do
	        call __PRINT_EOL1
	        exx            ; counteracts __PRINT_EOL1 exx
	        jp __PRINT_CONT2

__PRINT_CONT:
	        call __SAVE_S_POSN

__PRINT_CONT2:
	        exx
	        ret

	; ------------- SPECIAL CHARS (< 32) -----------------

__PRINT_SPECIAL:    ; Jumps here if it is a special char
	        exx
	        ld hl, __PRINT_TABLE
	        jp JUMP_HL_PLUS_2A


PRINT_EOL:        ; Called WHENEVER there is no ";" at end of PRINT sentence
	        exx

__PRINT_0Dh:        ; Called WHEN printing CHR$(13)

	        call __SCROLL
#line 210 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
	        call __LOAD_S_POSN

__PRINT_EOL1:        ; Another entry called from PRINT when next line required
	        ld e, 0

__PRINT_EOL2:
	        ld a, d
	        inc a

__PRINT_AT1_END:
	        ld hl, (MAXY)
	        cp h
	        jr c, __PRINT_EOL_END    ; Carry if (MAXY) < d

	        ld hl, __TVFLAGS
	        set 1, (hl)
	        dec a
#line 230 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"

__PRINT_EOL_END:
	        ld d, a

__PRINT_AT2_END:
	        call __SAVE_S_POSN
	        exx
	        ret

__PRINT_COM:
	        exx
	        push hl
	        push de
	        push bc
	        call PRINT_COMMA
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_TAB:
	        ld hl, __PRINT_TAB1
	        jr __PRINT_SET_STATE

__PRINT_TAB1:
	        ld (MEM0), a
	        exx
	        ld hl, __PRINT_TAB2
	        jr __PRINT_SET_STATE

__PRINT_TAB2:
	        ld a, (MEM0)        ; Load tab code (ignore the current one)
	        push hl
	        push de
	        push bc
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl
	        call PRINT_TAB
	        pop bc
	        pop de
	        pop hl
	        ret

__PRINT_NOP:
__PRINT_RESTART:
	        ld hl, __PRINT_START
	        jr __PRINT_SET_STATE

__PRINT_AT:
	        ld hl, __PRINT_AT1

__PRINT_SET_STATE:
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        exx
	        ret

__PRINT_AT1:    ; Jumps here if waiting for 1st parameter
	        exx
	        ld hl, __PRINT_AT2
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        jr __PRINT_AT1_END

__PRINT_AT2:
	        exx
	        ld hl, __PRINT_START
	        ld (PRINT_JUMP_STATE), hl    ; Saves next entry call
	        call __LOAD_S_POSN
	        ld e, a
	        ld hl, (MAXX)
	        cp l
	        jr c, __PRINT_AT2_END
	        jr __PRINT_EOL1

__PRINT_DEL:
	        call __LOAD_S_POSN        ; Gets current screen position
	        dec e
	        ld a, -1
	        cp e
	        jp nz, __PRINT_AT2_END
	        ld hl, (MAXX)
	        ld e, l
	        dec e
	        dec e
	        dec d
	        cp d
	        jp nz, __PRINT_AT2_END
	        ld d, h
	        dec d
	        jp __PRINT_AT2_END

__PRINT_INK:
	        ld hl, __PRINT_INK2
	        jp __PRINT_SET_STATE

__PRINT_INK2:
	        exx
	        call INK_TMP
	        jp __PRINT_RESTART

__PRINT_PAP:
	        ld hl, __PRINT_PAP2
	        jp __PRINT_SET_STATE

__PRINT_PAP2:
	        exx
	        call PAPER_TMP
	        jp __PRINT_RESTART

__PRINT_FLA:
	        ld hl, __PRINT_FLA2
	        jp __PRINT_SET_STATE

__PRINT_FLA2:
	        exx
	        call FLASH_TMP
	        jp __PRINT_RESTART

__PRINT_BRI:
	        ld hl, __PRINT_BRI2
	        jp __PRINT_SET_STATE

__PRINT_BRI2:
	        exx
	        call BRIGHT_TMP
	        jp __PRINT_RESTART

__PRINT_INV:
	        ld hl, __PRINT_INV2
	        jp __PRINT_SET_STATE

__PRINT_INV2:
	        exx
	        call INVERSE_TMP
	        jp __PRINT_RESTART

__PRINT_OVR:
	        ld hl, __PRINT_OVR2
	        jp __PRINT_SET_STATE

__PRINT_OVR2:
	        exx
	        call OVER_TMP
	        jp __PRINT_RESTART

__PRINT_BOLD:
	        ld hl, __PRINT_BOLD2
	        jp __PRINT_SET_STATE

__PRINT_BOLD2:
	        exx
	        call BOLD_TMP
	        jp __PRINT_RESTART

__PRINT_ITA:
	        ld hl, __PRINT_ITA2
	        jp __PRINT_SET_STATE

__PRINT_ITA2:
	        exx
	        call ITALIC_TMP
	        jp __PRINT_RESTART


__BOLD:
	        push hl
	        ld hl, MEM0
	        ld b, 8
__BOLD_LOOP:
	        ld a, (de)
	        ld c, a
	        rlca
	        or c
	        ld (hl), a
	        inc hl
	        inc de
	        djnz __BOLD_LOOP
	        pop hl
	        ld de, MEM0
	        ret


__ITALIC:
	        push hl
	        ld hl, MEM0
	        ex de, hl
	        ld bc, 8
	        ldir
	        ld hl, MEM0
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        srl (hl)
	        inc hl
	        inc hl
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        inc hl
	        sla (hl)
	        pop hl
	        ld de, MEM0
	        ret

PRINT_COMMA:
	        call __LOAD_S_POSN
	        ld a, e
	        and 16
	        add a, 16

PRINT_TAB:
	        PROC
	        LOCAL LOOP, CONTINUE

	        inc a
	        call __LOAD_S_POSN ; e = current row
	        ld d, a
	        ld a, e
	        cp 21h
	        jr nz, CONTINUE
	        ld e, -1
CONTINUE:
	        ld a, d
	        inc e
	        sub e  ; A = A - E
	        and 31 ;
	        ret z  ; Already at position E
	        ld b, a
LOOP:
	        ld a, ' '
	        call __PRINTCHAR
	        djnz LOOP
	        ret
	        ENDP

PRINT_AT: ; Changes cursor to ROW, COL
	         ; COL in A register
	         ; ROW in stack

	        pop hl    ; Ret address
	        ex (sp), hl ; callee H = ROW
	        ld l, a
	        ex de, hl

	        call __IN_SCREEN
	        ret nc    ; Return if out of screen

	        ld hl, __TVFLAGS
	        res 1, (hl)
#line 482 "C:/zxbasic/src/arch/zx48k/library-asm/print.asm"
	        jp __SAVE_S_POSN

	        LOCAL __PRINT_COM
	        LOCAL __BOLD
	        LOCAL __BOLD_LOOP
	        LOCAL __ITALIC
	        LOCAL __PRINT_EOL1
	        LOCAL __PRINT_EOL2
	        LOCAL __PRINT_AT1
	        LOCAL __PRINT_AT2
	        LOCAL __PRINT_AT2_END
	        LOCAL __PRINT_BOLD
	        LOCAL __PRINT_BOLD2
	        LOCAL __PRINT_ITA
	        LOCAL __PRINT_ITA2
	        LOCAL __PRINT_INK
	        LOCAL __PRINT_PAP
	        LOCAL __PRINT_SET_STATE
	        LOCAL __PRINT_TABLE
	        LOCAL __PRINT_TAB, __PRINT_TAB1, __PRINT_TAB2

__PRINT_TABLE:    ; Jump table for 0 .. 22 codes

	        DW __PRINT_NOP    ;  0
	        DW __PRINT_NOP    ;  1
	        DW __PRINT_NOP    ;  2
	        DW __PRINT_NOP    ;  3
	        DW __PRINT_NOP    ;  4
	        DW __PRINT_NOP    ;  5
	        DW __PRINT_COM    ;  6 COMMA
	        DW __PRINT_NOP    ;  7
	        DW __PRINT_DEL    ;  8 DEL
	        DW __PRINT_NOP    ;  9
	        DW __PRINT_NOP    ; 10
	        DW __PRINT_NOP    ; 11
	        DW __PRINT_NOP    ; 12
	        DW __PRINT_0Dh    ; 13
	        DW __PRINT_BOLD   ; 14
	        DW __PRINT_ITA    ; 15
	        DW __PRINT_INK    ; 16
	        DW __PRINT_PAP    ; 17
	        DW __PRINT_FLA    ; 18
	        DW __PRINT_BRI    ; 19
	        DW __PRINT_INV    ; 20
	        DW __PRINT_OVR    ; 21
	        DW __PRINT_AT     ; 22 AT
	        DW __PRINT_TAB    ; 23 TAB

	        ENDP


#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"
#line 4 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"



COPY_ATTR:
		; Just copies current permanent attribs to temporal attribs
		; and sets print mode
		PROC

		LOCAL INVERSE1
		LOCAL __REFRESH_TMP

	INVERSE1 EQU 02Fh

		ld hl, (ATTR_P)
		ld (ATTR_T), hl

		ld hl, FLAGS2
		call __REFRESH_TMP

		ld hl, P_FLAG
		call __REFRESH_TMP


__SET_ATTR_MODE:		; Another entry to set print modes. A contains (P_FLAG)


		LOCAL TABLE
		LOCAL CONT2

		rra					; Over bit to carry
		ld a, (FLAGS2)
		rla					; Over bit in bit 1, Over2 bit in bit 2
		and 3				; Only bit 0 and 1 (OVER flag)

		ld c, a
		ld b, 0

		ld hl, TABLE
		add hl, bc
		ld a, (hl)
		ld (PRINT_MODE), a

		ld hl, (P_FLAG)
		xor a			; NOP -> INVERSE0
		bit 2, l
		jr z, CONT2
		ld a, INVERSE1 	; CPL -> INVERSE1

CONT2:
		ld (INVERSE_MODE), a
		ret

TABLE:
		nop				; NORMAL MODE
		xor (hl)		; OVER 1 MODE
		and (hl)		; OVER 2 MODE
		or  (hl)		; OVER 3 MODE

#line 65 "C:/zxbasic/src/arch/zx48k/library-asm/copy_attr.asm"

__REFRESH_TMP:
		ld a, (hl)
		and 10101010b
		ld c, a
		rra
		or c
		ld (hl), a
		ret

		ENDP

#line 4 "C:/zxbasic/src/arch/zx48k/library-asm/bold.asm"

BOLD:
		PROC

		and 1
		rlca
	    rlca
	    rlca
		ld hl, FLAGS2
		res 3, (HL)
		or (hl)
		ld (hl), a
		ret

	; Sets BOLD flag in P_FLAG temporarily
BOLD_TMP:
		and 1
		rlca
		rlca
		ld hl, FLAGS2
		res 2, (hl)
		or (hl)
		ld (hl), a
		ret

		ENDP

#line 10969 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/div8.asm"
				; --------------------------------
__DIVU8:	; 8 bit unsigned integer division
				; Divides (Top of stack, High Byte) / A
		pop hl	; --------------------------------
		ex (sp), hl	; CALLEE

__DIVU8_FAST:	; Does A / H
		ld l, h
		ld h, a		; At this point do H / L

		ld b, 8
		xor a		; A = 0, Carry Flag = 0

__DIV8LOOP:
		sla	h
		rla
		cp	l
		jr	c, __DIV8NOSUB
		sub	l
		inc	h

__DIV8NOSUB:
		djnz __DIV8LOOP

		ld	l, a		; save remainder
		ld	a, h		;

		ret			; a = Quotient,


					; --------------------------------
__DIVI8:		; 8 bit signed integer division Divides (Top of stack) / A
		pop hl		; --------------------------------
		ex (sp), hl

__DIVI8_FAST:
		ld e, a		; store operands for later
		ld c, h

		or a		; negative?
		jp p, __DIV8A
		neg			; Make it positive

__DIV8A:
		ex af, af'
		ld a, h
		or a
		jp p, __DIV8B
		neg
		ld h, a		; make it positive

__DIV8B:
		ex af, af'

		call __DIVU8_FAST

		ld a, c
		xor l		; bit 7 of A = 1 if result is negative

		ld a, h		; Quotient
		ret p		; return if positive

		neg
		ret


__MODU8:		; 8 bit module. REturns A mod (Top of stack) (unsigned operands)
		pop hl
		ex (sp), hl	; CALLEE

__MODU8_FAST:	; __FASTCALL__ entry
		call __DIVU8_FAST
		ld a, l		; Remainder

		ret		; a = Modulus


__MODI8:		; 8 bit module. REturns A mod (Top of stack) (For singed operands)
		pop hl
		ex (sp), hl	; CALLEE

__MODI8_FAST:	; __FASTCALL__ entry
		call __DIVI8_FAST
		ld a, l		; remainder

		ret		; a = Modulus

#line 10972 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/loadstr.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/alloc.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the MIT license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the MIT license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be freed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.





	; ---------------------------------------------------------------------
	; MEM_ALLOC
	;  Allocates a block of memory in the heap.
	;
	; Parameters
	;  BC = Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	; ---------------------------------------------------------------------

MEM_ALLOC:
__MEM_ALLOC: ; Returns the 1st free block found of the given length (in BC)
	        PROC

	        LOCAL __MEM_LOOP
	        LOCAL __MEM_DONE
	        LOCAL __MEM_SUBTRACT
	        LOCAL __MEM_START
	        LOCAL TEMP, TEMP0

	TEMP EQU TEMP0 + 1

	        ld hl, 0
	        ld (TEMP), hl

__MEM_START:
	        ld hl, ZXBASIC_MEM_HEAP  ; This label point to the heap start
	        inc bc
	        inc bc  ; BC = BC + 2 ; block size needs 2 extra bytes for hidden pointer

__MEM_LOOP:  ; Loads lengh at (HL, HL+). If Lenght >= BC, jump to __MEM_DONE
	        ld a, h ;  HL = NULL (No memory available?)
	        or l
#line 111 "C:/zxbasic/src/arch/zx48k/library-asm/alloc.asm"
	        ret z ; NULL
#line 113 "C:/zxbasic/src/arch/zx48k/library-asm/alloc.asm"
	        ; HL = Pointer to Free block
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        inc hl          ; DE = Block Length

	        push hl         ; HL = *pointer to -> next block
	        ex de, hl
	        or a            ; CF = 0
	        sbc hl, bc      ; FREE >= BC (Length)  (HL = BlockLength - Length)
	        jp nc, __MEM_DONE
	        pop hl
	        ld (TEMP), hl

	        ex de, hl
	        ld e, (hl)
	        inc hl
	        ld d, (hl)
	        ex de, hl
	        jp __MEM_LOOP

__MEM_DONE:  ; A free block has been found.
	             ; Check if at least 4 bytes remains free (HL >= 4)
	        push hl
	        exx  ; exx to preserve bc
	        pop hl
	        ld bc, 4
	        or a
	        sbc hl, bc
	        exx
	        jp nc, __MEM_SUBTRACT
	        ; At this point...
	        ; less than 4 bytes remains free. So we return this block entirely
	        ; We must link the previous block with the next to this one
	        ; (DE) => Pointer to next block
	        ; (TEMP) => &(previous->next)
	        pop hl     ; Discard current block pointer
	        push de
	        ex de, hl  ; DE = Previous block pointer; (HL) = Next block pointer
	        ld a, (hl)
	        inc hl
	        ld h, (hl)
	        ld l, a    ; HL = (HL)
	        ex de, hl  ; HL = Previous block pointer; DE = Next block pointer
TEMP0:
	        ld hl, 0   ; Pre-previous block pointer

	        ld (hl), e
	        inc hl
	        ld (hl), d ; LINKED
	        pop hl ; Returning block.

	        ret

__MEM_SUBTRACT:
	        ; At this point we have to store HL value (Length - BC) into (DE - 2)
	        ex de, hl
	        dec hl
	        ld (hl), d
	        dec hl
	        ld (hl), e ; Store new block length

	        add hl, de ; New length + DE => free-block start
	        pop de     ; Remove previous HL off the stack

	        ld (hl), c ; Store length on its 1st word
	        inc hl
	        ld (hl), b
	        inc hl     ; Return hl
	        ret

	        ENDP

#line 2 "C:/zxbasic/src/arch/zx48k/library-asm/loadstr.asm"

	; Loads a string (ptr) from HL
	; and duplicates it on dynamic memory again
	; Finally, it returns result pointer in HL

__ILOADSTR:		; This is the indirect pointer entry HL = (HL)
			ld a, h
			or l
			ret z
			ld a, (hl)
			inc hl
			ld h, (hl)
			ld l, a

__LOADSTR:		; __FASTCALL__ entry
			ld a, h
			or l
			ret z	; Return if NULL

			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl  ; BC = LEN(a$)

			inc bc
			inc bc	; BC = LEN(a$) + 2 (two bytes for length)

			push hl
			push bc
			call __MEM_ALLOC
			pop bc  ; Recover length
			pop de  ; Recover origin

			ld a, h
			or l
			ret z	; Return if NULL (No memory)

			ex de, hl ; ldir takes HL as source, DE as destiny, so SWAP HL,DE
			push de	; Saves destiny start
			ldir	; Copies string (length number included)
			pop hl	; Recovers destiny in hl as result
			ret
#line 10975 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/lti8.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/lei8.asm"
__LEI8: ; Signed <= comparison for 8bit int
	        ; A <= H (registers)
	    PROC
	    LOCAL checkParity
	    sub h
	    jr nz, __LTI
	    inc a
	    ret

__LTI8:  ; Test 8 bit values A < H
	    sub h

__LTI:   ; Generic signed comparison
	    jp po, checkParity
	    xor 0x80
checkParity:
	    ld a, 0     ; False
	    ret p
	    inc a       ; True
	    ret
	    ENDP
#line 2 "C:/zxbasic/src/arch/zx48k/library-asm/lti8.asm"
#line 10976 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/mul8.asm"
__MUL8:		; Performs 8bit x 8bit multiplication
		PROC

		;LOCAL __MUL8A
		LOCAL __MUL8LOOP
		LOCAL __MUL8B
				; 1st operand (byte) in A, 2nd operand into the stack (AF)
		pop hl	; return address
		ex (sp), hl ; CALLE convention

;;__MUL8_FAST: ; __FASTCALL__ entry
	;;	ld e, a
	;;	ld d, 0
	;;	ld l, d
	;;
	;;	sla h
	;;	jr nc, __MUL8A
	;;	ld l, e
	;;
;;__MUL8A:
	;;
	;;	ld b, 7
;;__MUL8LOOP:
	;;	add hl, hl
	;;	jr nc, __MUL8B
	;;
	;;	add hl, de
	;;
;;__MUL8B:
	;;	djnz __MUL8LOOP
	;;
	;;	ld a, l ; result = A and HL  (Truncate to lower 8 bits)

__MUL8_FAST: ; __FASTCALL__ entry, a = a * h (8 bit mul) and Carry

	    ld b, 8
	    ld l, a
	    xor a

__MUL8LOOP:
	    add a, a ; a *= 2
	    sla l
	    jp nc, __MUL8B
	    add a, h

__MUL8B:
	    djnz __MUL8LOOP

		ret		; result = HL
		ENDP

#line 10977 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/print_eol_attr.asm"
	; Calls PRINT_EOL and then COPY_ATTR, so saves
	; 3 bytes




PRINT_EOL_ATTR:
		call PRINT_EOL
		jp COPY_ATTR
#line 10980 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/printi8.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/printnum.asm"



__PRINTU_START:
		PROC

		LOCAL __PRINTU_CONT

		ld a, b
		or a
		jp nz, __PRINTU_CONT

		ld a, '0'
		jp __PRINT_DIGIT


__PRINTU_CONT:
		pop af
		push bc
		call __PRINT_DIGIT
		pop bc
		djnz __PRINTU_CONT
		ret

		ENDP


__PRINT_MINUS: ; PRINT the MINUS (-) sign. CALLER mus preserve registers
		ld a, '-'
		jp __PRINT_DIGIT

	__PRINT_DIGIT EQU __PRINTCHAR ; PRINTS the char in A register, and puts its attrs


#line 2 "C:/zxbasic/src/arch/zx48k/library-asm/printi8.asm"


__PRINTI8:	; Prints an 8 bits number in Accumulator (A)
				; Converts 8 to 32 bits
		or a
		jp p, __PRINTU8

		push af
		call __PRINT_MINUS
		pop af
		neg

__PRINTU8:
		PROC

		LOCAL __PRINTU_LOOP

		ld b, 0 ; Counter

__PRINTU_LOOP:
		or a
		jp z, __PRINTU_START

		push bc
		ld h, 10
		call __DIVU8_FAST ; Divides by 10. D'E'H'L' contains modulo (L' since < 10)
		pop bc

		ld a, l
		or '0'		  ; Stores ASCII digit (must be print in reversed order)
		push af
		ld a, h
		inc b
		jp __PRINTU_LOOP ; Uses JP in loops

		ENDP

#line 10981 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/printstr.asm"





	; PRINT command routine
	; Prints string pointed by HL

PRINT_STR:
__PRINTSTR:		; __FASTCALL__ Entry to print_string
			PROC
			LOCAL __PRINT_STR_LOOP
	        LOCAL __PRINT_STR_END

	        ld d, a ; Saves A reg (Flag) for later

			ld a, h
			or l
			ret z	; Return if the pointer is NULL

	        push hl

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl	; BC = LEN(a$); HL = &a$

__PRINT_STR_LOOP:
			ld a, b
			or c
			jr z, __PRINT_STR_END 	; END if BC (counter = 0)

			ld a, (hl)
			call __PRINTCHAR
			inc hl
			dec bc
			jp __PRINT_STR_LOOP

__PRINT_STR_END:
	        pop hl
	        ld a, d ; Recovers A flag
	        or a   ; If not 0 this is a temporary string. Free it
	        ret z
	        jp __MEM_FREE ; Frees str from heap and return from there

__PRINT_STR:
	        ; Fastcall Entry
	        ; It ONLY prints strings
	        ; HL = String start
	        ; BC = String length (Number of chars)
	        push hl ; Push str address for later
	        ld d, a ; Saves a FLAG
	        jp __PRINT_STR_LOOP

			ENDP

#line 10982 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/pstorestr.asm"
; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). A new copy of the string is created into the HEAP
	;

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/storestr.asm"
; vim:ts=4:et:sw=4
	; Stores value of current string pointed by DE register into address pointed by HL
	; Returns DE = Address pointer  (&a$)
	; Returns HL = HL               (b$ => might be needed later to free it from the heap)
	;
	; e.g. => HL = _variableName    (DIM _variableName$)
	;         DE = Address into the HEAP
	;
	; This function will resize (REALLOC) the space pointed by HL
	; before copying the content of b$ into a$


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/strcpy.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/realloc.asm"
; vim: ts=4:et:sw=4:
	; Copyleft (K) by Jose M. Rodriguez de la Rosa
	;  (a.k.a. Boriel)
;  http://www.boriel.com
	;
	; This ASM library is licensed under the BSD license
	; you can use it for any purpose (even for commercial
	; closed source programs).
	;
	; Please read the BSD license on the internet

	; ----- IMPLEMENTATION NOTES ------
	; The heap is implemented as a linked list of free blocks.

; Each free block contains this info:
	;
	; +----------------+ <-- HEAP START
	; | Size (2 bytes) |
	; |        0       | <-- Size = 0 => DUMMY HEADER BLOCK
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   | <-- If Size > 4, then this contains (size - 4) bytes
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+   |
	;   <Allocated>        | <-- This zone is in use (Already allocated)
	; +----------------+ <-+
	; | Size (2 bytes) |
	; +----------------+
	; | Next (2 bytes) |---+
	; +----------------+   |
	; | <free bytes...>|   |
	; | (0 if Size = 4)|   |
	; +----------------+ <-+
	; | Next (2 bytes) |--> NULL => END OF LIST
	; |    0 = NULL    |
	; +----------------+
	; | <free bytes...>|
	; | (0 if Size = 4)|
	; +----------------+


	; When a block is FREED, the previous and next pointers are examined to see
	; if we can defragment the heap. If the block to be breed is just next to the
	; previous, or to the next (or both) they will be converted into a single
	; block (so defragmented).


	;   MEMORY MANAGER
	;
	; This library must be initialized calling __MEM_INIT with
	; HL = BLOCK Start & DE = Length.

	; An init directive is useful for initialization routines.
	; They will be added automatically if needed.







	; ---------------------------------------------------------------------
	; MEM_REALLOC
	;  Reallocates a block of memory in the heap.
	;
	; Parameters
	;  HL = Pointer to the original block
	;  BC = New Length of requested memory block
	;
; Returns:
	;  HL = Pointer to the allocated block in memory. Returns 0 (NULL)
	;       if the block could not be allocated (out of memory)
	;
; Notes:
	;  If BC = 0, the block is freed, otherwise
	;  the content of the original block is copied to the new one, and
	;  the new size is adjusted. If BC < original length, the content
	;  will be truncated. Otherwise, extra block content might contain
	;  memory garbage.
	;
	; ---------------------------------------------------------------------
__REALLOC:    ; Reallocates block pointed by HL, with new length BC
	        PROC

	        LOCAL __REALLOC_END

	        ld a, h
	        or l
	        jp z, __MEM_ALLOC    ; If HL == NULL, just do a malloc

	        ld e, (hl)
	        inc hl
	        ld d, (hl)    ; DE = First 2 bytes of HL block

	        push hl
	        exx
	        pop de
	        inc de        ; DE' <- HL + 2
	        exx            ; DE' <- HL (Saves current pointer into DE')

	        dec hl        ; HL = Block start

	        push de
	        push bc
	        call __MEM_FREE        ; Frees current block
	        pop bc
	        push bc
	        call __MEM_ALLOC    ; Gets a new block of length BC
	        pop bc
	        pop de

	        ld a, h
	        or l
	        ret z        ; Return if HL == NULL (No memory)

	        ld (hl), e
	        inc hl
	        ld (hl), d
	        inc hl        ; Recovers first 2 bytes in HL

	        dec bc
	        dec bc        ; BC = BC - 2 (Two bytes copied)

	        ld a, b
	        or c
	        jp z, __REALLOC_END        ; Ret if nothing to copy (BC == 0)

	        exx
	        push de
	        exx
	        pop de        ; DE <- DE' ; Start of remaining block

	        push hl        ; Saves current Block + 2 start
        ex de, hl    ; Exchanges them: DE is destiny block
	        ldir        ; Copies BC Bytes
	        pop hl        ; Recovers Block + 2 start

__REALLOC_END:

	        dec hl        ; Set HL
	        dec hl        ; To begin of block
	        ret

	        ENDP

#line 2 "C:/zxbasic/src/arch/zx48k/library-asm/strcpy.asm"

	; String library


__STRASSIGN: ; Performs a$ = b$ (HL = address of a$; DE = Address of b$)
			PROC

			LOCAL __STRREALLOC
			LOCAL __STRCONTINUE
			LOCAL __B_IS_NULL
			LOCAL __NOTHING_TO_COPY

			ld b, d
			ld c, e
			ld a, b
			or c
			jr z, __B_IS_NULL

			ex de, hl
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl		; BC = LEN(b$)
			ex de, hl	; DE = &b$

__B_IS_NULL:		; Jumps here if B$ pointer is NULL
			inc bc
			inc bc		; BC = BC + 2  ; (LEN(b$) + 2 bytes for storing length)

			push de
			push hl

			ld a, h
			or l
			jr z, __STRREALLOC

			dec hl
			ld d, (hl)
			dec hl
			ld e, (hl)	; DE = MEMBLOCKSIZE(a$)
			dec de
			dec de		; DE = DE - 2  ; (Membloksize takes 2 bytes for memblock length)

			ld h, b
			ld l, c		; HL = LEN(b$) + 2  => Minimum block size required
			ex de, hl	; Now HL = BLOCKSIZE(a$), DE = LEN(b$) + 2

			or a		; Prepare to subtract BLOCKSIZE(a$) - LEN(b$)
			sbc hl, de  ; Carry if len(b$) > Blocklen(a$)
			jr c, __STRREALLOC ; No need to realloc
			; Need to reallocate at least to len(b$) + 2
			ex de, hl	; DE = Remaining bytes in a$ mem block.
			ld hl, 4
			sbc hl, de  ; if remaining bytes < 4 we can continue
			jr nc,__STRCONTINUE ; Otherwise, we realloc, to free some bytes

__STRREALLOC:
			pop hl
			call __REALLOC	; Returns in HL a new pointer with BC bytes allocated
			push hl

__STRCONTINUE:	;   Pops hl and de SWAPPED
			pop de	;	DE = &a$
			pop hl	; 	HL = &b$

			ld a, d		; Return if not enough memory for new length
			or e
			ret z		; Return if DE == NULL (0)

__STRCPY:	; Copies string pointed by HL into string pointed by DE
				; Returns DE as HL (new pointer)
			ld a, h
			or l
			jr z, __NOTHING_TO_COPY
			ld c, (hl)
			inc hl
			ld b, (hl)
			dec hl
			inc bc
			inc bc
			push de
			ldir
			pop hl
			ret

__NOTHING_TO_COPY:
			ex de, hl
			ld (hl), e
			inc hl
			ld (hl), d
			dec hl
			ret

			ENDP

#line 14 "C:/zxbasic/src/arch/zx48k/library-asm/storestr.asm"

__PISTORE_STR:          ; Indirect assignement at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR:           ; Indirect assignement, hl point to a pointer to a pointer to the heap!
	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

__STORE_STR:
	    push de             ; Pointer to b$
	    push hl             ; Array pointer to variable memory address

	    ld c, (hl)
	    inc hl
	    ld h, (hl)
	    ld l, c             ; HL = (HL)

	    call __STRASSIGN    ; HL (a$) = DE (b$); HL changed to a new dynamic memory allocation
	    ex de, hl           ; DE = new address of a$
	    pop hl              ; Recover variable memory address pointer

	    ld (hl), e
	    inc hl
	    ld (hl), d          ; Stores a$ ptr into elemem ptr

	    pop hl              ; Returns ptr to b$ in HL (Caller might needed to free it from memory)
	    ret

#line 8 "C:/zxbasic/src/arch/zx48k/library-asm/pstorestr.asm"

__PSTORE_STR:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR

#line 10983 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/pstorestr2.asm"
; vim:ts=4:et:sw=4
	;
	; Stores an string (pointer to the HEAP by DE) into the address pointed
	; by (IX + BC). No new copy of the string is created into the HEAP, since
	; it's supposed it's already created (temporary string)
	;

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/storestr2.asm"
	; Similar to __STORE_STR, but this one is called when
	; the value of B$ if already duplicated onto the stack.
	; So we needn't call STRASSING to create a duplication
	; HL = address of string memory variable
	; DE = address of 2n string. It just copies DE into (HL)
	; 	freeing (HL) previously.



__PISTORE_STR2: ; Indirect store temporary string at (IX + BC)
	    push ix
	    pop hl
	    add hl, bc

__ISTORE_STR2:
		ld c, (hl)  ; Dereferences HL
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string variable address)

__STORE_STR2:
		push hl
		ld c, (hl)
		inc hl
		ld h, (hl)
		ld l, c		; HL = *HL (real string address)

		push de
		call __MEM_FREE
		pop de

		pop hl
		ld (hl), e
		inc hl
		ld (hl), d
		dec hl		; HL points to mem address variable. This might be useful in the future.

		ret

#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/pstorestr2.asm"

__PSTORE_STR2:
	    push ix
	    pop hl
	    add hl, bc
	    jp __STORE_STR2

#line 10984 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/str.asm"
	; The STR$( ) BASIC function implementation

	; Given a FP number in C ED LH
	; Returns a pointer (in HL) to the memory heap
	; containing the FP number string representation


#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/stackf.asm"
	; -------------------------------------------------------------
	; Functions to manage FP-Stack of the ZX Spectrum ROM CALC
	; -------------------------------------------------------------


	__FPSTACK_PUSH EQU 2AB6h	; Stores an FP number into the ROM FP stack (A, ED CB)
	__FPSTACK_POP  EQU 2BF1h	; Pops an FP number out of the ROM FP stack (A, ED CB)

__FPSTACK_PUSH2: ; Pushes Current A ED CB registers and top of the stack on (SP + 4)
	                 ; Second argument to push into the stack calculator is popped out of the stack
	                 ; Since the caller routine also receives the parameters into the top of the stack
	                 ; four bytes must be removed from SP before pop them out

	    call __FPSTACK_PUSH ; Pushes A ED CB into the FP-STACK
	    exx
	    pop hl       ; Caller-Caller return addr
	    exx
	    pop hl       ; Caller return addr

	    pop af
	    pop de
	    pop bc

	    push hl      ; Caller return addr
	    exx
	    push hl      ; Caller-Caller return addr
	    exx

	    jp __FPSTACK_PUSH


__FPSTACK_I16:	; Pushes 16 bits integer in HL into the FP ROM STACK
					; This format is specified in the ZX 48K Manual
					; You can push a 16 bit signed integer as
					; 0 SS LL HH 0, being SS the sign and LL HH the low
					; and High byte respectively
		ld a, h
		rla			; sign to Carry
		sbc	a, a	; 0 if positive, FF if negative
		ld e, a
		ld d, l
		ld c, h
		xor a
		ld b, a
		jp __FPSTACK_PUSH
#line 9 "C:/zxbasic/src/arch/zx48k/library-asm/str.asm"


__STR:

__STR_FAST:

		PROC
		LOCAL __STR_END
		LOCAL RECLAIM2
		LOCAL STK_END

		ld hl, (STK_END)
		push hl; Stores STK_END
		ld hl, (ATTR_T)	; Saves ATTR_T since it's changed by STR$ due to a ROM BUG
		push hl

	    call __FPSTACK_PUSH ; Push number into stack
		rst 28h		; # Rom Calculator
		defb 2Eh	; # STR$(x)
		defb 38h	; # END CALC
		call __FPSTACK_POP ; Recovers string parameters to A ED CB (Only ED LH are important)

		pop hl
		ld (ATTR_T), hl	; Restores ATTR_T
		pop hl
		ld (STK_END), hl	; Balance STK_END to avoid STR$ bug

		push bc
		push de

		inc bc
		inc bc
		call __MEM_ALLOC ; HL Points to new block

		pop de
		pop bc

		push hl
		ld a, h
		or l
		jr z, __STR_END  ; Return if NO MEMORY (NULL)

		push bc
		push de
		ld (hl), c
		inc hl
		ld (hl), b
		inc hl		; Copies length

		ex de, hl	; HL = start of original string
		ldir		; Copies string content

		pop de		; Original (ROM-CALC) string
		pop bc		; Original Length

__STR_END:
		ex de, hl
		inc bc

		call RECLAIM2 ; Frees TMP Memory
		pop hl		  ; String result

		ret

	RECLAIM2 EQU 19E8h
	STK_END EQU 5C65h

		ENDP

#line 10985 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/strcat.asm"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/strlen.asm"
	; Returns len if a string
	; If a string is NULL, its len is also 0
	; Result returned in HL

__STRLEN:	; Direct FASTCALL entry
			ld a, h
			or l
			ret z

			ld a, (hl)
			inc hl
			ld h, (hl)  ; LEN(str) in HL
			ld l, a
			ret


#line 3 "C:/zxbasic/src/arch/zx48k/library-asm/strcat.asm"

__ADDSTR:	; Implements c$ = a$ + b$
				; hl = &a$, de = &b$ (pointers)


__STRCAT2:	; This routine creates a new string in dynamic space
				; making room for it. Then copies a$ + b$ into it.
				; HL = a$, DE = b$

			PROC

			LOCAL __STR_CONT
			LOCAL __STRCATEND

			push hl
			call __STRLEN
			ld c, l
			ld b, h		; BC = LEN(a$)
			ex (sp), hl ; (SP) = LEN (a$), HL = a$
			push hl		; Saves pointer to a$

			inc bc
			inc bc		; +2 bytes to store length

			ex de, hl
			push hl
			call __STRLEN
			; HL = len(b$)

			add hl, bc	; Total str length => 2 + len(a$) + len(b$)

			ld c, l
			ld b, h		; BC = Total str length + 2
			call __MEM_ALLOC
			pop de		; HL = c$, DE = b$

			ex de, hl	; HL = b$, DE = c$
			ex (sp), hl ; HL = a$, (SP) = b$

			exx
			pop de		; D'E' = b$
			exx

			pop bc		; LEN(a$)

			ld a, d
			or e
		ret z		; If no memory: RETURN

__STR_CONT:
			push de		; Address of c$

			ld a, h
			or l
			jr nz, __STR_CONT1 ; If len(a$) != 0 do copy

	        ; a$ is NULL => uses HL = DE for transfer
			ld h, d
			ld l, e
			ld (hl), a	; This will copy 00 00 at (DE) location
	        inc de      ;
	        dec bc      ; Ensure BC will be set to 1 in the next step

__STR_CONT1:        ; Copies a$ (HL) into c$ (DE)
			inc bc
			inc bc		; BC = BC + 2
		ldir		; MEMCOPY: c$ = a$
			pop hl		; HL = c$

			exx
			push de		; Recovers b$; A ex hl,hl' would be very handy
			exx

			pop de		; DE = b$

__STRCAT: ; ConCATenate two strings a$ = a$ + b$. HL = ptr to a$, DE = ptr to b$
		  ; NOTE: Both DE, BC and AF are modified and lost
			  ; Returns HL (pointer to a$)
			  ; a$ Must be NOT NULL
			ld a, d
			or e
			ret z		; Returns if de is NULL (nothing to copy)

			push hl		; Saves HL to return it later

			ld c, (hl)
			inc hl
			ld b, (hl)
			inc hl
			add hl, bc	; HL = end of (a$) string ; bc = len(a$)
			push bc		; Saves LEN(a$) for later

			ex de, hl	; DE = end of string (Begin of copy addr)
			ld c, (hl)
			inc hl
			ld b, (hl)	; BC = len(b$)

			ld a, b
			or c
			jr z, __STRCATEND; Return if len(b$) == 0

			push bc			 ; Save LEN(b$)
			inc hl			 ; Skip 2nd byte of len(b$)
			ldir			 ; Concatenate b$

			pop bc			 ; Recovers length (b$)
			pop hl			 ; Recovers length (a$)
			add hl, bc		 ; HL = LEN(a$) + LEN(b$) = LEN(a$+b$)
			ex de, hl		 ; DE = LEN(a$+b$)
			pop hl

			ld (hl), e		 ; Updates new LEN and return
			inc hl
			ld (hl), d
			dec hl
			ret

__STRCATEND:
			pop hl		; Removes Len(a$)
			pop hl		; Restores original HL, so HL = a$
			ret

			ENDP

#line 10986 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"

#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/strslice.asm"
	; String slicing library
	; HL = Str pointer
	; DE = String start
	; BC = String character end
	; A register => 0 => the HL pointer wont' be freed from the HEAP
	; e.g. a$(5 TO 10) => HL = a$; DE = 5; BC = 10

	; This implements a$(X to Y) being X and Y first and
	; last characters respectively. If X > Y, NULL is returned

	; Otherwise returns a pointer to a$ FROM X to Y (starting from 0)
	; if Y > len(a$), then a$ will be padded with spaces (reallocating
	; it in dynamic memory if needed). Returns pointer (HL) to resulting
	; string. NULL (0) if no memory for padding.
	;





__STRSLICE:			; Callee entry
		pop hl			; Return ADDRESS
		pop bc			; Last char pos
		pop de			; 1st char pos
		ex (sp), hl		; CALLEE. -> String start

__STRSLICE_FAST:	; __FASTCALL__ Entry
		PROC

		LOCAL __CONT
		LOCAL __EMPTY
		LOCAL __FREE_ON_EXIT

		push hl			; Stores original HL pointer to be recovered on exit
		ex af, af'		; Saves A register for later

		push hl
		call __STRLEN
		inc bc			; Last character position + 1 (string starts from 0)
		or a
		sbc hl, bc		; Compares length with last char position
		jr nc, __CONT	; If Carry => We must copy to end of string
		add hl, bc		; Restore back original LEN(a$) in HL
		ld b, h
		ld c, l			; Copy to the end of str
		ccf				; Clears Carry flag for next subtraction

__CONT:
		ld h, b
		ld l, c			; HL = Last char position to copy (1 for char 0, 2 for char 1, etc)
		sbc hl, de		; HL = LEN(a$) - DE => Number of chars to copy
		jr z, __EMPTY	; 0 Chars to copy => Return HL = 0 (NULL STR)
		jr c, __EMPTY	; If Carry => Nothing to return (NULL STR)

		ld b, h
		ld c, l			; BC = Number of chars to copy
		inc bc
		inc bc			; +2 bytes for string length number

		push bc
		push de
		call __MEM_ALLOC
		pop de
		pop bc
		ld a, h
		or l
		jr z, __EMPTY	; Return if NULL (no memory)

		dec bc
		dec bc			; Number of chars to copy (Len of slice)

		ld (hl), c
		inc hl
		ld (hl), b
		inc hl			; Stores new string length

		ex (sp), hl		; Pointer to A$ now in HL; Pointer to new string chars in Stack
		inc hl
		inc hl			; Skip string length
		add hl, de		; Were to start from A$
		pop de			; Start of new string chars
		push de			; Stores it again
		ldir			; Copies BC chars
		pop de
		dec de
		dec de			; Points to String LEN start
		ex de, hl		; Returns it in HL
		jr __FREE_ON_EXIT

__EMPTY:			; Return NULL (empty) string
		pop hl
		ld hl, 0		; Return NULL


__FREE_ON_EXIT:
		ex af, af'		; Recover original A register
		ex (sp), hl		; Original HL pointer

		or a
		call nz, __MEM_FREE

		pop hl			; Recover result
		ret

		ENDP

#line 10988 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/u32tofreg.asm"
#line 1 "C:/zxbasic/src/arch/zx48k/library-asm/neg32.asm"
__ABS32:
		bit 7, d
		ret z

__NEG32: ; Negates DEHL (Two's complement)
		ld a, l
		cpl
		ld l, a

		ld a, h
		cpl
		ld h, a

		ld a, e
		cpl
		ld e, a

		ld a, d
		cpl
		ld d, a

		inc l
		ret nz

		inc h
		ret nz

		inc de
		ret

#line 2 "C:/zxbasic/src/arch/zx48k/library-asm/u32tofreg.asm"
__I8TOFREG:
		ld l, a
		rlca
		sbc a, a	; A = SGN(A)
		ld h, a
		ld e, a
		ld d, a

__I32TOFREG:	; Converts a 32bit signed integer (stored in DEHL)
					; to a Floating Point Number returned in (A ED CB)

		ld a, d
		or a		; Test sign

		jp p, __U32TOFREG	; It was positive, proceed as 32bit unsigned

		call __NEG32		; Convert it to positive
		call __U32TOFREG	; Convert it to Floating point

		set 7, e			; Put the sign bit (negative) in the 31bit of mantissa
		ret

__U8TOFREG:
					; Converts an unsigned 8 bit (A) to Floating point
		ld l, a
		ld h, 0
		ld e, h
		ld d, h

__U32TOFREG:	; Converts an unsigned 32 bit integer (DEHL)
					; to a Floating point number returned in A ED CB

	    PROC

	    LOCAL __U32TOFREG_END

		ld a, d
		or e
		or h
		or l
	    ld b, d
		ld c, e		; Returns 00 0000 0000 if ZERO
		ret z

		push de
		push hl

		exx
		pop de  ; Loads integer into B'C' D'E'
		pop bc
		exx

		ld l, 128	; Exponent
		ld bc, 0	; DEBC = 0
		ld d, b
		ld e, c

__U32TOFREG_LOOP: ; Also an entry point for __F16TOFREG
		exx
		ld a, d 	; B'C'D'E' == 0 ?
		or e
		or b
		or c
		jp z, __U32TOFREG_END	; We are done

		srl b ; Shift B'C' D'E' >> 1, output bit stays in Carry
		rr c
		rr d
		rr e
		exx

		rr e ; Shift EDCB >> 1, inserting the carry on the left
		rr d
		rr c
		rr b

		inc l	; Increment exponent
		jp __U32TOFREG_LOOP


__U32TOFREG_END:
		exx
	    ld a, l     ; Puts the exponent in a
		res 7, e	; Sets the sign bit to 0 (positive)

		ret
	    ENDP

#line 10989 "C:\Users\geniw\source\repos\PrettySheep\PrettySheep128\ZxBasicFiles\PrettySheep.zxbas"

__LABEL376:
	DEFB 08h
__LABEL377:
	DEFB 17h
	END
